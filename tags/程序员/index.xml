<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序员 on 纯真年代</title>
    <link>https://pureage.info/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/</link>
    <description>Recent content in 程序员 on 纯真年代</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 07 Apr 2019 17:51:22 +0800</lastBuildDate>
    
	<atom:link href="https://pureage.info/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>混迹技术聊天群容易产生的几个错觉</title>
      <link>https://pureage.info/post/illusions-produced-in-im-groups-of-software-technology/</link>
      <pubDate>Sun, 07 Apr 2019 17:51:22 +0800</pubDate>
      
      <guid>https://pureage.info/post/illusions-produced-in-im-groups-of-software-technology/</guid>
      <description>现如今，各行各业都有无数的聊天群，软件技术相关当然也不例外。一个程序员不混几个技术群，每天在里面聊聊技术吹吹水，都似乎有点非主流了。 我这里说</description>
    </item>
    
    <item>
      <title>Golang中令人不那么愉悦的import</title>
      <link>https://pureage.info/post/annoying-golang-import/</link>
      <pubDate>Mon, 18 Mar 2019 14:49:45 +0800</pubDate>
      
      <guid>https://pureage.info/post/annoying-golang-import/</guid>
      <description>众所周知，在github上参与开源项目的一般流程如下： 将开源项目fork到自己的名下。 在本地开发环境中clone自己在上一步中fork的项目</description>
    </item>
    
    <item>
      <title>用手机发布静态博客</title>
      <link>https://pureage.info/post/write-a-blog-with-a-cellphone/</link>
      <pubDate>Fri, 23 Nov 2018 22:15:21 +0800</pubDate>
      
      <guid>https://pureage.info/post/write-a-blog-with-a-cellphone/</guid>
      <description>这篇文章没有什么实际内容，请谨慎点开，不要浪费自己的时间。我就是想测试一下在手机上写一篇博客的感觉如何，能否达到以前使用动态博客程序时的体验</description>
    </item>
    
    <item>
      <title>golang modules对git版本的依赖</title>
      <link>https://pureage.info/post/bad-feeling-about-go-cmd/</link>
      <pubDate>Fri, 16 Nov 2018 23:00:44 +0800</pubDate>
      
      <guid>https://pureage.info/post/bad-feeling-about-go-cmd/</guid>
      <description>这些年来，由于golang缺少依赖管理，社区涌现了五花八门的依赖管理方案，比如glide、govendor、godep等。而golang 自1</description>
    </item>
    
    <item>
      <title>openstack swift中的composite ring</title>
      <link>https://pureage.info/post/composite-ring-of-swift/</link>
      <pubDate>Tue, 23 Oct 2018 15:39:41 +0800</pubDate>
      
      <guid>https://pureage.info/post/composite-ring-of-swift/</guid>
      <description>openstack swift 在很早之前就有了 global clusters 的概念，给每一块磁盘赋予一个 region 的属性，在跨地域分布的集群里进行对象读写操作时，前端 proxy server 可以选择地缘近的后端存储服务来</description>
    </item>
    
    <item>
      <title>过时的技术</title>
      <link>https://pureage.info/post/obsolescent-technology/</link>
      <pubDate>Tue, 10 Oct 2017 15:01:38 +0000</pubDate>
      
      <guid>https://pureage.info/post/obsolescent-technology/</guid>
      <description>互联网技术的世界很奇怪。 大部分时候我们都会听到各种关于技术更新换代太快的说法，仿佛昨天大家都还在用这个流行的物件（技术、框架、架构等）呢，今</description>
    </item>
    
    <item>
      <title>看小说与看代码的共通之处</title>
      <link>https://pureage.info/2016/06/08/similarities-of-novels-and-codes.html</link>
      <pubDate>Tue, 07 Jun 2016 16:10:47 +0000</pubDate>
      
      <guid>https://pureage.info/2016/06/08/similarities-of-novels-and-codes.html</guid>
      <description>看小说，是我从小的爱好，看代码写代码，是我谋生的技能。这是两件极不相干的事，但是最近忽然觉得，这两者却有相通之处。原来我一直是用看小说的方式</description>
    </item>
    
    <item>
      <title>第一次在线下活动中做技术分享</title>
      <link>https://pureage.info/2016/04/26/253.html</link>
      <pubDate>Tue, 26 Apr 2016 14:32:12 +0000</pubDate>
      
      <guid>https://pureage.info/2016/04/26/253.html</guid>
      <description>周日在广州的 OpenResty 社区 meetup 中做了一个主题为《巧用openresty结合nginx变量机制提供定制化web服务》的分享，说实话还挺紧张的，毕竟是第一</description>
    </item>
    
    <item>
      <title>对一门编程语言的基本尊重</title>
      <link>https://pureage.info/2016/03/27/basic-respect-to-a-programming-language.html</link>
      <pubDate>Sun, 27 Mar 2016 03:15:27 +0000</pubDate>
      
      <guid>https://pureage.info/2016/03/27/basic-respect-to-a-programming-language.html</guid>
      <description>在大学里我们就知道一个著名的论断:程序=数据结构+算法，无数人奉为圭臬，衍生出很多变形体，比如&amp;rdquo;编程语言不重要，思想才重要&amp;rd</description>
    </item>
    
    <item>
      <title>如何绘制流程图和结构图</title>
      <link>https://pureage.info/2016/01/12/flow-chart.html</link>
      <pubDate>Tue, 12 Jan 2016 14:38:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/01/12/flow-chart.html</guid>
      <description>经常会看到一些技术博客在讲解代码的时候，能配上一幅幅精美的程序流程图、结构图，一直都很佩服这样的作者。其实他们大多数也并没有使用什么特别的工</description>
    </item>
    
    <item>
      <title>一悲一喜</title>
      <link>https://pureage.info/2016/01/02/ianmurdock-and-agentzh.html</link>
      <pubDate>Sat, 02 Jan 2016 14:02:40 +0000</pubDate>
      
      <guid>https://pureage.info/2016/01/02/ianmurdock-and-agentzh.html</guid>
      <description>这几天，开源软件界有两件大事，一件是 Debian 创始人 Ian Murdock 自杀身亡，另一件是在锤子手机 T2 的发布会上，罗永浩宣布将门票收入捐给 OpenResty，可以说</description>
    </item>
    
    <item>
      <title>accept与epoll惊群</title>
      <link>https://pureage.info/2015/12/22/thundering-herd.html</link>
      <pubDate>Tue, 22 Dec 2015 07:01:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/22/thundering-herd.html</guid>
      <description>今天打开 OneNote,发现里面躺着一篇很久以前写的笔记，现在将它贴出来。 1. 什么叫惊群现象 首先，我们看看维基百科对惊群的定义: The thundering herd problem occurs when a</description>
    </item>
    
    <item>
      <title>不规范的 Nginx 开发</title>
      <link>https://pureage.info/2015/11/11/non-standard-nginx-programming.html</link>
      <pubDate>Wed, 11 Nov 2015 09:55:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/11/11/non-standard-nginx-programming.html</guid>
      <description>最近这一年多， 见识过很多基于 Nginx 开发的项目， 在这个过程中也遇到了几个很常见的不规范的做法。 离主分支过远 Nginx 是一个很有生命力的项目， 不断的在开发一</description>
    </item>
    
    <item>
      <title>进程间传递文件描述符</title>
      <link>https://pureage.info/2015/03/19/passing-file-descriptors.html</link>
      <pubDate>Thu, 19 Mar 2015 08:46:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/03/19/passing-file-descriptors.html</guid>
      <description>首先，必须声明，“进程间传递文件描述符”这个说法是错误的。 在处理文件时，内核空间和用户空间使用的主要对象是不同的。对用户程序来说，一个文件由</description>
    </item>
    
    <item>
      <title>用git做本地备份</title>
      <link>https://pureage.info/2014/08/14/local-backup-using-git.html</link>
      <pubDate>Thu, 14 Aug 2014 01:48:16 +0000</pubDate>
      
      <guid>https://pureage.info/2014/08/14/local-backup-using-git.html</guid>
      <description>得益于强大的git以及github、bitbucket之类的外围产品，我们可以很方便的将自己本地的文件推到远端，除了可以完成它原本程序员之间</description>
    </item>
    
    <item>
      <title>svn log不显示当前提交</title>
      <link>https://pureage.info/2014/04/17/svn-log.html</link>
      <pubDate>Thu, 17 Apr 2014 03:56:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/04/17/svn-log.html</guid>
      <description>关于svn log，我之前的工作方式一般都是这样： 执行commit操作时，不限平台。一般提交代码，会在Linux工作环境下用svn commit</description>
    </item>
    
    <item>
      <title>程序员中的标杆人物-章亦春</title>
      <link>https://pureage.info/2014/04/12/agentzh.html</link>
      <pubDate>Fri, 11 Apr 2014 16:02:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/04/12/agentzh.html</guid>
      <description>这标题，怎么读着这么别扭。 接触开源软件这几年，不知不觉形成了一种印象，大牛一般都是有性格有棱角的，传说中的神人如Linus就不用多说了，身边</description>
    </item>
    
    <item>
      <title>从HTTP Range请求谈标准是如何被破坏的</title>
      <link>https://pureage.info/2014/02/26/how-standard-is-broken.html</link>
      <pubDate>Tue, 25 Feb 2014 16:14:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/02/26/how-standard-is-broken.html</guid>
      <description>如今cdn已成为互联网上的基础设施，会与形形色色的公司打交道。其中既有一些拿着政府资金，结果只让你草草布一个Nginx代理就完事的；也有现在</description>
    </item>
    
    <item>
      <title>关于nginx中的host变量</title>
      <link>https://pureage.info/2014/02/22/host-variable-in-nginx.html</link>
      <pubDate>Fri, 21 Feb 2014 19:51:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/02/22/host-variable-in-nginx.html</guid>
      <description>关于变量host，在Nginx的官网wiki中是如下说明的： $host：in this order of precedence: host name from the request line, or host name from the “Host” request header field, or the server name matching a request 直</description>
    </item>
    
    <item>
      <title>lua-nginx使用自定义变量中需要说明的一点</title>
      <link>https://pureage.info/2014/01/20/lua-nginx-variable.html</link>
      <pubDate>Mon, 20 Jan 2014 15:30:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/01/20/lua-nginx-variable.html</guid>
      <description>在nginx中，有两种方式添加自定义的变量： 在配置文件中用set指定添加 在自己编写的C模块中，调用ngx_http_add_variable</description>
    </item>
    
  </channel>
</rss>