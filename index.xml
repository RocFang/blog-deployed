<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>纯真年代</title>
    <link>https://pureage.info/</link>
    <description>Recent content on 纯真年代</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 07 Apr 2019 17:51:22 +0800</lastBuildDate>
    
        <atom:link href="https://pureage.info/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>混迹技术聊天群容易产生的几个错觉</title>
      <link>https://pureage.info/post/illusions-produced-in-im-groups-of-software-technology/</link>
      <pubDate>Sun, 07 Apr 2019 17:51:22 +0800</pubDate>
      
      <guid>https://pureage.info/post/illusions-produced-in-im-groups-of-software-technology/</guid>
      
        <description>&lt;p&gt;现如今，各行各业都有无数的聊天群，软件技术相关当然也不例外。一个程序员不混几个技术群，每天在里面聊聊技术吹吹水，都似乎有点非主流了。&lt;/p&gt;

&lt;p&gt;我这里说的是那种技术氛围相对浓厚一点的聊天群，大家主要的聊天内容还是会跟某些具体技术相关。纯水群不在本文讨论范围之列。&lt;/p&gt;

&lt;p&gt;经过我长期观察，混迹技术聊天群容易产生几个错觉，甚至可以称之为幻觉。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;错觉一：真正的大牛们貌似都很会喷人，所以我也要会喷。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这种错觉的表现，就是某些群友们从来不会好好说话，言必称A语言垃圾，B框架狗屎，C项目巨烂无比。&lt;/p&gt;

&lt;p&gt;是的，很多业界大牛是比较有个性，经常会看到一些态度激烈的言论。但是你首先要搞清楚，个性每个人都有，但大牛是要肚里有货的，甚至光肚里有货都不够，还要有项目能流传出来供大家使用、讨论、评判。肚里没啥干货，嘴里粪喷成花也改变不了你菜鸟的本质。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;错觉二：指出经典开源项目的毛病，我就看上去更牛逼了。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这一部分人其实跟上一波人有很大的重合，他们缺乏对历史上那些经典开源软件的敬畏之心。&lt;/p&gt;

&lt;p&gt;比如，有人会因为使用的一些开源项目在某些情况下会coredump，就怒而逢此项目必喷。你要问他们是怎么解决这些问题的，有没有给官方报issues，有没有自己提交pull request解决这些问题，答案多半是没有。&lt;/p&gt;

&lt;p&gt;事实上，任何一个开源项目都必然会有bug存在，在使用开源项目时，遇到问题就尝试去反馈问题，解决问题，是使用开源项目的基本素养。&lt;/p&gt;

&lt;p&gt;几十年前，就有一位美国伟人说过：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My fellow programmers ask not what open source can do for you, ask what you can do for open source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然这是我篡改过的版本：）&lt;/p&gt;

&lt;p&gt;&lt;em&gt;错觉三：站在巨人的肩膀上，我自己也是巨人了。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;软件开发/程序设计发展到今天，有无数的先驱在前面铺路搭桥，以至于今天我们不用造轮子，直接完全使用开源项目都能完成很多任务。&lt;/p&gt;

&lt;p&gt;站在巨人的肩膀上，能让我们看的更远，但并不意味着我们自己也是巨人了。自己真正的代码能力怎么样，自己心里有点数啊大兄弟。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>将域名转到Namesilo</title>
      <link>https://pureage.info/post/transfer-domain-from-godaddy-to-namesilo/</link>
      <pubDate>Mon, 25 Mar 2019 10:45:26 +0800</pubDate>
      
      <guid>https://pureage.info/post/transfer-domain-from-godaddy-to-namesilo/</guid>
      
        <description>&lt;p&gt;本网站所使用的域名pureage.info自2011年注册开始，一直托管在godaddy上。当年国外的域名注册商家中，只有godaddy支持支付宝。我是一个怕麻烦的人，所以虽然这么多年续费费用越来越高，我也一直没有想过将域名转出到其它商家托管。&lt;/p&gt;

&lt;p&gt;直到最近，域名又要续费了，而这个info的域名现在居然到了150元人民币一年，干脆趁这个机会转出到namesilo了。整个过程用了不到五分钟，namesilo一年的费用是80多块，还借机体验了一下域名转出的流程，真是何乐而不为呢。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang中令人不那么愉悦的import</title>
      <link>https://pureage.info/post/annoying-golang-import/</link>
      <pubDate>Mon, 18 Mar 2019 14:49:45 +0800</pubDate>
      
      <guid>https://pureage.info/post/annoying-golang-import/</guid>
      
        <description>&lt;p&gt;众所周知，在github上参与开源项目的一般流程如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将开源项目fork到自己的名下。&lt;/li&gt;
&lt;li&gt;在本地开发环境中clone自己在上一步中fork的项目。&lt;/li&gt;
&lt;li&gt;本地完成开发测试和代码提交，再push到自己名下的仓库中。&lt;/li&gt;
&lt;li&gt;从自己名下的这个项目中，对原始项目发起一个pull request。&lt;/li&gt;
&lt;li&gt;发起的pull request被上游merge后，自己的代码就进入开源项目中了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;虽然具体workflow的细节上可能有些差异，但总体流程大概就是这样。&lt;/p&gt;

&lt;p&gt;但是在参与Golang的开源项目中，由于gopath的限制，这个流程就会有问题。举个例子，有一个项目为github.com/userA/project，fork之后，有一个新的仓库，路径为github.com/userB/project。而这个project中大概率会有内部package引用，比如在main.go中，import了github.com/userA/project/moduleA，这样在go get自己的仓库时，仍然会引用到原始的仓库路径。将会导致诸如构建失败等一些问题。&lt;/p&gt;

&lt;p&gt;为什么基于c/c++的开源项目就没有这个问题呢，因为c/c++的构建更原始更简单。include只有两种形式，要么是在标准路径中或项目子目录中去查找，要么在非标准路径下，但能通过编译器的选项来告诉编译器去哪里找，而代码本身则是非常干净的，不会有硬编码的特定路径在源码里面。而Golang的import，是一个完整的url，这样可以让go get之类的工具自动化的进行一些操作。&lt;/p&gt;

&lt;p&gt;上面可以解释Golang项目在引用外部包的时候使用完整url的做法，但是在引用项目内部包时，仍然使用完整url的做法就多少让人觉得有点不能理解。如果import能支持相对路径，就不会有前面提到的问题了。Golang的开发者们当然对这个问题有自己的考虑，参考这个issue：&lt;a href=&#34;https://github.com/golang/go/issues/3515&#34;&gt;https://github.com/golang/go/issues/3515&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;不能简单的说Golang的这种构建方式不对，因为它的出现必然是有自己的优点和解决了一些问题的，所以从实用的角度出发，我们只能将其称之为“特点”，并去适应它。&lt;/p&gt;

&lt;p&gt;解决办法有几个，但都看上去有些丑陋。比如：&lt;/p&gt;

&lt;p&gt;在本地开发的时候，使用的路径仍然是原始项目的路径，将自己名下的仓库作为一个remote upstream，push的时候将修改push到自己名下的仓库中，然后再向原始仓库提交pull request。&lt;/p&gt;

&lt;p&gt;对于一般的开源项目，这种“临时”的方法就够用了。但在下面的几个场景种，这种方法显然会很令人不适：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;原始项目已经不维护了，你想自己长期维护一个fork。&lt;/li&gt;
&lt;li&gt;原始项目仍然在积极维护，但是你仍然想自己长期维护一个fork。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在上述情况下，其实我们是把原始项目和自己的fork当作两个相对独立的项目，我们希望在构建的时候能直接go build就行了，不希望有其他额外的操作。如果有第三个人，他想fork我们这个fork并进行并列开发，按上面的方法将会非常麻烦。&lt;/p&gt;

&lt;p&gt;对于这种情况，我选择将项目内所有源码中的import路径，修改为我自己名下的路径。虽然这种做法很丑陋，也是不得已而为之了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>徒手攀岩</title>
      <link>https://pureage.info/post/free-solo/</link>
      <pubDate>Tue, 12 Mar 2019 14:09:22 +0800</pubDate>
      
      <guid>https://pureage.info/post/free-solo/</guid>
      
        <description>&lt;p&gt;从小到大做过不少不少恶梦，一个反复出现的场景是我被困在一面绝壁之上，进退维谷。最后通常有两个结局，一是始终在高压的状态下度过这个梦境，有可能会被吓醒；另一个是突然意识到自己正在做梦，然后抛开一切恐惧，纵身一跃，飞翔于天地间。&lt;/p&gt;

&lt;p&gt;以后我才知道，原来有一项叫徒手攀岩的极限运动，我在那些恶梦中所处的场景，是这项运动的爱好者们的日常。不同的是，这不是梦。一个闪失，他们就会粉身碎骨，成为不断增长的死亡列表里的一个新的名字。&lt;/p&gt;

&lt;p&gt;纪录片《徒手攀岩》，就讲述了Alex Honnold在无保护措施下成功攀登酋长岩的经过。&lt;/p&gt;

&lt;p&gt;当我们在看一部极限运动的纪录片时，我们看的是什么？对于我自己，是在试图了解这个人，他的动机，他的情感。我觉得当一个人醉心于一种一不留神就会让自己丧命的运动中时，他一定是接近甚至超越一个哲学家的存在。Alex Honnold确实也是这样，对生死、亲情、友情、爱情都有着自己深刻的理解。&lt;/p&gt;

&lt;p&gt;英国探险家乔治·马洛里在被问及为何想要攀登珠穆朗玛峰时回答，“因为它就在那儿“，成为人们至今仍经常引用的名言。这句话可以用来回答许多极限运动领域中类似的问题。但是现在，对于极限运动的评论往往变成了”这就是为什么外国人这么少“之类的调侃。&lt;/p&gt;

&lt;p&gt;我当然不会死板到因为这些评论的盛行就感慨世风不古，在跟朋友们一起看这些视频时，我也会做出此类调侃。但是静下心来细想，一定会是满满的敬意。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>洛奇6中的一段台词</title>
      <link>https://pureage.info/post/a-line-in-rocky6/</link>
      <pubDate>Wed, 09 Jan 2019 18:27:11 +0800</pubDate>
      
      <guid>https://pureage.info/post/a-line-in-rocky6/</guid>
      
        <description>&lt;p&gt;你绝对不会相信，但你以前才这么大，我会把你举高跟你妈说，“他将是世界上最棒的小孩，这孩子绝对超乎想象的优秀”。你长大以后真的很棒，每天看着你就是一种特权了。&lt;/p&gt;

&lt;p&gt;后来你成年就独立了，踏入社会，表现得很好。但不知道什么时候，你变了，不再是原本的你。你让人用手指着你的脸，骂你没用。遇到困难就开始怪罪别人，好像活在阴影下似的。&lt;/p&gt;

&lt;p&gt;跟你说一件你已经知道的事。人生未必都是美好的，世间险恶又无情。不管你有多坚强，你一松懈，就会被逼的屈膝臣服。谁打你，都不会比人生的打击更重。但重点不是你出手多重，而是你能忍耐多少，继续向前迈进。你能承受多少还能向前迈进！这样才能赢啊！&lt;/p&gt;

&lt;p&gt;知道自己的斤两就极力去争取吧，但你要愿意承受打击，不要用手指着别人，说你失败是因为他或她或是任何人。懦夫才会这样，你不是懦夫，你很坚强。&lt;/p&gt;

&lt;p&gt;我会永远爱你，不管发生什么事，你是我的儿子，我的骨肉，是我这辈子最珍贵的礼物。但在你建立自信以前，你都不会有自己的人生。别忘了去看你妈。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You ain&amp;rsquo;t gonna believe this, but you used to fit right here. I&amp;rsquo;d hold you up to say to your mother, &amp;ldquo;this kid&amp;rsquo;s gonna be the best kid in the world. This kid&amp;rsquo;s gonna be somebody better than anybody I ever knew.&amp;rdquo; And you grew up good and wonderful. It was great just watching you, every day was like a privilige.&lt;br /&gt;
Then the time come for you to be your own man and take on the world, and you did. But somewhere along the line, you changed. You stopped being you. You let people stick a finger in your face and tell you you&amp;rsquo;re no good. And when things got hard, you started looking for something to blame, like a big shadow.&lt;br /&gt;
Let me tell you something you already know. The world ain&amp;rsquo;t all sunshine and rainbows. It&amp;rsquo;s a very mean and nasty place and I don&amp;rsquo;t care how tough you are it will beat you to your knees and keep you there permanently if you let it. You, me, or nobody is gonna hit as hard as life. But it ain&amp;rsquo;t about how hard ya hit. It&amp;rsquo;s about how hard you can get it and keep moving forward. How much you can take and keep moving forward. That&amp;rsquo;s how winning is done!&lt;br /&gt;
Now if you know what you&amp;rsquo;re worth then go out and get what you&amp;rsquo;re worth. But ya gotta be willing to take the hits, and not pointing fingers saying you ain&amp;rsquo;t where you wanna be because of him, or her, or anybody! Cowards do that and that ain&amp;rsquo;t you! You&amp;rsquo;re better than that!&lt;br /&gt;
I&amp;rsquo;m always gonna love you no matter what. No matter what happens. You&amp;rsquo;re my son and you&amp;rsquo;re my blood. You&amp;rsquo;re the best thing in my life. But until you start believing in yourself, ya ain&amp;rsquo;t gonna have a life. Don&amp;rsquo;t forget to visit your mother.&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>奎迪：英雄再起</title>
      <link>https://pureage.info/post/creed2/</link>
      <pubDate>Fri, 04 Jan 2019 15:02:29 +0800</pubDate>
      
      <guid>https://pureage.info/post/creed2/</guid>
      
        <description>&lt;p&gt;作为洛奇系列电影的旁支，《奎迪》系列的第二部最近在国内院线上映了。作为一个拳击题材电影的影迷和现实生活中的拳迷，虽然不久前我已经在网上找到视频资源先睹为快了，在上映后仍去电影院重温了一下。&lt;/p&gt;

&lt;p&gt;总的来说，我对这部电影很满意。与上一部相比，加入了更多拳击之外的感情戏，导致中间会有一些沉闷，应该会引起一些争议。但拳击电影从来都不是从头到尾在擂台上拳拳到肉，如果缺了感情的铺垫，情绪没有累积上来，最后的决战就无法成为高潮。&lt;/p&gt;

&lt;p&gt;说一说这个电影除了主角奎迪的成长之外，有意思的两个地方。&lt;/p&gt;

&lt;h3 id=&#34;小德拉戈-傅红雪&#34;&gt;小德拉戈/傅红雪&lt;/h3&gt;

&lt;p&gt;老德拉戈当年在擂台上打死了奎迪的父亲阿波罗，在当时的冷战背景下，在苏联国内荣誉达到顶峰，但随后在与洛奇的比赛中败北，被国家、被妻子抛弃，又失去一切。只有小德拉戈是他唯一的希望。&lt;/p&gt;

&lt;p&gt;所以小德拉戈是一个在仇恨中长大的孩子。他要用拳头把父亲丢失的东西再赢回来。&lt;/p&gt;

&lt;p&gt;是不是很像《边城浪子》里的傅红雪？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;风在呼啸。&lt;br /&gt;
她看着他慢慢地走出去，走入黑暗的夜色中，他的人似已渐渐与黑暗溶为一体。&lt;br /&gt;
他手里的刀，似也渐渐与黑暗溶为一体。&lt;br /&gt;
这时黑暗已笼罩大地。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但他还毕竟比傅红雪幸运的多。最后当父亲蹒跚着扔出表示认输的白手帕时，他可能才发现，从小到大一直用仇恨激励他的父亲，对他极其严厉的父亲，其实内心是深爱着他的，他并不仅仅是一个用来复仇的工具。那一刻，在拳台上他在父亲面前哭的像个孩子。&lt;/p&gt;

&lt;p&gt;影片结尾，不光是属于洛奇和奎迪的，也是属于他们父子的。当老德拉戈和小德拉戈在清晨的街道中并肩跑步训练时，他们彼此一定获得了全新的力量。&lt;/p&gt;

&lt;h3 id=&#34;赛前紧张的奎迪&#34;&gt;赛前紧张的奎迪&lt;/h3&gt;

&lt;p&gt;在上一部中，奎迪在一次比赛前，紧张的脱掉拳套去上厕所。在这一部中，妻子会在登台前对其比一个手势，那意思是问他大便了吗？这一部奎迪主要有三场比赛，第一场和最后一场，妻子赛前做了这个手势，奎迪赢得了比赛。第二场，也就是和小德拉戈的第一场比赛，妻子没有这个动作，奎迪输了比赛。有没有这个手势，是表示他们之间是否是处于全力彼此支持的状态。&lt;/p&gt;

&lt;p&gt;在与小德拉戈的第一场，一意孤行的奎迪，登台前紧张到发抖。在复赛中，取得爱人和洛奇支持的奎迪就沉稳的多。&lt;/p&gt;

&lt;p&gt;仅仅是因为，他有没有明白自己是为何而战。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>如何在考研数学中得到148分</title>
      <link>https://pureage.info/post/how-i-got-148-marks-for-math-in-national-entrance-examination-for-postgraduate/</link>
      <pubDate>Wed, 02 Jan 2019 14:24:49 +0800</pubDate>
      
      <guid>https://pureage.info/post/how-i-got-148-marks-for-math-in-national-entrance-examination-for-postgraduate/</guid>
      
        <description>&lt;p&gt;本来不想取这个标题，因为它第一眼看上去有一种炫耀的情绪在里面。甚至连这篇文章都犹豫了很久要不要写，犹豫的原因无外乎读者可能会有下面几种看法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;作为一个工作多年的人，还对考研成绩念念不忘，是不是说明考研之后的人生太失败？&lt;/li&gt;
&lt;li&gt;这种文章写出来会不会像现在满大街的鸡汤文一样，都是正确的废话？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为什么又决定还是写下这篇文章呢？&lt;/p&gt;

&lt;p&gt;首先是我想写一系列回忆过去的文章，从中思考“我是怎么成为现在的我”这个哲学命题，考研虽然只是一件小事，但仍有值得记住和总结的地方。其次，考研一结束，这个事情就被我抛在脑后，几乎忘掉，近年来各种关于“认知”、“精进”、“学习”的自媒体非常火爆，但是读了这些看上去非常高大上的文章之后，我才发现其实我在考研中其实就用到了很多相关的方法，只是当时并不自知，因此也值得回忆和总结一下。&lt;/p&gt;

&lt;p&gt;那么言归正传，我就来回忆一下考研这个事情。&lt;/p&gt;

&lt;p&gt;那是近10年前的事情了。当时我在哈尔滨工程大学电子信息工程专业，像主流准备考研的同学一样，我在大三下学期开始着手准备，目标定为电子科技大学的电路与系统专业。考试科目是数学、英语、政治和专业课四门。最终成绩是409分，其中数学148分，英语72分，而政治和专业课多少分已经完全不记得了。无论是总分，还是单科分数，这都是一个非常理想的成绩，而且没有参加任何考研辅导班。&lt;/p&gt;

&lt;p&gt;这些科目中，数学自然是重中之重，而我的数学基础并不好。当年湖北的高考数学卷，总分150我只得了90多分，刚刚及格。也许你会说，一次考试成绩差说明不了你数学真的差。但我自己确信，我的数学是真的差。一方面，我不是那种很聪明的人，另一方面，我还很马虎，简单的算术在打草稿时也会算错。&lt;/p&gt;

&lt;p&gt;所以在当时，我面临的问题是，如何能在半年时间尽可能的提高数学成绩。&lt;/p&gt;

&lt;p&gt;前面说了这么多，其实方法特别简单。既然我接受了自己数学底子差、自己又并不聪明这个设定，那么就重点补基础吧。数学的重中之重是高等数学，我的主要备考资料是同济第五版的高数课本。课本中所有定理的推导过程要完全掌握，都能自行推导出来。不刷任何辅导题集，只做课后习题保持练习的状态。课后习题一般是很简单的，但是不管多简单，都要力求一次性计算正确，这个是为了克服粗心大意的问题。每一道题做完后，要再想一想涉及到的知识点、定理的推导。&lt;/p&gt;

&lt;p&gt;整个过程按部就班，非常轻松。上面就是我在考研数学中得到148分的所有诀窍，看起来很简单是不是。&lt;/p&gt;

&lt;p&gt;不简单的是，如何坚定执行这个方法。要知道，身边所有备考的人每天都在刷各种真题或者模拟题，我没有看到一个像我这样只是天天看课本的。我不知道自己的方法是不是对的，前人的备考经验里也没有这样的成功案例，所以我必然会怀疑自己。&lt;/p&gt;

&lt;p&gt;当时考研的同学会经常上一个考研论坛(bbs.kaoyan.com)交流，我刚惊喜的发现，这个论坛还在。我在里面找到了自己备考前发的一个帖子，内容如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;数学这么学有用吗？&lt;br /&gt;
我打算把课本上所有的定理及定义集中抄下来，将其证明过程集中完全搞懂，但应该会花费很多时间，大家怎么看啊？给点建议吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;帖子并不火爆，但也有一些回答，比如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;没必要，熟练应用需要的是练习，纯背诵效果意义都不大。而且市面上各种总结的数学手册肯定比你详细准确多了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再比如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;你证明定理定义对考试又什么用处&amp;hellip;&amp;hellip;&lt;br /&gt;
难道你考的是数学系？如果不是，那一点用都没有&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;又比如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;学了十几年的数学,你还没入门&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大多是这样的回复，要么是理解错了我的意思，要么是对这种方法持否定态度。所以，在网上寻找志同道合者以解决自我怀疑这条路没走通。这个时候就要靠一种发自内心的野蛮力量了，相信自己做的是正确的。其中有一个事情起了很大的辅助作用，那就是每天坚持跑步，它让我每天保持充沛的精力，平静的心态。&lt;/p&gt;

&lt;p&gt;好了，回忆完毕。&lt;/p&gt;

&lt;p&gt;仔细缕一缕整个过程，能总结出几个有价值的点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;方法论很重要。&lt;/li&gt;
&lt;li&gt;方法论要坚持执行才有意义。&lt;/li&gt;
&lt;li&gt;方法论不唯一。即使是数学考试这么个目标极其明确的事情，每个人都有自己的方法论。&lt;/li&gt;
&lt;li&gt;选择了一个方法论，就要相信它。&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>用手机发布静态博客</title>
      <link>https://pureage.info/post/write-a-blog-with-a-cellphone/</link>
      <pubDate>Fri, 23 Nov 2018 22:15:21 +0800</pubDate>
      
      <guid>https://pureage.info/post/write-a-blog-with-a-cellphone/</guid>
      
        <description>&lt;p&gt;这篇文章没有什么实际内容，请谨慎点开，不要浪费自己的时间。我就是想测试一下在手机上写一篇博客的感觉如何，能否达到以前使用动态博客程序时的体验。&lt;/p&gt;

&lt;p&gt;绝大部分时候，我不会在手机上发布一篇文章，主要原因是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;没有非得在手机上发文的紧迫性。&lt;/li&gt;
&lt;li&gt;在电脑前静下心来写一篇文章也能强迫自己安心整理思路、查阅资料，写出来的文章会更全面。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是也并不能完全排除这个可能，尤其是一些非知识性的心情随笔，可能思绪飘过，不抓住就飘远了，事后往往找不到当时的感觉。比如，2012年夏天我刚从成都到深圳工作时，住处的网络还没安装好，有几篇文章是我特意跑到网吧去写的，就是为了赶紧给当时的状态留下个痕迹。&lt;/p&gt;

&lt;p&gt;本次测试表明，Hugo+Caddy配合起来非常棒，完全能胜任在手机端写作和发布的工作。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>静态博客的黄金搭档:Caddy和Hugo</title>
      <link>https://pureage.info/post/caddy-and-hugo/</link>
      <pubDate>Wed, 21 Nov 2018 01:09:59 +0800</pubDate>
      
      <guid>https://pureage.info/post/caddy-and-hugo/</guid>
      
        <description>&lt;p&gt;几年前，在以Hexo、jekyll为代表的各种静态博客生成系统百花齐放的时候，我写过一篇&lt;a href=&#34;http://pureage.info/2015/12/16/still-using-typecho.html&#34;&gt;继续留在Typecho&lt;/a&gt;。并不是因为我非常守旧，而是经过实际使用测试之后，我认为不管这些静态生成器宣传的多么天花乱坠，它们实际上就是很难用，体现在安装、发布的各个方面。而它们的那些优点并不能让我忽略这些缺点。&lt;/p&gt;

&lt;p&gt;直到我遇到了Hugo。&lt;/p&gt;

&lt;p&gt;在去年下半年发现了Hugo后，我毫不犹豫的写了个脚本将之前所有的文章全部迁移了过来。仅凭它的无依赖和执行速度，就甩开它的那些前辈们好几个身位。&lt;/p&gt;

&lt;p&gt;至于Web Server，我一直是Openresty的死忠，对它是在是太熟悉了，所以理所当然这个博客也是用Openresty来提供服务。对Openresty/Nginx的深入了解，让我有一种踏实感和掌控感，哪怕对于一个静态站点来说，开启https和http2几乎是仅有的配置了。&lt;/p&gt;

&lt;p&gt;直到我遇到了Caddy。&lt;/p&gt;

&lt;p&gt;在了解和测试了caddy后，同样我立刻将Web Server由Openresty换成了Caddy。两三行配置就支持https和http2,支持证书的自动更新，再加上说得过去的性能，让人无法拒绝。&lt;/p&gt;

&lt;p&gt;至此，这个博客的技术方案就是Hugo+Caddy。&lt;/p&gt;

&lt;p&gt;将它们分开来说，Hugo是当前最优秀的静态网站生成器，Caddy是配置最简单的Web Server，而又都天生具有Golang程序容易部署的优点，凑在一起就就是个人博客系统的黄金搭档。&lt;/p&gt;

&lt;p&gt;另外，Caddy还有与hugo适配的插件http.hugo，使用这个插件后，可以有跟动态网站相同的文章发布体验。&lt;/p&gt;

&lt;p&gt;还有比这更完美的事情吗？&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>golang modules对git版本的依赖</title>
      <link>https://pureage.info/post/bad-feeling-about-go-cmd/</link>
      <pubDate>Fri, 16 Nov 2018 23:00:44 +0800</pubDate>
      
      <guid>https://pureage.info/post/bad-feeling-about-go-cmd/</guid>
      
        <description>&lt;p&gt;这些年来，由于golang缺少依赖管理，社区涌现了五花八门的依赖管理方案，比如glide、govendor、godep等。而golang 自1.11起，内置了modules方案，总算是来了个一锤定音。&lt;/p&gt;

&lt;p&gt;go modules方案的设计是非常好的，网上介绍go modules机制的文章很多，我这里也不再赘述。工作中写的一些golang项目，我都已经用上了该方案来做依赖管理。之所以这么快的拥抱新方案，是认为有google的背景，即使是新鲜出炉的功能，稳定性应该是有保证的，即使有坑，趟趟也就过去了。&lt;/p&gt;

&lt;p&gt;但是在这个过程中，发现的一些问题让我对google软件工程质量的信心大打折扣。&lt;/p&gt;

&lt;p&gt;举个例子，如果你的开发环境是centos6.5, git版本是比较旧的v1.7.1，这个时候使用go modules是会有问题的(不要问我为什么要在centos6.5上面编译golang程序，因为我个人习惯将开发环境保持与线上环境一致)。在go get或者go build会报一些五花八门的错误，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;build xxxx: cannot find module for path yyy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unknown revision xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体是哪一种错误，取决于不同的执行时机，比如你是对一个之前没有用过go modules的项目从头执行了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go mod init xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;做初始化之后再执行go get 或者go build，还是对一个已经使用go modules的项目直接执行 go get 或者go build。&lt;/p&gt;

&lt;p&gt;如果遇到这类问题，解决方法非常简单，升级一下git 版本到比较新的版本即可。这里说起来很轻描淡写，但是实际排查过程却是很让人恼火，因为整个go cmd的代码实在是太乱了，代码质量不敢恭维，阅读体验很差。那么问题在什么地方呢，在于在确定版本依赖关系的过程中，go cmd代码里调用了一些git指令，而这些指令在较老版本的git中还没有支持。这是一个多么正常的使用场景，可是golang从1.11到现在已经发布的1.11.2，均没有解决这个报错信息与真实原因风马牛不相及的问题。&lt;/p&gt;

&lt;p&gt;一个系统的构建对其他某些组件的版本有依赖，这在软件工程中是一个再常见不过的事情。最简单的处理方式是，要么在文档中写明依赖的版本信息，要么在构建过程中，如果发现某些组件版本太低，就抛出相关信息，然后退出。无论怎么做，都是为了达到一个目的：告诉使用者发生了什么事情，该怎么做。而go 1.11到go 1.11.2里是怎么做的呢，发现git 的一些指令执行失败了，却并不做好异常处理，一直到另一块代码中不得不失败退出，才丢出一个没有任何参考意义的错误信息。&lt;/p&gt;

&lt;p&gt;也许你会觉得我有点小题大做，毕竟是软件就会有bug。但真正让我恼火的是，一些golang的开发者居然保有这样的想法：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;反正开发者们一般是在ubuntu上面开发，上面的git 版本一般足够新了，编译完之后把二进制再部署到centos等老的系统上去就行了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这话当然不是我杜撰的，具体见: &lt;a href=&#34;https://github.com/golang/go/issues/26746&#34;&gt;https://github.com/golang/go/issues/26746&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;连我这种软件行业的凡夫俗子，都知道遇到异常的合理处理方式是什么（例如我在2013年写的一篇文章：&lt;a href=&#34;http://pureage.info/2013/07/13/117.html&#34;&gt;再不判断异常分支就剁手&lt;/a&gt;），google 里绝对意义上的高手竟然对此毫不在意，实在让人大跌眼镜。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>openstack swift中的composite ring</title>
      <link>https://pureage.info/post/composite-ring-of-swift/</link>
      <pubDate>Tue, 23 Oct 2018 15:39:41 +0800</pubDate>
      
      <guid>https://pureage.info/post/composite-ring-of-swift/</guid>
      
        <description>&lt;p&gt;openstack swift 在很早之前就有了 global clusters 的概念，给每一块磁盘赋予一个 region 的属性，在跨地域分布的集群里进行对象读写操作时，前端 proxy server  可以选择地缘近的后端存储服务来通信，进而达到低延迟和高吞吐的目的。具体配置见：&lt;a href=&#34;https://docs.openstack.org/swift/latest/overview_global_cluster.html&#34;&gt;Global Clusters&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这个功能乍看很实用，但是实际上很鸡肋，因为 swift 内部 ring 构建算法并不能保证各副本会均匀的分布在各 region 中。例如，如果你想通过两个 region 实现真正的跨机房备份的话是不行的，因为一个对象的所有副本可能都会在某一个机房的设备上，而另一个机房里一份副本都没有。如果连基本的均衡都做不到，之前的 global clusters 其实并无多大实际意义。&lt;/p&gt;

&lt;p&gt;在最新的 swift 2.19.0 版本里，通过一个叫做组合环（compsite ring）的概念，这个情况才得以改善。它的实现方式如下。&lt;/p&gt;

&lt;p&gt;一个组合环是由两个或多个普通环组合而成，组合后的环，其副本冗余数量是这些普通环的冗余数量之和。各个普通环是在不同的 region 使用不同的设备独立构建的。&lt;/p&gt;

&lt;p&gt;例如，假设想实现一个在A，B两地机房的三份冗余的存储，而且A机房作为主机房希望每个对象都在其上冗余两份，B机房作为次机房则只冗余一份。那么就在分别构建针对 A 和 B 的两个哈希环 RingA 和 RingB, RingA 在创建时指定其冗余份数为2，RingB 在创建时指定其冗余份数为1。在各自添加完设备并生成 ring 文件后，使用 swift 2.19.0 里新增的一个工具 swift-ring-composer，来将 RingA 和 RingB 组合成一个新的环，然后将这个新的环作为最终的环分发到各设备中去使用。&lt;/p&gt;

&lt;p&gt;文档里称 swift-ring-composer 是个实验性质的工具，未来可能会修改或被删除，大家酌情使用。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>王小波和狄德罗</title>
      <link>https://pureage.info/post/wangxiaobo-and-diderot/</link>
      <pubDate>Sat, 20 Oct 2018 00:13:41 +0800</pubDate>
      
      <guid>https://pureage.info/post/wangxiaobo-and-diderot/</guid>
      
        <description>&lt;p&gt;在《似水流年》里，王二曾经很想把肚子划破，掏出肠子挂到敌人脖子上去。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在和平年月里，生活只是挖坑种粮的竞争。虽然生的人高马大，我却比不过别人。这是因为：第一，我不是从小干惯了这种活计；第二，我有腰疼病，干农活没有腰不成。所以我盼望另一种竞争。在战场上，我的英勇会超过一切人。假如做了俘虏，我会偷偷捡块玻璃，把肚子划破，掏出肠子挂到敌人脖子上去。像我这样的兵员一定大为有用。但是不发生战争，我就像刘老先生一样没用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在经历了一系列的变故后，他逐渐放弃了这个想法。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我说过，在似水流年里，有一些事叫我日夜不安。就是这些事：贺先生死了，死时直挺挺；刘老先生死了，死前想吃一只鸭；我在美国时，我爸爸也死了，死在了书桌上，当时他在写一封信，要和我讨论相对论。虽然死法各异，但每个人身上都有足以让他们再活下去的能量。我真希望他们得到延长生命的机会，继续活下去。我自己再也不想掏出肠子挂在别人脖子上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个“掏出肠子挂在敌人脖子上”的描述，在若干年前第一次看《似水流年》时就给我留下了极为深刻的印象。我想王小波也更是受到什么东西的影响，才会写出这样的文字来。&lt;/p&gt;

&lt;p&gt;我认为，这个影响来自狄德罗。&lt;/p&gt;

&lt;p&gt;狄德罗何许人也？来一段维基上对他的描述。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;德尼·狄德罗（法语：Denis Diderot，1713年10月5日－1784年7月31日）是法国启蒙思想家、唯物主义哲学家、无神论者和作家，百科全书派的代表。他的最大成就是主编《百科全书，或科学、艺术和工艺详解词典》（通常称为《百科全书》）（1751年—1772年）。此书概括了18世纪启蒙运动的精神。恩格斯称赞他是“为了对真理和正义的热诚而献出了整个生命”的人。他也被视为是现代百科全书的奠基人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;粗俗的说，这是一个猛人。他甚至在临终前说过：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我死后，随便人们把我葬在哪里都行，但是我要宣布我既不相信圣父，也不相信圣灵，也不相信圣族的其他任何人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;狄德罗在王小波的书里，也出现过几次。&lt;/p&gt;

&lt;p&gt;比如，《未来世界》：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;报纸关心这些事的原因是：作者出了问题，报纸也会被停刊、罚款。所以我舅舅的传记又开始连载时不叫人物传记，而叫哲理小说了。读者反应还不坏，有人投书报社说，狄德罗写过《拉摩的侄子》，现在我们有了《我的舅舅》，实在好得很。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再比如，《革命时期的爱情》：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;过去狄德罗得了中耳炎，就用胡思乱想的办法止疼。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这说明王小波对狄德罗是非常熟悉的，而狄德罗还说过一句话（现在考证这句话很可能并不是狄德罗说的，系后人误传）：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对上帝的信仰是与对独裁的屈服紧密相连的，它们风雨同舟、荣辱与共；只有当最后一个国王被人用最后一个神父的肠子绞死时，人们才能获得自由。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这就把两个人联系起来了。以王小波对法国启蒙思想家的了解程度，我可以单方面宣布他关于“掏出肠子挂到敌人脖子上”的最初意识，是来自狄德罗的。当然这只是我的一点小趣味而已，小波即使在世，当也不会与我辩驳。&lt;/p&gt;

&lt;p&gt;(本文完)&lt;/p&gt;

&lt;p&gt;附：&lt;/p&gt;

&lt;p&gt;生活在18世纪的狄德罗还发现了一个后来被以他的名字命名的效应。&lt;/p&gt;

&lt;p&gt;狄德罗效应是一种常见的“愈得愈不足效应”，在没有得到某种东西时，心里很平稳，而一旦得到了，却不满足。&lt;/p&gt;

&lt;p&gt;有一天，朋友送给他一件质地精良、做工考究的睡袍，狄德罗非常喜欢。可他穿着华贵的睡袍在书房走来走去时，总觉得家具不是破旧不堪，就是风格不对，地毯的针脚也粗得吓人。于是，为了与睡袍配套，旧的东西先后更新，书房终于跟上了睡袍的档次，可他却觉得很不舒服，因为“自己居然被一件睡袍胁迫了”，就把这种感觉写成一篇文章叫《与旧睡袍别离之后的烦恼》。&lt;/p&gt;

&lt;p&gt;200年后，美国哈佛大学经济学家朱丽叶·施罗尔在《过度消费的美国人》一书中，提出了一个新概念——“狄德罗效应”，或“配套效应”，专指人们在拥有了一件新的物品后，不断配置与其相适应的物品，以达到心理上平衡的现象。&lt;/p&gt;

&lt;p&gt;是不是很有趣？&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>取名记</title>
      <link>https://pureage.info/post/the-name-given-to-my-baby/</link>
      <pubDate>Tue, 04 Sep 2018 18:15:20 +0800</pubDate>
      
      <guid>https://pureage.info/post/the-name-given-to-my-baby/</guid>
      
        <description>&lt;p&gt;2017年底，我的生活有了一个很大的变化，妻子怀孕了。怀孕这个事情本身是在我们计划之中，所以只有喜没有惊，算是顺利如意。&lt;/p&gt;

&lt;p&gt;我和妻子两人对生育小孩这个事情一直比较重视，为小朋友的到来提前做了很多准备。比如提前整整一年一起在一家拳馆练习拳击，事后证明，这个决定是非常正确的。另外一件比较重要的事情就是给小朋友取名字了。&lt;/p&gt;

&lt;p&gt;其实在几年前，我就已经开始把取名这个事情放在心里了，源自于对身边很多亲戚朋友给小孩取名无意义化、趋同化的震惊。大数据统计显示，“轩”、“梓”、“子”、“涵”等字处于白热化的扎堆状态，我对此很难理解。&lt;/p&gt;

&lt;p&gt;先定下原则，我觉得一个好名字必须满足如下几个要求：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;简单很重要。&lt;/li&gt;
&lt;li&gt;读起来顺口，且尽量无不好的谐音。&lt;/li&gt;
&lt;li&gt;有实际意义且寄托美好的愿望。&lt;/li&gt;
&lt;li&gt;较强的独特性。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;确定原则只是完成了第一步工作，俗话说巧妇难为无米之炊，第二步，输入材料要够。于是，这一两年里，诗经、楚辞、唐诗、宋词以及几部古典名著都成了我在上下班地铁公交途中的读物，这个步骤可以称为广撒网。&lt;/p&gt;

&lt;p&gt;经过上面广撒网式的收集，我手里已经有十几个备选的名字了。下一步就是从中在做精挑细选。在这个过程中，发现一个问题，有些名字最初遇到的时候非常心动，但几个月、一年之后又会发现没有那么好，而有些名字，第一眼没那么惊艳，时间长了反而觉得更有韵味。这更证实了我的看法，匆忙之下是很难取好一个名字的。&lt;/p&gt;

&lt;p&gt;长话短说，经过两年多的沉淀，最终锁定了一个名字：方云开。关于这个名字，有几点可以说说。&lt;/p&gt;

&lt;p&gt;首先,从文字本身上来说,这两个字足够简单。&lt;/p&gt;

&lt;p&gt;关于出处，有至今出处已不可考的诗句“守得云开见月明”(网上大多说这句出自水浒传，但我通读水浒很多遍，并未找到)，也有“云开见天”，“云开见日”等成语；李隆基有一首诗《平胡》，里面也有“雾扫清玄塞，云开静朔方”的句子；我最喜欢的还是水浒中引用北宋绍尧夫的“纷纷五代乱离间，一旦云开复见天”，在这句诗里居然还看到了李开复的名字。所以从寓意上来看，云开代表的是一种更加光明和美好的前景即将到来的状态。&lt;/p&gt;

&lt;p&gt;从文字本身来说，这两个字又不是简单的堆砌辞藻，够平实和大气。从读音上来看，最后一个开字是第一声，增强了气势。从文字本义上来说，云开二字很有动态的画面感，体现出一种生命力。&lt;/p&gt;

&lt;p&gt;可以看到，在我取名的原则里，是没有考虑五行八字的。倒不是我特别排斥，而是我认为五行八字的东西太深，如果一点都不懂或者只是道听途说懂个一星半点，还不如不参考。也没有太考虑性别，即使是女孩子，也尽量取个中性大气的名字。&lt;/p&gt;

&lt;p&gt;就这样，如无意外，小朋友的名字就是方云开了。然而，事与愿违，最终没有采用这个名字。&lt;/p&gt;

&lt;p&gt;在小朋友出生之后，一位在家族地位很高的长辈咨询了一位“大师”，说按小朋友的八字，名字一定要有火和土的属性。也许是该长辈在企业做领导久了的缘故，经常会在家族事务里把好心的建议变成一种行政式的命令。对此我内心是非常不愉快的，首先从八字上看，我家小朋友的八字比较复杂，是从弱格，不同的大师对此说法可能完全不一样，我怎么确认这位大师说的就一定是对的？其次，难道我历时两年的工作还不如大师随便说的几句话？这事如果是在知乎上，主流意见肯定是不要理会，但在我的个性很难做到如此强硬，在这种抵触又无奈情绪的影响下，取名这件事情我差点陷入破罐子破摔的状态。&lt;/p&gt;

&lt;p&gt;平静下来之后，取名还要继续下去。总不能真给小孩取“耀坤”这种“有火有土”的名字，于心难安啊。&lt;/p&gt;

&lt;p&gt;心态转变之后，又将精力专注于取名本身上来。只是这次进入了hard模式，上述几大原则不能丢，还必须加上五行属性的要求，时间上也有了deadline，必须在给小朋友办出生证明之前最终确定。做了这种妥协之后，我也做了如下的决定：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;名字属性上虽然必须满足火和土，但绝不要在字形里出现明显火和土的偏旁部首。这么做的目的是为了一定程度中和“大师”的不靠谱程度给小孩子带来的影响。&lt;/li&gt;
&lt;li&gt;名字一经确定，就不再征求除妻子之外其他人的意见了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我无法详实的记录这阶段取名的详细过程，只能给出之后的结果。最终确定的名字为“方立维”。取自文天祥《正气歌》里“地维赖以立，天柱赖以尊”这一句。古人认为天圆地方，大地靠几根绳子维系。将“维”和“立”在诗句中出现的顺序调换了一下，使其读起来更顺口。要说有什么寓意的话，希望小朋友以后做一个堂堂正正顶天立地的男子汉吧。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>《如何阅读一本书》读书笔记</title>
      <link>https://pureage.info/post/howto-read-a-book/</link>
      <pubDate>Tue, 14 Nov 2017 13:45:01 +0000</pubDate>
      
      <guid>https://pureage.info/post/howto-read-a-book/</guid>
      
        <description>&lt;p&gt;在几位前辈的推荐下，读完了由莫提默·J.艾德勒和查尔斯·范多伦合著的《如何阅读一本书》，受益良多。&lt;/p&gt;

&lt;p&gt;如书名明示的那样，这是一本指导读者如何读书的书。时至今日，阅读的目标可以分为两种，一种是为获得资讯而阅读，另一种是为增进理解而阅读。这本书就是为希望从阅读中增进理解的读者而准备的。&lt;/p&gt;

&lt;p&gt;在阅读一本书之前，我们或多或少对其有一些期许，认为作者有义务努力的把书写好。本书提出作为读者也有自己该履行的义务。书中有一个比喻，在一场阅读的过程中，作者与读者就像是棒球赛场中的一对投手和捕手。写作与阅读的东西就像那只球一样，是被主动、有活力的双方所共有的，由一方开始，另一方终结。&lt;/p&gt;

&lt;p&gt;本文的主要内容概括如下。&lt;/p&gt;

&lt;h1 id=&#34;四个基本问题&#34;&gt;四个基本问题&lt;/h1&gt;

&lt;p&gt;只要是超越基础阅读的阅读层次，阅读的艺术就是要以适当的顺序提出适当的问题。关于一本书，你一定要提出四个主要的问题。&lt;/p&gt;

&lt;p&gt;(1) 整体来说，这本书到底在谈些什么？你一定要想办法找出这本书的主题，作者如何依次发展这个主题，如何逐步从核心主题分解出从属的关键议题来。&lt;/p&gt;

&lt;p&gt;(2) 作者细部说了什么，怎么说的？你一定要想办法找出主要的想法、声明与论点。这些组合成作者想要传达的特殊讯息。&lt;/p&gt;

&lt;p&gt;(3) 这本书说得有道理吗？是全部有道理，还是部分有道理？除非你能回答前两个问题，否则你没法回答这个问题。在你判断这本书是否有道理之前，你必须先了解整本书在说些什么才行。然而，等你了解了一本书，如果你又读得很认真的话，你会觉得有责任为这本书做个自己的判断。光是知道作者的想法是不够的。&lt;/p&gt;

&lt;p&gt;(4) 这本书跟你有什么关系？如果这本书给了你一些资讯，你一定要问问这些资讯有什么意义。为什么这位作者会认为知道这件事很重要？你真的有必要去了解吗？如果这本书不只提供了资讯，还启发了你，就更有必要找出其他相关的、更深的含意或建议，以获得更多的启示。&lt;/p&gt;

&lt;h1 id=&#34;阅读的层次&#34;&gt;阅读的层次&lt;/h1&gt;

&lt;p&gt;阅读分为四个层次，分别是基础阅读、检视阅读、分析阅读和主题阅读。这些层次的关系是渐进的，较低的层次会包含在较高的层次中。&lt;/p&gt;

&lt;h2 id=&#34;基础阅读&#34;&gt;基础阅读&lt;/h2&gt;

&lt;p&gt;在熟练这个层次的过程中，一个人可以学习到阅读的基本艺术，接受基础的阅读训练，获得初步的阅读技巧。我们之所以喜欢“基础阅读”这个名称，是因为这个阅读层次的学习通常是在小学时完成的。这个层次所解决的问题是：“这个句子在说什么？”&lt;/p&gt;

&lt;h2 id=&#34;检视阅读&#34;&gt;检视阅读&lt;/h2&gt;

&lt;p&gt;在这个层次上，我们的目标是从表面上去观察这本书，学习到光是书的表象所教给我们的一切。这个层次的典型问题是：“这本书在谈什么？”，“这本书的架构如何？”，“这本书包含了哪些部分？”。&lt;/p&gt;

&lt;p&gt;检视阅读包含有两个步骤，有经验的阅读者可以同时运用这两个步骤，对于刚起步的阅读者来说，最好是将两者区别为不同的步骤与活动。&lt;/p&gt;

&lt;h3 id=&#34;检视阅读一-有系统的略读或粗度&#34;&gt;检视阅读一：有系统的略读或粗度&lt;/h3&gt;

&lt;p&gt;（1）先看书名页，然后如果有序就先看序。要很快地看过去。特别注意副标题，或其他的相关说明或宗旨，或是作者写作本书的特殊角度。在完成这个步骤之前，你对这本书的主题已经有概念了。如果你愿意，你会暂停一下，在你脑海中将这本书归类为某个特定的类型。而在那个类型中，已经包含了哪些书。&lt;/p&gt;

&lt;p&gt;（2）研究目录页，对这本书的基本架构做概括性的理解。&lt;/p&gt;

&lt;p&gt;（3）如果书中附有索引，也要检阅一下——大多数论说类的书籍都会有索引。快速评估一下这本书涵盖了哪些议题的范围，以及所提到的书籍种类与作者等等。&lt;/p&gt;

&lt;p&gt;（4）如果那是本包着书衣的新书，不妨读一下出版者的介绍。&lt;/p&gt;

&lt;p&gt;（5）从你对一本书的目录很概略，甚至有点模糊的印象当中，开始挑几个看来跟主题息息相关的篇章来看。&lt;/p&gt;

&lt;p&gt;（6）最后一步，把书打开来，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多。就用这样的方法把全书翻过一遍，随时寻找主要论点的讯号，留意主题的基本脉动。最重要的是，不要忽略最后的两三页。&lt;/p&gt;

&lt;h3 id=&#34;检视阅读二-粗浅的阅读&#34;&gt;检视阅读二：粗浅的阅读&lt;/h3&gt;

&lt;p&gt;从头到尾先读完一遍，碰到不懂的地方不要停下来查询或思索。在第一次阅读一本难读的书时，不要企图了解每一个字句，这是最最重要的一个规则。&lt;/p&gt;

&lt;h2 id=&#34;分析阅读&#34;&gt;分析阅读&lt;/h2&gt;

&lt;p&gt;分析阅读是这本书中话费笔墨最多的部分，可以分为三个阶段，每个阶段又由若干规则组成。&lt;/p&gt;

&lt;h3 id=&#34;分析阅读的第一个阶段&#34;&gt;分析阅读的第一个阶段&lt;/h3&gt;

&lt;p&gt;分析阅读的第一阶段：找出一本书在谈些什么的规则。包含以下若干规则：&lt;/p&gt;

&lt;p&gt;(1) 依照书的种类与主题来分类。&lt;/p&gt;

&lt;p&gt;(2) 使用最简短的文字说明整本书在谈些什么。&lt;/p&gt;

&lt;p&gt;(3) 将主要部分按顺序与关联性列举出来。将全书的大纲列举出来，并将各个部分的大纲也列出来。&lt;/p&gt;

&lt;p&gt;(4) 确定作者想要解决的问题。&lt;/p&gt;

&lt;h3 id=&#34;分析阅读的第二个阶段&#34;&gt;分析阅读的第二个阶段&lt;/h3&gt;

&lt;p&gt;分析阅读的第二阶段：诠释一本书的内容规则。包含以下若干规则：&lt;/p&gt;

&lt;p&gt;(5) 诠释作者的关键字，与他达成共识。&lt;/p&gt;

&lt;p&gt;(6) 由最重要的句子中，抓住作者的重要主旨。&lt;/p&gt;

&lt;p&gt;(7) 知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来。&lt;/p&gt;

&lt;p&gt;(8) 确定作者已经解决了哪些问题，还有哪些是没解决的。再判断哪些是作者知道他没解决的问题。&lt;/p&gt;

&lt;h3 id=&#34;分析阅读的第三个阶段&#34;&gt;分析阅读的第三个阶段&lt;/h3&gt;

&lt;p&gt;分析阅读的第三阶段：像是沟通知识一样地评论一本书的规则&lt;/p&gt;

&lt;p&gt;A．智慧礼节的一般规则&lt;/p&gt;

&lt;p&gt;(9) 除非你已经完成大纲架构，也能诠释整本书了，否则不要轻易批评。（在你说出：“我读懂了!”之前，不要说你同意、不同意或暂缓评论。）&lt;/p&gt;

&lt;p&gt;(10) 不要争强好胜，非辩到底不可。&lt;/p&gt;

&lt;p&gt;(11) 在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同。&lt;/p&gt;

&lt;p&gt;B. 批评观点的特别标准&lt;/p&gt;

&lt;p&gt;(12) 证明作者的知识不足。&lt;/p&gt;

&lt;p&gt;(13) 证明作者的知识错误。&lt;/p&gt;

&lt;p&gt;(14) 证明作者不合逻辑。&lt;/p&gt;

&lt;p&gt;(15) 证明作者的分析与理由是不完整的。&lt;/p&gt;

&lt;p&gt;注意：关于最后这四点，前三点是表示不同意见的准则，如果你无法提出相关的佐证，就必须同意作者的说法，或至少一部分说法。你只能因为最后一点理由，对这本书暂缓评论。&lt;/p&gt;

&lt;h2 id=&#34;主题阅读&#34;&gt;主题阅读&lt;/h2&gt;

&lt;p&gt;这是所有阅读中最复杂也最系统化的阅读。在做主题阅读时，阅读者会读很多书，而不是一本书，并列举出这些书之间相关之处，提出一个所有的书都谈到的主题。但只是书本字里行间的比较还不够。主题阅读涉及的远不止此。借助他所阅读的书籍，主题阅读者要能够架构出一个可能在哪一本书里都没提过的主题分析。因此，很显然的，主题阅读是最主动、也最花力气的一种阅读。&lt;/p&gt;

&lt;h3 id=&#34;主题阅读的步骤&#34;&gt;主题阅读的步骤&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;找到书中与主题相关的章节&lt;/li&gt;
&lt;li&gt;带引作者与你达成共识&lt;/li&gt;
&lt;li&gt;厘清问题&lt;/li&gt;
&lt;li&gt;界定议题&lt;/li&gt;
&lt;li&gt;分析讨论&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;其他&#34;&gt;其他&lt;/h1&gt;

&lt;p&gt;上面所述的各种规则，是针对一般性的论述类型的书籍而言的通用规则。某些具体类型的书籍有一些特殊的要求。作者也针对这些类型的书列出了不同的阅读规则。&lt;/p&gt;

&lt;p&gt;主要包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如何阅读实用型的书&lt;/li&gt;
&lt;li&gt;如何阅读想象文学&lt;/li&gt;
&lt;li&gt;阅读故事、戏剧与诗的一些建议&lt;/li&gt;
&lt;li&gt;如何阅读历史书&lt;/li&gt;
&lt;li&gt;如何阅读科学与数学&lt;/li&gt;
&lt;li&gt;如何阅读哲学书&lt;/li&gt;
&lt;li&gt;如何阅读社会科学&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>过时的技术</title>
      <link>https://pureage.info/post/obsolescent-technology/</link>
      <pubDate>Tue, 10 Oct 2017 15:01:38 +0000</pubDate>
      
      <guid>https://pureage.info/post/obsolescent-technology/</guid>
      
        <description>&lt;p&gt;互联网技术的世界很奇怪。&lt;/p&gt;

&lt;p&gt;大部分时候我们都会听到各种关于技术更新换代太快的说法，仿佛昨天大家都还在用这个流行的物件（技术、框架、架构等）呢，今天就一窝蜂的追赶上另一个更新更时髦的了。&lt;/p&gt;

&lt;p&gt;但有时候又会情不自禁的感慨，有些过时的东西，淘汰的也太慢了。&lt;/p&gt;

&lt;p&gt;这些东西，你明知道它们早晚要被淘汰，但你就是不知道它们到底会撑到什么时候。&lt;/p&gt;

&lt;p&gt;举个例子，mp4点播服务的伪流化(pseudo-streaming)功能。&lt;/p&gt;

&lt;p&gt;这个功能是干什么的呢，简单描述一下，就是提供了对在线mp4点播服务的拖拽功能，或者称为seek。&lt;/p&gt;

&lt;p&gt;在HTML5流行之前，web上的视频播放，是Adobe Flash的天下。这个时候，mp4点播服务的伪流化大概是这样的：Flash播放器会将一次拖拽操作，变成一个带着start、end参数的请求发给服务端，服务端根据传入的start、end参数和原始mp4文件的moov数据，生成一个新的mp4封装发给播放器。除了mp4，其他封装的视频格式比如flv，大概也是如此。&lt;/p&gt;

&lt;p&gt;互联网上的视频点播服务诞生了多久，这种技术就用了多久。掐指一算，十几年是有的了。&lt;/p&gt;

&lt;p&gt;根据上面的描述，可以看到，伪流化功能主要是在服务端实现的，比如Nginx的ngx_http_mp4_module模块。非官方的还有一个nginx_mod_h264_streaming模块，使用Nginx提供mp4服务的，八九不离十就是在这两个模块上面改。其他web server，比如lighttpd，也是类似。&lt;/p&gt;

&lt;p&gt;我们可以并且应该思考一下，这个功能如果放在播放器上来做会怎样呢？这个功能只需要客户端能拿到原始moov和根据计算之后的偏移量指定的数据即可。你一定想到了，http range不就是干这个的吗？&lt;/p&gt;

&lt;p&gt;事实却是如此，一些客户端播放器，比如VLC，正是这么实现拖拽的。&lt;/p&gt;

&lt;p&gt;但是在web上，就没这么简单了，因为这个领域事实上的标准是Adobe Flash Player。所以流行的web server不管愿意不愿意，都要去兼容Flash Player的行为，在服务端实现伪流化。&lt;/p&gt;

&lt;p&gt;随着html5开始流行，事情才开始不一样了。mp4的播放和伪流化，变成了一个浏览器内置的功能。不难想象，伪流化这一部分，仍是基于http range。这种场景下，服务器上的原始视频文件只要提供静态文件服务并且支持range请求就行了。&lt;/p&gt;

&lt;p&gt;多美好的事情。况且现在连flv都有flv.js这种在浏览器上不依赖Adobe Flash Player的开源方案了。&lt;/p&gt;

&lt;p&gt;但是如果恰好是一个CDN服务商，你会发现，在点播服务上等到html5普及，还不知道要等到猴年马月呢。&lt;/p&gt;

&lt;p&gt;可能你会问了，用Adobe Flash Player播放器的，就沿用以前的方案不就OK了吗，没什么好纠结的啊？问题在于其他领域的技术都在不断更新，而独这一块维持不变的话，就会引入一些额外的不必要的工作。&lt;/p&gt;

&lt;p&gt;比如说缓存服务。不管你用的是哪种cache server(squid、ats等)，要实现一遍cache中的mp4伪流化吧？&lt;/p&gt;

&lt;p&gt;而现在分片缓存流行了（譬如nginx的slice module)，又要让你的cache server中的mp4伪流化支持分片缓存的场景吧？&lt;/p&gt;

&lt;p&gt;我个人也是在一年多以前就实现了这个功能，当时nginx的slice分片模块还没出来多久。现在看来这个功能应该是CDN服务的标配了。&lt;/p&gt;

&lt;p&gt;但这确实是个必然要被淘汰的东西啊。想到这里，还真令人惆怅。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://pureage.info/about/</link>
      <pubDate>Sun, 17 Sep 2017 11:11:29 +0000</pubDate>
      
      <guid>https://pureage.info/about/</guid>
      
        <description>

&lt;h1 id=&#34;strider的由来&#34;&gt;strider的由来&lt;/h1&gt;

&lt;p&gt;《指环王》里Aragorn的外号叫作strider。《指环王》是我最喜爱的电影之一，事实上我是在看书后才看的电影。因为高中时并没有多少条件去及时接触这类欧美电影，只能在校园书店里买了一本第三部的译注。现在依然记得在一个周六的下午窝在宿舍床上看《亡者之道》这一章时的紧张不安。看完后还先入为主的认为任何人都不可能拍出原著的精髓，结果在看完电影后，大为折服，仿佛彼得杰克逊圆了我多年的一个梦。无论是原著，还是电影中，Aragorn都占了很大篇幅，他勇敢、忠诚，&lt;strong&gt;最难能可贵的是能承认、直面自己的软弱。&lt;/strong&gt;在原著中，strider一词的第一次亮相是在如下段落:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‘Him?’ said the landlord in an answering whisper, cocking an eye without turning his head. ‘I don’t rightly know. He is one of the wandering folk&amp;ndash;Rangers we call them. He seldom talks: not but what he can tell a rare tale when he has the mind. He disappears for a month, or a year, and then he pops up again. He was in and out pretty often last spring; but I haven’t seen him about lately. What his right name is I’ve never heard: but he’s known round here as &lt;strong&gt;Strider&lt;/strong&gt;. Goes about at a great pace on his long shanks; though he don’t tell nobody what cause he has to hurry. But there’s no accounting for East and West, as we say in Bree, meaning the Rangers and the Shire-folk, begging your pardon. Funny you should ask about him.’ But at that moment Mr. Butterbur was called away by a demand for more ale and his last remark remained unexplained.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;博客标题-纯真年代的由来&#34;&gt;博客标题:纯真年代的由来&lt;/h1&gt;

&lt;p&gt;取自伊迪丝·华顿(Edith Wharton, 1862-1937)的经典著作The Age of Innocence，但与该书主旨无关。域名 pureage.info 的含义是pure+age.&lt;/p&gt;

&lt;h1 id=&#34;关于留言&#34;&gt;关于留言&lt;/h1&gt;

&lt;p&gt;经过细细斟酌，觉得现在个人博客上的留言功能已经不重要了。而且在本博客数次迁移过程中，也丢失了很多朋友的留言，这样也是对读者的不尊重，索性关闭了留言功能.&lt;/p&gt;

&lt;p&gt;当然交流是有意义的，如果您需要对本站某篇文章提出探讨或意见，欢迎给我发邮件，这些留言会被更新到文章本身中去固化下来，某种程度来说，这是对留言更加尊重的一个选择.&lt;/p&gt;

&lt;p&gt;如果您仅仅只是想和我做个朋友，也热情欢迎邮件联系, 萍水相逢皆是缘.&lt;/p&gt;

&lt;p&gt;邮件地址: embedlinux@163.com&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>梁山一百单八将为何第一个出场的是他</title>
      <link>https://pureage.info/2017/05/29/shijin.html</link>
      <pubDate>Mon, 29 May 2017 03:46:00 +0000</pubDate>
      
      <guid>https://pureage.info/2017/05/29/shijin.html</guid>
      
        <description>&lt;p&gt;我们都知道,《水浒传》中有一百零八员好汉聚义于梁山泊，从文学创作的角度来说，这么多性格各异的人物要讲清楚是一件难度非常大的事情,而施耐庵很好的完成了这个任务。如同程序里指针的使用一样，通过一人一事，引出另一人一事，逐渐将所有的人物串联起来，这种写作技巧其实是很高超的。&lt;/p&gt;

&lt;p&gt;近些年火热的魔幻史诗小说《冰与火之歌》，让POV这种写作手法被粉丝们津津乐道，其实跟《水浒传》采用的技巧很类似，并无多大新意。&lt;/p&gt;

&lt;p&gt;那么在这众多人物的出场中，第一个出场的人就很重要了。这被很多人忽略，但值得一品。&lt;/p&gt;

&lt;p&gt;众所周知，《水浒传》中第一个出场的好汉是九纹龙史进。客观的说，他在众好汉中其实不算特别突出，甚至会给人一种安排他出场就是为了引出鲁智深的感觉。&lt;/p&gt;

&lt;p&gt;如此说来，跟前面我提出来的“第一个出场的人就很重要了”的观点不吻合，我想也有很多人从一开始就没同意这个观点，因为反正要安排这一百零八个人登场，无论如何总得有第一个吧？不是你九纹龙史进，就有可能是我豹子头林冲，是他鼓上蚤时迁。谁先谁后真的有那么重要吗？&lt;/p&gt;

&lt;p&gt;下面我想从两个方面讲讲我对于为什么安排史进第一个出场这个问题的理解。&lt;/p&gt;

&lt;p&gt;第一个方面，是引导读者的道德判断倾向，奠定全文的基准氛围。&lt;/p&gt;

&lt;p&gt;水浒的故事，我们从小就耳濡目染，但我猜测大部分人和我一样，在初步了解的时候，会对梁山好汉们的道德评价取正面态度，毕竟聚义厅前挂着替天行道的杏黄大旗。在这一阶段，我们对它的理解是偏向侠义小说这一边的。&lt;/p&gt;

&lt;p&gt;而随着年龄和阅历的增长，我们再看时，可能会发出这样的感慨:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这哪里是什么替天行道，这简直是一群杀人魔王在为害人间。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也有可能这样感慨：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这哪里是什么侠义小说，分明是一部黑帮小说，充斥着权力和欲望的斗争。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然也有可能客观的从小说所处的时代背景出发，理性的评价水浒传中的一系列故事和人物。但总会和我们第一次阅读时的感受有很大的差别。&lt;/p&gt;

&lt;p&gt;而这，就和率先出场的史进有着莫大的关系。&lt;/p&gt;

&lt;p&gt;让我们再来回忆一下故事情节。泼皮高俅在发迹后的第一件事情就是整人，禁军教头王进命悬一线只得带着老母亲出逃。逃跑之路是很艰辛的，如书上所说，“自离了东京，免不得饥餐渴饮，夜住晓行，在路上一月有余”。而不巧，这一天晚上又错过了宿头，前不着村后不着店，这可如何是好？正一筹莫展，“只见远远地林子里闪出一道灯光来”。这道光的源头，正是史家庄。&lt;/p&gt;

&lt;p&gt;这时我们不难揣测王进母子二人的心思。一是喜，黑山野岭的总算找到一个有人的地了；二是忧，担心这庄户的主人不一定乐意收留。于是两人抱着试试看的心态，“遮莫去那里陪个小心，借宿一宵，明日早行”。只要能住上一晚，就是大幸了。&lt;/p&gt;

&lt;p&gt;谁想主人家史太公不仅收留他们过夜，言谈举止还极其友善。“客人休拜，你们是行路的人，辛苦风霜，且坐一坐”。不仅友善，还给予他们额外的关切，听到王进母亲晚上发出病痛之声，主动嘘寒问暖，还给安排拿药治病，并留他们在庄上养病。&lt;/p&gt;

&lt;p&gt;这种对待陌生人的温馨场景，可以说在《水浒传》全书中都是绝无仅有的。&lt;/p&gt;

&lt;p&gt;后来，王进在史家庄逗留了半年多，将史进这个只会耍花枪的小青年调教成一条能行走江湖的真正意义上的好汉。《水浒传》可不会像金庸小说那样重点讲主人公的成长历程，史进的这番成长，在全书中同样也是绝无仅有的。这当然会给读者带来一定的亲切感。而史进接下来的一些列所作所为，又在向读者传递，这是一个极其重义的人。&lt;/p&gt;

&lt;p&gt;而史太公的善良，史进的亲切和义气，会让读者误以为这就是全书的基调，当然会在潜意识里影响读者的道德判断。&lt;/p&gt;

&lt;p&gt;第二个方面，史进的出场，暗示着梁山聚义到头一场空的宿命。&lt;/p&gt;

&lt;p&gt;读罢水浒全书，一百零八好汉最后七零八落，其结局让人感叹。感叹里包含了对天罡地煞们宿命的悲悯，对梁山聚义意义的追问。&lt;/p&gt;

&lt;p&gt;其实很可能，在一开始，施耐庵就在暗示着这到头来一场空的宿命。&lt;/p&gt;

&lt;p&gt;我们知道梁山上有很多人是被逼上梁山的。他们上梁山，一步一步不可逆转，最典型的就是林冲了。&lt;/p&gt;

&lt;p&gt;然而史进不是。史进用现在的话说，是个富二代，在乡里也有些权威，平日里他不去欺负别人，也没人敢欺负到他头上，所以他没有任何理由去落草为寇。但偏偏，他主动走上了这一条不归路。&lt;/p&gt;

&lt;p&gt;这件事情不合理，但发生了，而且一直在发生。&lt;/p&gt;

&lt;p&gt;君不见在《古惑仔》风靡校园的时候，多少小县城的中学生们为了一个义字强行扭转了自己的人生轨迹？等到中年、老年的时候，他们会不会悔恨，会不会思考这一切有何意义？&lt;/p&gt;

&lt;p&gt;史进，就像一个热血青年一样，就这样带着我们一头扎进了《水浒传》的世界里。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>青海湖骑行记</title>
      <link>https://pureage.info/2016/08/28/goto-qinghai-lake.html</link>
      <pubDate>Sun, 28 Aug 2016 03:46:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/08/28/goto-qinghai-lake.html</guid>
      
        <description>&lt;p&gt;七月底，终于和婷在婚假里完成了“蓄谋”已久的青海湖之行，骑行路上花了五天，其中骑行四天，休息一天，全部行程约360公里，这里简单的记录一下流水账。&lt;/p&gt;

&lt;h3 id=&#34;第一天行程-西海镇-江西沟&#34;&gt;第一天行程：西海镇-&amp;gt;江西沟&lt;/h3&gt;

&lt;p&gt;在前一天下午到达西海镇，并将自行车租好之后，7月24号上午10点半，我们就正式从西海镇出发了。之所以这么晚才出发，是听说青海早晚温差大，早上起来早了会很冷。事后证明，这个出发时间是错误的，还是尽量早一点比较好。&lt;/p&gt;

&lt;p&gt;第一天上午在路上是很兴奋的，到处是Windows经典桌面般的蓝天白云。路上骑车的人，或独自前行，或三五成群。耳边不断响起的，有鸟鸣，有风声，还有骑友们随车携带的小音箱里飘出来的民谣和彼此的加油打气声。&lt;/p&gt;

&lt;p&gt;下午5点多时，到达了离湖不远的三叉口。在此处结识了两位在校大学生，于是结伴而行，目的地同是江西沟。&lt;/p&gt;

&lt;p&gt;六点多，到达二郎剑，此时距离江西沟还有26公里，短暂的休息之后继续。而这，又是一个错误的决定。&lt;/p&gt;

&lt;p&gt;本来青海湖周边应该是9点多才天黑的，这也是我们选择继续前进的原因。然而，随着天色渐暗，忽然就下起大雨来了。此时，我们四人早已又分散成两拨，我和婷在后面。雨中天黑的格外快，气温也骤降，虽然穿上了雨衣，冰冷的雨水仍不断渗到衣服和鞋里。婷渐渐体力不支，我们不得不骑一会就下来休息几分钟。&lt;/p&gt;

&lt;p&gt;很快天就完全黑了，我开始害怕起来，我们没带电灯。路上机动车辆少了许多，此时特别希望车从身后来，因为借着车灯，我们能看清一点路，惧怕对面的来车，因为对面的灯照过来就刺的我们什么都看不见。&lt;/p&gt;

&lt;p&gt;我第一次觉得骑车这么难熬。到江西沟的路是一条长长的上坡路，给自己设置的心理暗示作用的目标一个一个被超过，真正的目的地看上去还遥遥无期。&lt;/p&gt;

&lt;p&gt;身体还在僵持，意识逐渐涣散。忽然一辆车从对面开过来，在我们身后掉头又在前方停了下来。原来，那两位大学生不放心我们，在江西沟找了辆车沿路找过来了。&lt;/p&gt;

&lt;p&gt;其实他们的情况也好不了多少，大雨来临的时候，他们还在我们前方不远，这关头，他们其中一个车胎爆了。在大雨里面补胎困难，好在他们在江西沟有熟悉的客栈老板，于是打电话叫老板开车把他们接过去了。吃了点热饭热菜之后，他们就又原来返回来搜寻我们俩。&lt;/p&gt;

&lt;p&gt;其实这个时候，我们俩距离江西沟已经非常近了。他们在前面带路，我和婷仍旧在车上骑到了江西沟。剩余吃饭补充能量就不表了。&lt;/p&gt;

&lt;h3 id=&#34;第二天行程-江西沟-石乃亥&#34;&gt;第二天行程：江西沟-&amp;gt;石乃亥&lt;/h3&gt;

&lt;p&gt;第二天上午，江西沟的雨一直在下。不想在雨中骑车了，我们四个就借机睡到了中午。等雨停后，下午一点左右，我们才出发。在路上仍然是他们俩一路，而我和婷一路，交替前行。&lt;/p&gt;

&lt;p&gt;下午三点左右到达了黑马河，而天气不是非常理想，所以四人讨论了一番，决定放弃去茶卡盐湖的计划，继续前往石乃亥。&lt;/p&gt;

&lt;p&gt;环湖西路是环湖全程最近接湖边的路段，沿途风景绝美，在穿过一片阵雨之后，我和婷在湖边逗留了一个多小时，拍照、玩水。大海一般的湖，让人不忍离去。&lt;/p&gt;

&lt;p&gt;当一位藏民知道我们的目的是石乃亥时，指了指前方黑压压逐渐聚拢的乌云，说，还有25公里，你们要快点了。我们应该做的正确决定，是就在附近藏民的帐篷里住下，而我们又选择了继续前进。&lt;/p&gt;

&lt;p&gt;此时，天空被分成了色彩分明的两部分，我们的身后艳阳高照，我们的前方，乌云越来越厚。视线所及，一条笔直的公路竟变成了墨绿色，壮美到无法言语。&lt;/p&gt;

&lt;p&gt;我们骑的很快，但雨还是来了，比昨天更大的雨，夹着狂风。&lt;/p&gt;

&lt;p&gt;眼镜早已被雨水模糊了，还不断打到眼睛里，眼睛已经几乎睁不开了。我朝身后的婷喊道，“不要往远处看，就盯着路边眼前的白线！”&lt;/p&gt;

&lt;p&gt;在爬过一个陡峭的山口时，头顶一片巨大的经幡在风雨中猎猎作响。此情此景，我忍不住停了下来，闭上眼睛，感受这充斥四周的巨大声响。这大概就是敬畏吧。&lt;/p&gt;

&lt;p&gt;在下这个山口时，路过一群藏族女孩子，看我们在雨中的狼狈样子，她们笑出了声，大喊加油，这时心里忽然安定了下来。&lt;/p&gt;

&lt;p&gt;最终，大概晚上九点，我们赶到了石乃亥，与另外两位回合。才发现，我们的眼睛都已被雨水打的通红。&lt;/p&gt;

&lt;h3 id=&#34;第三天行程-休息&#34;&gt;第三天行程：休息&lt;/h3&gt;

&lt;p&gt;经过连续两天的暴雨，我和婷商量，第三天就在石乃亥休息一天，恢复一下体力并把衣物等都烘干。而那两位学生决定继续前进，于是我们就在石乃亥别过。目送他们俩离开时，心想这一别不知以后能否再见面了。他们都很年轻，活力四射，祝福他们。&lt;/p&gt;

&lt;h3 id=&#34;第四天行程-石乃亥-刚察&#34;&gt;第四天行程：石乃亥-&amp;gt;刚察&lt;/h3&gt;

&lt;p&gt;第四天早上，我们九点整出发，这一天大概要骑82公里。&lt;/p&gt;

&lt;p&gt;这一天的大部分时候，都骑得非常舒服，天气也非常给力。直到距离刚察还有不到10公里的时候，天气又开始变了。&lt;/p&gt;

&lt;p&gt;天空又被割裂成光明和黑暗两部分，而我们就正在向着黑暗前进，真是明知前有雨，偏向雨中行。&lt;/p&gt;

&lt;p&gt;经过半天的酝酿，老天爷终于爆发了。一股暴风猛然袭来，在我前方不远的婷，竟然直接被连人带车刮翻在地，而我也无法继续保持平衡，只好下车推行。婷尝试再次上车，又被风掀倒，而旁边又不断有大货车路过，非常危险。我们当机立断，就地停了下来，穿上雨衣蹲在公路旁的坡道下，这减缓了大部分的风力。没一会，冰雹就来了，砸在头盔上叮当作响。手机显示，当时气温只有9度。&lt;/p&gt;

&lt;p&gt;我们在路边蹲了差不多一个小时后，冰雹停了，风也小些了。于是上车继续，很快就到了刚察县内。&lt;/p&gt;

&lt;h3 id=&#34;第五天行程-刚察-西海镇&#34;&gt;第五天行程：刚察-&amp;gt;西海镇&lt;/h3&gt;

&lt;p&gt;这一天的行程可以分成一两部分，前一部分就是不断的爬坡，偶尔的下坡之后就有一个更长的上坡在前面等着，爬到让人绝望。&lt;/p&gt;

&lt;p&gt;但是，当下半部分到来时，你就会觉得，前面所有的苦和累都是值得的。一个长达20多公里的大下坡，直接到达西海镇。&lt;/p&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;青海的高原风景非常壮美，不是城市景区的那种秀丽风光能比拟的。但是，如果你对骑行本身不是很感兴趣的话，那也会由于审美疲劳而感到无聊。而如果很喜欢骑行的话，那环青海湖这条路线简直就是天堂了。&lt;/p&gt;

&lt;p&gt;高原天气变化太快，我们这次出行中途遇到好几次意料之外的状况，所以出行前还是尽量做好准备。在出行过程中，尽量早点出发，不至于出现状况时发现自己处于前不着村后不着店的黑夜里。&lt;/p&gt;

&lt;p&gt;最后，曾经骑行作为三大俗被很多人笑话。但是经过环青海湖之后，对于这种言论我只会报以轻蔑的一笑了。连青海湖这么好的路况，短短五天（实际骑行只有四天）的路程，就让我体会到骑行真是对身体和意志的双重考验，而与那些穿行在川藏线、滇藏线、新疆等地的真正骑行爱好者相比，我遇到的这些困难不值一提。&lt;/p&gt;

&lt;p&gt;向他们表示敬意。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>代码中的谎言</title>
      <link>https://pureage.info/2016/07/04/lies-in-code.html</link>
      <pubDate>Mon, 04 Jul 2016 15:17:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/07/04/lies-in-code.html</guid>
      
        <description>&lt;p&gt;俗话说，一个谎言，要用一百个谎言去圆。&lt;/p&gt;

&lt;p&gt;在代码的世界里，同样如此。当然，这里只是借用“谎言”这个概念，并不带有任何贬义色彩。“谎言”用来指代那些由于设计或理解上的小疏漏，因为这些小疏漏，导致后续的代码里使用很多迂回的策略来达到目的。&lt;/p&gt;

&lt;p&gt;但是代码世界里的“谎言”，又与真实世界的“谎言”截然不同，因为我们有版本管理系统在背后默默的记录着一切。通过它，我们可以对“谎言”进行追根溯源，找到最初的疏漏。&lt;/p&gt;

&lt;p&gt;今天我们就来以&lt;a href=&#34;https://github.com/arut/nginx-rtmp-module&#34;&gt;Nginx-RTMP&lt;/a&gt;这个项目为例，来“拆穿”它的一个设计精巧的“谎言”。&lt;/p&gt;

&lt;p&gt;在ngx_rtmp.c中，存在一个全局变量ngx_rtmp_init_queue，通过阅读它的相关使用场景，我们可以知道这是一个队列性质的全局变量，与ngx_posted_accept_events、ngx_posted_events这两个变量类似。它们的用法是，将一类事件通过调用ngx_post_event注册到与其对应的队列中，当然这个注册是可以发生在不同的时间和场景下，然后在将来某个时刻，通过调用ngx_event_process_posted来耗尽这个任务队列，即遍历该任务队列中的每个事件，并执行事件的handler回调函数。&lt;/p&gt;

&lt;p&gt;我们继续来看ngx_rtmp_init_queue这个事件队列的具体情况。&lt;/p&gt;

&lt;p&gt;(1) ngx_rtmp_init_queue的初始化&lt;/p&gt;

&lt;p&gt;ngx_rtmp_init_queue的初始化发生在ngx_rtmp_module模块的init_process中，通过调用ngx_rtmp_init_queue来完成。&lt;/p&gt;

&lt;p&gt;(2) ngx_rtmp_init_queue的事件注册&lt;/p&gt;

&lt;p&gt;在Nginx-RTMP中，只有两个地方往ngx_rtmp_init_queue中注册了事件，他们分别是ngx_rtmp_exec_module模块和ngx_rtmp_relay_module模块的init_process钩子。注册的事件具有相同的属性：希望在进程启动的时候就执行的事件。例如在ngx_rtmp_relay_module模块中，正常的pull回源处理逻辑，是当有播放器接入进来之后才会被触发。而配置了属性为static的pull，当worker进程刚启动时就会去上上层拉取指定的流，而不会等播放器播放行为来触发。ngx_rtmp_exec_module模块中的使用也是如此。&lt;/p&gt;

&lt;p&gt;(3) ngx_rtmp_init_queue的消耗&lt;/p&gt;

&lt;p&gt;上面第二点说明了在什么场景、什么时候，程序会往ngx_rtmp_init_queue这个全局队列中注册事件。我们接下来应该关心的是，这个事件队列中的事件，什么时候会得到执行。&lt;/p&gt;

&lt;p&gt;通过查阅代码，我们会发现在ngx_rtmp_stat_module模块的init_process钩子中，ngx_rtmp_init_queue队列中的事件会通过调用ngx_event_process_posted被耗尽。&lt;/p&gt;

&lt;p&gt;至此，从逻辑上来说，我们已经完全清楚了ngx_rtmp_init_queue这个全局变量存在的意义。&lt;/p&gt;

&lt;p&gt;但是这还不够，我们深入思考一下，就会有如下的疑问：&lt;/p&gt;

&lt;p&gt;(1) 为什么在RTMP模块中注册的事件，要在一个HTTP模块(ngx_rtmp_stat_module其实是一个HTTP模块)中执行?ngx_rtmp_stat_module模块的作用是统计流的信息，从逻辑上来说，我们可以选择不编译这个模块，而由于上述ngx_rtmp_init_queue的使用逻辑，却不能这样做，因为这些静态功能(static_pull, static_exec)在依赖它。即使模块之间有时候不能完全避免耦合，但RTMP里的功能却要依赖一个HTTP模块，这说不过去。&lt;/p&gt;

&lt;p&gt;(2) 我们知道任务队列的作用主要是延迟事件的执行。但是这里如此使用的意义在哪里？通过前面的分析，我们知道无论是往ngx_rtmp_init_queue中注册事件，还是消耗ngx_rtmp_init_queue里的事件，都是发生在相关模块的init_process钩子中。而当一个worker进程启动后，马上就会通过一个简单的for循环来遍历执行所有模块的init_process钩子，这显然并没有起到任何延时的意义。&lt;/p&gt;

&lt;p&gt;既然不应该让RTMP模块去依赖一个HTTP模块，也不用考虑事件的延迟执行，我们为什么不去掉ngx_rtmp_init_queue，改为直接在各涉事RTMP模块的init_process钩子中直接去执行自己对应的事件呢？这样程序逻辑更清楚且不会有额外的损失。&lt;/p&gt;

&lt;p&gt;答案是因为定时器。&lt;/p&gt;

&lt;p&gt;这些在init_process中注册到ngx_rtmp_init_queue中的事件，都需要用到定时器来检查这些事件是否执行正常，进而决定是否再次执行相应的逻辑。&lt;/p&gt;

&lt;p&gt;而在RTMP模块的init_process钩子中是不能使用定时器的，严格的说，是使用定时器不会达到定时器的效果。&lt;/p&gt;

&lt;p&gt;所以作者才会创造这么一个ngx_rtmp_init_queue，让本应在相关RTMP模块的init_process钩子中自顾自执行的逻辑，放到统计模块这个HTTP模块的init_process中一股脑执行，因为在HTTP模块的init_process钩子中，可以使用定时器。&lt;/p&gt;

&lt;p&gt;为什么？&lt;/p&gt;

&lt;p&gt;因为定时器的初始化是在ngx_event_core_module模块的init_process钩子中进行的，ngx_event_core_module是一个NGX_EVENT_MODULE类型的模块。而由于Nginx-RTMP项目config文件的写法，会导致所有RTMP类型的模块在全局模块数组ngx_modules中的位置，处于ngx_event_core_module模块的前面。从当前最新的config版本，我们能清楚的看到这一事实：&lt;br /&gt;
&lt;a href=&#34;https://github.com/arut/nginx-rtmp-module/blob/e08959247dc840bb42cdf3389b1f5edb5686825f/config&#34;&gt;config&lt;/a&gt;。所以，ngx_event_core_module的init_process会在各RTMP模块的init_process之后执行，那么在RTMP模块的init_process钩子中添加的定时器，会在ngx_event_core_module的init_process中被毫不留情的初始化掉。&lt;/p&gt;

&lt;p&gt;错误其实在一开始就铸成，从一开始作者就在config文件中将RTMP模块放在了ngx_event_core_module模块之前。我们可以查看config文件的&lt;a href=&#34;https://github.com/arut/nginx-rtmp-module/commit/eb6a14fb6cc9ece398b8b2b5aae5d91b694c32d3&#34;&gt;第二次提交&lt;/a&gt;来确认这一点。&lt;/p&gt;

&lt;p&gt;弄清楚了整个来龙去脉之后，我们当然就知道该如何去掉ngx_rtmp_init_queue，这也是应该的，既然问题都不存在了，为了解决这个问题的奇技淫巧当然也不应该存在。&lt;/p&gt;

&lt;p&gt;开源软件的魅力就在于此，你仿佛能穿越时空，通过代码与作者对话，感受他的聪明、狡黠与纠结。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>雨中午后</title>
      <link>https://pureage.info/2016/06/11/a-rainy-afternoon.html</link>
      <pubDate>Sat, 11 Jun 2016 09:30:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/06/11/a-rainy-afternoon.html</guid>
      
        <description>&lt;p&gt;细雨中&lt;br /&gt;
一辆自行车迎面而来&lt;br /&gt;
车篮里&lt;br /&gt;
一个小女孩伸开双手在飞翔&lt;br /&gt;
卷发贴在额头&lt;br /&gt;
脸蛋红成一个苹果&lt;/p&gt;

&lt;p&gt;多年以后&lt;br /&gt;
她也许还记得&lt;br /&gt;
这个阳光明媚的下午&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>看小说与看代码的共通之处</title>
      <link>https://pureage.info/2016/06/08/similarities-of-novels-and-codes.html</link>
      <pubDate>Tue, 07 Jun 2016 16:10:47 +0000</pubDate>
      
      <guid>https://pureage.info/2016/06/08/similarities-of-novels-and-codes.html</guid>
      
        <description>&lt;p&gt;看小说，是我从小的爱好，看代码写代码，是我谋生的技能。这是两件极不相干的事，但是最近忽然觉得，这两者却有相通之处。原来我一直是用看小说的方式来看代码。&lt;/p&gt;

&lt;p&gt;我认为，一部好的小说，如果不是囫囵吞枣随意读完便罢的话，至少是要看三遍的。&lt;/p&gt;

&lt;p&gt;第一遍，按顺序读完。&lt;/p&gt;

&lt;p&gt;第二遍，以事件、时间为中心，再看一遍。&lt;/p&gt;

&lt;p&gt;第三遍，以人物为中心，再看一遍。&lt;/p&gt;

&lt;p&gt;其中，第二遍和第三遍的顺序可能会颠倒甚至交错进行，而且第二遍和第三遍本身各自又包含小范围内的反复阅读。这个过程虽然每个人各有各的习惯，但主要目的就是整理和归纳。&lt;/p&gt;

&lt;p&gt;按顺序读完，这很好理解。科技类书籍可以跳读、挑读，但是读小说时将作品的内容顺序读完应该是最基本的。&lt;/p&gt;

&lt;p&gt;以事件、时间为中心，是对应小说的灵魂，矛盾和冲突。只有以事件为中心，才能从全局的角度来掌握小说的内容，才能更好的欣赏其中的美。&lt;/p&gt;

&lt;p&gt;例如，金庸的《天龙八部》中的著名事件，少室山大战，参与者有那几方？有几种矛盾在里面？这么多性格迥异、各自怀有不同目的的人，在这个事件中处的位置是什么？如果不能回答这几个问题，是很遗憾的事情，这样就无法欣赏金庸先生的笔力之深，格局之大。&lt;/p&gt;

&lt;p&gt;以人物为中心，则是从细处着眼，分析某个具体人物在一系列事件中的心理和表现，理解其成长或者变化。小说毕竟是个纯人文的东西，在今天完全不读小说其实是完全没有任何害处的，喜欢读小说的人，很多是喜欢那种心理、精神上的沉浸感。从一个具体人物的视角观察书里的世界，我们能更好的理解这些人为什么会在某个时间点做那么一件事情。&lt;/p&gt;

&lt;p&gt;例如，金庸的《神雕侠侣》，郭靖心怀天下的情怀怎么表达出来？通过杨过的眼睛来看。杨过意图刺杀郭靖前后的几章，从杨过的视角，一边是与自己有杀父之仇，一边是为国为民的侠之大者，郭靖心忧天下的形象就呼之欲出了。&lt;/p&gt;

&lt;p&gt;再来说看代码。&lt;/p&gt;

&lt;p&gt;看代码与看小说有个不同，一份代码第一遍很难从头到尾就读一遍，而且看代码的过程，比看小说更需要随时切换视角。所以，上面提到的看小说的“三遍”，对应了看代码的如下三个视角。(注:这里说的看代码的方法仅针对面向过程的项目，面向对象的大型项目我也没深入接触过，就不胡说了。)&lt;/p&gt;

&lt;p&gt;第一，架构、框架的视角&lt;br /&gt;
以Nginx为例，我们要知道Nginx整个框架的基本原理，Nginx框架与各模块是怎么串联起来的，各模块的各回调函数在框架中处于什么位置？&lt;/p&gt;

&lt;p&gt;第二，关键流程的视角&lt;br /&gt;
以Nginx-RTMP为例，我们要知道一个直播过程有哪几方参与？一个流推上来会发生那些事情？一个播放器接进来又会发生哪些事情？音视频数据是怎么发送给播放器的？多进程之间又有哪些事情？断流会有哪些操作？&lt;/p&gt;

&lt;p&gt;第三，数据的视角&lt;br /&gt;
还是以Nginx-RTMP为例，一个流在系统中的数据结构是什么？是怎么存储的？一个tcp连接又是对应什么数据结构，怎么存储的？各播放器怎么表示？它们是怎么组织起来的？pull、push涉及到的远端连接，在系统中是怎么通过relay组织和实现的？&lt;/p&gt;

&lt;p&gt;脑洞大开，胡扯一通。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>朋友李忠</title>
      <link>https://pureage.info/2016/06/04/friend-lizhong.html</link>
      <pubDate>Sat, 04 Jun 2016 11:19:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/06/04/friend-lizhong.html</guid>
      
        <description>&lt;p&gt;《水浒传》是我在错误的年龄过早接触的一部古典名著。&lt;/p&gt;

&lt;p&gt;六岁的时候，父亲给我买了个收音机，我主要用来听两个节目，一个是小喇叭广播讲西游记，另一个就是水浒传的评书，每天都不落下。兴致好的时候，我还会给长辈们复述一遍。所以，水浒传里的故事对于那时的我，真是耳熟能详。大概小学三年级的时候，一位念初中的表哥，买了一本一百二十回版本的《水浒全传》，被我借回来断断续续的看完了。因为故事梗概早已烂熟于胸，所以读起来并不费劲。升初中的那个暑假，更是将全书又仔细的读了一遍，那个时候对水浒传的细节掌握程度达到了顶峰。一百二十个章回题目，一百零八将的姓名、外号、星宿，都能完整的复述出来。从那之后，除了电视剧就再也没有如此仔细的接触水浒了。&lt;/p&gt;

&lt;p&gt;后来，我才知道金圣叹&amp;rdquo;少不看水浒&amp;rdquo;的说法，对当年视为英雄的梁山好汉们的行为，也有了更全面的认识。而在这之前，在整个青少年时期，水浒对我的性格和价值观的形成产生着极大的影响。所以说现在客观的评价，我是在错误的年龄过早的接触了它。&lt;/p&gt;

&lt;p&gt;到了现在这个年龄，偶尔再翻看一下水浒，却有完全不同的感受。&lt;/p&gt;

&lt;p&gt;例如，对李忠的看法。&lt;/p&gt;

&lt;p&gt;打虎将李忠在《水浒传》中的出场顺序非常靠前，但是在梁山一百单八将中却是一个非常没有存在感的人物。出场次数寥寥可数，其中大部分还用来陪衬鲁智深了。所以，读书不仔细的人，可能压根就不记得有这号人物，即使记得，多半也只会记得鲁智深对其的评价，认为他只是个小气的人而已。&lt;/p&gt;

&lt;p&gt;我们应该再仔细的读一读李忠。在水浒传整个暗黑的故事背景下，李忠是极少数拥有健全人格的人之一。&lt;/p&gt;

&lt;p&gt;第一，李忠是个善良的人。&lt;/p&gt;

&lt;p&gt;一百零八好汉，哪个手里没有沾着鲜血。虽然扛着替天行道的旗帜，但是滥杀无辜、劫掠百姓的事也没少干。所以这里说李忠善良，说的是相对善良。&lt;/p&gt;

&lt;p&gt;落草之前，李忠靠使枪弄棒卖狗皮膏药过活。这可是正当营生，如果不是承小霸王周通之义落草桃花山，他这一辈子就是个普普通通的江湖艺人。放到现在，就类似一个技艺平庸的流浪歌手。&lt;/p&gt;

&lt;p&gt;在鲁智深（此时还是鲁达）搭救金老父女的时候，他也体现了自己的善良，捐了二两银子。可就是这二两银子让他入不了鲁智深的眼，当面说其&amp;rdquo;也是个不爽利的人&amp;rdquo;，并把银子丢还给了李忠。从不为吃饭发愁的鲁智深捐了五两银子，富二代史进捐了十两银子，他一个老实手艺人捐二两银子，这已经不少了。鲁智深实在是不体谅人情。&lt;/p&gt;

&lt;p&gt;第二，李忠是个讲义气的人。&lt;/p&gt;

&lt;p&gt;被鲁智深深深鄙视的不仅有李忠，还有他的兄弟，小霸王周通。这两人是如何认识的呢？&lt;/p&gt;

&lt;p&gt;鲁智深拳打镇关西之后，李忠便也跑路了。路过桃花山，被已经落草为寇的周通打劫，两人厮杀一番，周通打不过。周通二话不说，将第一把交椅让给李忠。结为兄弟，同生共死。&lt;/p&gt;

&lt;p&gt;这等豪气干云，哪里半点“不爽利”的影子？也就是他们俩都是武艺平平，如果换做鲁智深和武松，则定然早已传为佳话。&lt;/p&gt;

&lt;p&gt;第三，李忠是个豁达的人。&lt;/p&gt;

&lt;p&gt;豁达，是对一个人很高的评价。豁达意味着不计较、不嫉妒。而李忠就是这样的人。&lt;/p&gt;

&lt;p&gt;李忠应该是个在武艺上没有天分的人，他是史进的启蒙导师，名号、武力值却都不如史进。然而，他丝毫不嫉妒，也不以师父自居。史进鲁智深偶遇正在街上卖艺的李忠，史进叫道：”师父，多时不见。”李忠却说，“贤弟，如何到这里？”一个师父，一个贤弟，就可看出李忠的醇厚，至少，是有自知之明。这已然十分难得。&lt;/p&gt;

&lt;p&gt;前面提到，鲁智深与李忠的第一次见面并不愉快。鲁智深是瞧不起他的，甚至三番五次接近于羞辱了。例如，嫌李忠捐给金老父女的二两银子太少，丢还给了他。丢还这个动作值得好好品味一下。&lt;/p&gt;

&lt;p&gt;一个正常的人，受到这样的轻视，心里定是不好受的。可李忠知道是个鲁智深豪侠之人，始终非常敬重他。&lt;/p&gt;

&lt;p&gt;后来，鲁智深大闹桃花村的时候，已经是个出家人的打扮了。两人于阵前要动手之时，李忠却首先听出了鲁智深的声音，立马下拜。鲁智深后面在桃花山上的举动实在让人大跌眼镜，桃花山杀牛宰马款待他几天，他却始终没来由的认为李忠与周通不是慷慨之人，便要下山。下山便下山，却趁李忠与周通下山的时候，打翻几个喽啰，私拿了许多金银酒器。&lt;/p&gt;

&lt;p&gt;一个正常的人，再受到这样的待遇，可就不是心里不好受的事了。可他显然并没有计较。&lt;/p&gt;

&lt;p&gt;后来桃花山受呼延灼攻打，眼看不支的时候，李忠想到向二龙山求救，书里面这么说:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;周通道:&amp;ldquo;小弟也多知他那里豪杰，只恐那和尚记当初之事，不肯来救.&amp;ldquo;李忠笑道：”他那时又打了你，又得了我们许多金银酒器，如何倒有见怪之心？他是个直性的好人，使人到彼，必然亲引军来救应。“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可见，李忠不仅豁达，还有识人之才。&lt;/p&gt;

&lt;p&gt;之后的故事，除了偶尔在领军名册里挂挂名之外，就没有李忠什么事了，直至在征方腊中死去。&lt;/p&gt;

&lt;p&gt;这么个善良、仗义、豁达的人，由于战力平庸，在群魔乱舞的梁山中毫不出彩。但他的形象却是真实的，可爱的，这种形象能够跨越时代，为今人理解，就像一位身边活生生的朋友。&lt;/p&gt;

&lt;p&gt;附：&lt;br /&gt;
这篇文章写完之后，通过搜索引擎，竟发现王路去年就写了一篇与我看法基本一致的文章，很欣喜。&lt;br /&gt;
王路的文章见&lt;a href=&#34;https://www.douban.com/note/512022270/&#34;&gt;李忠之厚&lt;/a&gt;。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>《丈量世界》</title>
      <link>https://pureage.info/2016/05/27/254.html</link>
      <pubDate>Fri, 27 May 2016 15:29:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/05/27/254.html</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/26320883/&#34;&gt;《丈量世界》&lt;/a&gt;这本书已经读完两周了，按照之前的经验教训，如果想写点读后感而继续不动手的话，基本就永远也不会写了。所以这里赶紧补一篇。&lt;/p&gt;

&lt;p&gt;这本书我很喜欢，所以基本上也是一气呵成看完的。主要讲了高斯和洪堡两个有着截然不同性格和经历的天才，用各自的方式来丈量世界。本书的文字很奇特，读起来有一种如梦似幻的感觉，这种感觉可能也有一部分来自我当时的阅读环境：捧着书看到深夜，直到困意渐渐袭来，然后毫无控制力的睡去。&lt;/p&gt;

&lt;p&gt;高斯的大名我们当然如雷贯耳，小时候就知道他是个神童，是数学王子，到了大学微积分里面还有高斯定理。但这个名字对于我来说仅仅只是一个符号，我们并不了解他。&lt;/p&gt;

&lt;p&gt;洪堡我就更不了解了。&lt;/p&gt;

&lt;p&gt;所以，这本书最直接能给读者的，是将本来符号化的两个名人立体化了，将他们的性格、谈吐、抱负、家庭都展现在我们面前，当然，还有他们最大的共同点，孤独。&lt;/p&gt;

&lt;p&gt;那么好了，作为一篇读后感，写到这里似乎就没什么可写了。但是为什么我会看的如此投入，被如此的震撼呢？这实在很奇怪。&lt;/p&gt;

&lt;p&gt;其实想明白了就不奇怪。&lt;/p&gt;

&lt;p&gt;如果你曾经被《明朝那些事儿》里当年明月的那句“成功只有一个,按照自己的方式，去度过人生”打动的话，你应该会喜欢这本书。&lt;/p&gt;

&lt;p&gt;如果你喜欢看历史、文学，能被长河落日、大漠黄沙等意境打动的话，你应该也会喜欢这本书。&lt;/p&gt;

&lt;p&gt;这些打动我们的东西，其实是相通的，它们都很美。&lt;/p&gt;

&lt;p&gt;所以我就会喜欢独自一人在望远镜下观察星空，在稿纸上构筑数学王国的高斯。会喜欢在星夜爬过一座座高山，路过一片片原野的洪堡。&lt;/p&gt;

&lt;p&gt;高斯是个真正的天才，他足不出户即可通晓许多宇宙的奥秘，他用大脑和纸笔丈量世界。&lt;/p&gt;

&lt;p&gt;洪堡不是智力上的天才，但他有勇气和决心，将生死置之度外，用脚步去丈量世界。&lt;/p&gt;

&lt;p&gt;这就是一种美，而且是壮美。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>第一次在线下活动中做技术分享</title>
      <link>https://pureage.info/2016/04/26/253.html</link>
      <pubDate>Tue, 26 Apr 2016 14:32:12 +0000</pubDate>
      
      <guid>https://pureage.info/2016/04/26/253.html</guid>
      
        <description>&lt;p&gt;周日在广州的 OpenResty 社区 meetup 中做了一个主题为《巧用openresty结合nginx变量机制提供定制化web服务》的分享，说实话还挺紧张的，毕竟是第一次做这种线下的分享，但是到了现场之后慢慢就放松了。因为来参加活动的，大多都是跟身边的同事、同学一样的程序员，在这种气氛下，其实不用考虑会不会怯场、出丑之类的问题。大家都是同道中人，传说中的“演讲技巧”之类的也没有必要，简单的把自己觉得有用的东西分享给大家，对自己是一种锻炼，如果能对听者也能有点用处，那就更好了。&lt;/p&gt;

&lt;p&gt;有几位前公司的同事事前听说我要参加这次分享，自掏门票过来就是为了捧个场，他们中有的工作跟 OpenResty/Nginx 压根没关系，想想挺感动的。都说职场是铁打的营盘流水的兵，能结识这些朋友真是有幸。活动结束后，大家一起去聚了个餐，看了电影《奇幻森林》，这场景太像毕业离别前的小聚，他们中确实有位要马上到另一个城市去了。希望他一切顺心。&lt;/p&gt;

&lt;p&gt;这次活动还认识了一位在 ATS 社区非常活跃的同学，以前只是在网上交流了几句，这次见到真人感觉还真棒，见面后直呼其网名的感觉好像武侠小说里的情节。&lt;/p&gt;

&lt;p&gt;总之，这是一次非常棒的聚会，感谢组织者的精心准备和付出。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>对一门编程语言的基本尊重</title>
      <link>https://pureage.info/2016/03/27/basic-respect-to-a-programming-language.html</link>
      <pubDate>Sun, 27 Mar 2016 03:15:27 +0000</pubDate>
      
      <guid>https://pureage.info/2016/03/27/basic-respect-to-a-programming-language.html</guid>
      
        <description>&lt;p&gt;在大学里我们就知道一个著名的论断:程序=数据结构+算法，无数人奉为圭臬，衍生出很多变形体，比如&amp;rdquo;编程语言不重要，思想才重要&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;现在网络社群发达，一个实际上在某一个领域才刚入门没多久的人，在解决了新手提出的几个hello world 级别的问题之后，就会被称为大神。然后他就能开始散布一些言论了。&lt;/p&gt;

&lt;p&gt;这些言论本身放在一定的限定条件之下是没有问题的，比如 “Python 可简单了，看一个下午手册就能开始干活了”，他至少得有几个限定条件，比如你之前熟悉过其编程语言。即使在这些限定条件之下，你也得踏踏实实花几个小时到半天的时间来看手册不是么。&lt;/p&gt;

&lt;p&gt;可是现实的情况简直令人啼笑皆非。比如，在一个 OpenResty 的群里，关于 Lua 如下的问题简直层出不穷:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;为什么我定义了一个数组，下标 0 处没有我想要的数？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;为什么我在循环里写个 continue 会报错？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;a.b、a[&amp;ldquo;b&amp;rdquo;]、a[b]等等这些表达式为什么总不能按我的设想工作？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;为什么正则表达式在 string.find 中不好使？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;为什么&amp;hellip;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;起初，碰到这种问题，我都会善意的提醒:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;看看《Lua程序设计》这本书吧，Lua 的作者亲手所写，绝大多数这些问题，在前几章都能找到答案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是几次下来之后，很明显提这些问题的人并没有去看。因为在解决了当时的问题之后，他们很快又会提出第二个类似的问题。&lt;/p&gt;

&lt;p&gt;看来以后编程的流派要在面向过程编程、面向对象编程、面向工资编程、面向 Google 编程、面向 Stack Overflow 编程中，加入一个面向 QQ 群编程。&lt;/p&gt;

&lt;p&gt;在我看来，这些人就缺少对一门编程语言的基本尊重。也许，他就是受了某些所谓“大牛”的某些论断的影响。这些论断里可能就有这么一句 “Lua 啊，可简单了，看都不用看，直接写吧”。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>关于Nginx-1.9.11的动态模块</title>
      <link>https://pureage.info/2016/02/14/nginx-dynamic-module.html</link>
      <pubDate>Sun, 14 Feb 2016 14:57:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/02/14/nginx-dynamic-module.html</guid>
      
        <description>&lt;p&gt;我们知道，原生 Nginx 增加、修改一个第三方模块，需要重新编译源代码，所有的模块都是用静态链接的形式组织起来的。而 Tengine 有一个增强的功能，即动态模块加载 DSO(Dynamic Shared Objects), 可以实现运行时动态加载模块，而不用每次都要重新编译Tengine。&lt;/p&gt;

&lt;p&gt;在 2016 年农历春节期间，Nginx 官方发布了最新版本 Nginx-1.9.11，也增加了该功能。&lt;/p&gt;

&lt;p&gt;Nginx-1.9.11 的Changelog 如下:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Changes with nginx 1.9.11                                        09 Feb 2016&lt;/p&gt;

&lt;p&gt;*) Feature: TCP support in resolver.&lt;/p&gt;

&lt;p&gt;*) Feature: dynamic modules.&lt;/p&gt;

&lt;p&gt;*) Bugfix: the $request_length variable did not include size of request&lt;br /&gt;
      headers when using HTTP/2.&lt;/p&gt;

&lt;p&gt;*) Bugfix: in the ngx_http_v2_module.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从使用的角度上来说，是增加了一个指令 &lt;a href=&#34;http://nginx.org/en/docs/ngx_core_module.html#load_module&#34;&gt;load_modules&lt;/a&gt; 指令，来加载编译为 so 形式的动态模块。&lt;/p&gt;

&lt;p&gt;该功能的实现还是挺简单的，主要包括如下几个方面:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;将模块相关的类型定义和操作方法调整到新的文件 ngx_module.h 和 ngx_module.c 中&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;添加 dlopen 的封装&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;调整编译脚本&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;少量 Nginx 核心代码的调整。主要是为 cycle 新增了一个成员modules, 用来取代之前的全局变量 ngx_modules, 并将之前初始化时对于 ngx_modules 的操作封装成几个函数，放在 init_cycle 里调用。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我认为我们需要重点关注的是如下几个:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;编译脚本有了较大的变化，在以后的模块编程中，尽量要让自己的模块能够静态链接和动态链接。这就需要适应一下新的编译框架。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不光旧的模块需要考虑兼容性，新的模块也要考虑对于旧的 Nginx 版本的兼容性。这包括两个方面，一个是 c 语言层面，要关注动态模块对于 Nginx 框架的调整，例如之前凡是用到全局变量 ngx_modules 的地方，要修改为 cycle-&amp;gt;modules，当然正确的做法应该是用宏开关来判断当前 Nginx 版本是否大于 1.9.11 来决定是否调整；另一个是编译脚本，也需要判断版本，从而做出一些开关的选择，重点是对 ngx_module_link 变量的判断。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举个例子，对于 nginx-rtmp 模块，我们要将其修改为既能在 Nginx-1.9.11 及其以后的版本中，同时支持静态链接(&amp;ndash;add-module)和动态链接(&amp;ndash;add-dynamic-module)，又要让其在老的版本中依然能支持旧的编译框架下的静态链接(&amp;ndash;add-module)。&lt;/p&gt;

&lt;p&gt;为了达到这个目的，我做了如下测试，首先将 nginx-rtmp 的 congfig 文件修改为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngx_addon_name=&amp;quot;ngx_rtmp_module&amp;quot;  
RTMP_CORE_MODULES=&amp;quot;ngx_rtmp_module                             \  
                   ngx_rtmp_core_module                        \  
                   ngx_rtmp_cmd_module                         \  
                   ngx_rtmp_codec_module                       \  
                   ngx_rtmp_access_module                      \  
                   ngx_rtmp_record_module                      \  
                   ngx_rtmp_live_module                        \  
                   ngx_rtmp_play_module                        \  
                   ngx_rtmp_flv_module                         \  
                   ngx_rtmp_mp4_module                         \  
                   ngx_rtmp_netcall_module                     \  
                   ngx_rtmp_relay_module                       \  
                   ngx_rtmp_exec_module                        \  
                   ngx_rtmp_auto_push_module                   \  
                   ngx_rtmp_notify_module                      \  
                   ngx_rtmp_log_module                         \  
                   ngx_rtmp_limit_module                       \  
                   ngx_rtmp_hls_module                         \  
                   ngx_rtmp_dash_module                        \  
                   &amp;quot;  
RTMP_HTTP_MODULES=&amp;quot;ngx_rtmp_stat_module                        \  
                   ngx_rtmp_control_module                        \  
                  &amp;quot;  
RTMP_DEPS=&amp;quot;$ngx_addon_dir/ngx_rtmp_amf.h               \  
           $ngx_addon_dir/ngx_rtmp_bandwidth.h         \  
           $ngx_addon_dir/ngx_rtmp_cmd_module.h        \  
           $ngx_addon_dir/ngx_rtmp_codec_module.h      \  
           $ngx_addon_dir/ngx_rtmp_eval.h              \  
           $ngx_addon_dir/ngx_rtmp.h                   \  
           $ngx_addon_dir/ngx_rtmp_version.h           \  
           $ngx_addon_dir/ngx_rtmp_live_module.h       \  
           $ngx_addon_dir/ngx_rtmp_netcall_module.h    \  
           $ngx_addon_dir/ngx_rtmp_play_module.h       \  
           $ngx_addon_dir/ngx_rtmp_record_module.h     \  
           $ngx_addon_dir/ngx_rtmp_relay_module.h      \  
           $ngx_addon_dir/ngx_rtmp_streams.h           \  
           $ngx_addon_dir/ngx_rtmp_bitop.h             \  
           $ngx_addon_dir/ngx_rtmp_proxy_protocol.h    \  
           $ngx_addon_dir/hls/ngx_rtmp_mpegts.h        \  
           $ngx_addon_dir/dash/ngx_rtmp_mp4.h          \  
           &amp;quot;  
RTMP_CORE_SRCS=&amp;quot;$ngx_addon_dir/ngx_rtmp.c                   \  
                $ngx_addon_dir/ngx_rtmp_init.c              \  
                $ngx_addon_dir/ngx_rtmp_handshake.c         \  
                $ngx_addon_dir/ngx_rtmp_handler.c           \  
                $ngx_addon_dir/ngx_rtmp_amf.c               \  
                $ngx_addon_dir/ngx_rtmp_send.c              \  
                $ngx_addon_dir/ngx_rtmp_shared.c            \  
                $ngx_addon_dir/ngx_rtmp_eval.c              \  
                $ngx_addon_dir/ngx_rtmp_receive.c           \  
                $ngx_addon_dir/ngx_rtmp_core_module.c       \  
                $ngx_addon_dir/ngx_rtmp_cmd_module.c        \  
                $ngx_addon_dir/ngx_rtmp_codec_module.c      \  
                $ngx_addon_dir/ngx_rtmp_access_module.c     \  
                $ngx_addon_dir/ngx_rtmp_record_module.c     \  
                $ngx_addon_dir/ngx_rtmp_live_module.c       \  
                $ngx_addon_dir/ngx_rtmp_play_module.c       \  
                $ngx_addon_dir/ngx_rtmp_flv_module.c        \  
                $ngx_addon_dir/ngx_rtmp_mp4_module.c        \  
                $ngx_addon_dir/ngx_rtmp_netcall_module.c    \  
                $ngx_addon_dir/ngx_rtmp_relay_module.c      \  
                $ngx_addon_dir/ngx_rtmp_bandwidth.c         \  
                $ngx_addon_dir/ngx_rtmp_exec_module.c       \  
                $ngx_addon_dir/ngx_rtmp_auto_push_module.c  \  
                $ngx_addon_dir/ngx_rtmp_notify_module.c     \  
                $ngx_addon_dir/ngx_rtmp_log_module.c        \  
                $ngx_addon_dir/ngx_rtmp_limit_module.c      \  
                $ngx_addon_dir/ngx_rtmp_bitop.c             \  
                $ngx_addon_dir/ngx_rtmp_proxy_protocol.c    \  
                $ngx_addon_dir/hls/ngx_rtmp_hls_module.c    \  
                $ngx_addon_dir/dash/ngx_rtmp_dash_module.c  \  
                $ngx_addon_dir/hls/ngx_rtmp_mpegts.c        \  
                $ngx_addon_dir/dash/ngx_rtmp_mp4.c          \  
                &amp;quot;  
RTMP_HTTP_SRCS=&amp;quot;$ngx_addon_dir/ngx_rtmp_stat_module.c       \  
                $ngx_addon_dir/ngx_rtmp_control_module.c    \  
                &amp;quot;  
  
#nginx version &amp;gt;= 1.9.11  
if test -n &amp;quot;$ngx_module_link&amp;quot;; then  
    ngx_module_incs=$ngx_addon_dir  
    ngx_module_deps=$RTMP_DEPS  
    if [ $ngx_module_link = DYNAMIC ] ; then  
        ngx_module_name=&amp;quot;$RTMP_CORE_MODULES $RTMP_HTTP_MODULES&amp;quot;  
        ngx_module_srcs=&amp;quot;$RTMP_CORE_SRCS $RTMP_HTTP_SRCS&amp;quot;  
        . auto/module  
    elif [ $ngx_module_link = ADDON ] ; then  
        ngx_module_type=CORE  
        ngx_module_name=$RTMP_CORE_MODULES  
        ngx_module_srcs=$RTMP_CORE_SRCS  
        . auto/module  
        ngx_module_type=HTTP  
        ngx_module_name=$RTMP_HTTP_MODULES  
        ngx_module_srcs=$RTMP_HTTP_SRCS  
        . auto/module  
    fi  
  
#nginx version &amp;lt; 1.9.11  
else  
    CORE_MODULES=&amp;quot;$CORE_MODULES  
                  $RTMP_CORE_MODULES&amp;quot;  
    HTTP_MODULES=&amp;quot;$HTTP_MODULES  
                  $RTMP_HTTP_MODULES&amp;quot;  
    NGX_ADDON_DEPS=&amp;quot;$NGX_ADDON_DEPS \  
                    $RTMP_DEPS&amp;quot;  
    NGX_ADDON_SRCS=&amp;quot;$NGX_ADDON_SRCS  
                    $RTMP_CORE_SRCS  
                    $RTMP_HTTP_SRCS&amp;quot;  
    CFLAGS=&amp;quot;$CFLAGS -I$ngx_addon_dir&amp;quot;  
fi  
  
USE_OPENSSL=YES  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后调整所有 c 源文件里使用 ngx_modules 的地方，可以添加类似如下的代码片段:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#if defined(nginx_version) &amp;amp;&amp;amp; nginx_version &amp;gt;= 1009011  
    modules = cf-&amp;gt;cycle-&amp;gt;modules;  
#else  
    modules = ngx_modules;  
#endif  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以达到我们的目的了。&lt;/p&gt;

&lt;p&gt;具体关于编译脚本的调整，我们参考一下官方的几个文档即可：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/resources/wiki/extending/converting/&#34;&gt;Converting Static Modules to Dynamic Modules&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/resources/wiki/extending/new_config/&#34;&gt;New Config Shell File&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/resources/wiki/extending/old_config/&#34;&gt;Old Config Shell File&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意，上面的文档中，关于 rtmp 模块的调整，是有问题的，一方面如果那些使用了 ngx_modules 全局变量的 c 文件不相应修改的话，运行时会有段错误；另一方面，示例里对 config 文件的调整，只能保证对于 Nginx-1.9.11 及其以后的版本能同时支持编译为动态模块和静态模块，却对 Nginx-1.9.11 之前的版本的支持有问题。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>移魂都市</title>
      <link>https://pureage.info/2016/01/24/dark-city.html</link>
      <pubDate>Sun, 24 Jan 2016 14:43:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/01/24/dark-city.html</guid>
      
        <description>&lt;p&gt;《移魂都市》是一部非常好看的电影，会引发一些思考。同时我也非常喜欢詹妮弗·康纳利的表演。也许是因为她在《美国往事》里的处女秀太过惊艳，很多人认为詹妮弗·康纳利是可以归类到“长残”的童星中去。我不这么认为，尤其是那双眼睛，依稀还是当年的样子。&lt;/p&gt;

&lt;p&gt;整个《移魂都市》观影体验非常好，一气呵成，畅快淋漓。值得一提的是，片尾一个海边的镜头让我马上想起了另一部电影《梦之安魂曲》，同一个演员，同一个场景。一查，发现原来《梦之安魂曲》里的这个镜头就是在向《移魂都市》致敬的，见&lt;a href=&#34;http://www.imdb.com/title/tt0180093/movieconnections&#34;&gt;http://www.imdb.com/title/tt0180093/movieconnections&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jennifer Connelly&amp;rsquo;s shot at the beach is an homage to the same shot with her in &amp;ldquo;Dark City&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;能在这个镜头一出现，就联想到《梦之安魂曲》，这种感觉我挺喜欢。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>离开益动，入驻悦跑圈</title>
      <link>https://pureage.info/2016/01/22/leaving-edooon.html</link>
      <pubDate>Fri, 22 Jan 2016 13:58:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/01/22/leaving-edooon.html</guid>
      
        <description>&lt;p&gt;从2014年开始跑步起，我一直使用的 APP 是益动，最近换到悦跑圈了。&lt;/p&gt;

&lt;p&gt;一个跑步相关的 APP，无外乎两个基本功能：数据记录、分析和社交。&lt;/p&gt;

&lt;p&gt;先说社交。刚开始跑的时候，喜欢将跑步的记录分享到朋友圈、微博中，后来跑成习惯了之后就基本不去分享了，因为朋友圈里的人都知道我经常在跑步，我也没必要再去浪费这点带宽和存储资源。所以社交方面的功能并不是我选择一个 APP 的原因。&lt;/p&gt;

&lt;p&gt;主要原因还是最基本的功能：数据记录、统计和分析。不管哪一款 APP，都不可能一次性就将这些功能做好做全，肯定是需要不断挖掘和完善。而这方面，益动的表现根本不像是一款互联网产品。&lt;/p&gt;

&lt;p&gt;举个例子，益动本身并不是一款纯粹的跑步 APP，它还支持滑雪、轮滑、走路等很多运动类型。在开始记录之前，需要先选择好本次运动的运动类型，否则它默认是上一次的运动类型。这样就会导致一个问题，如果昨天我刚好是骑行，今天跑步前却忘了将运动类型改回为跑步的话，今天的记录就还是骑行了。这是一个如此常见的场景，在益动这里却成了一个大问题，因为它不支持事后修改指定记录的运动类型。&lt;/p&gt;

&lt;p&gt;遇到这种麻烦的肯定不知我一个。我们随便用“益动+修改运动类型”在 google 里搜索一下，就会发现不少人也有这种问题，随便挑两个：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://edooon.com/bbs/25743&#34;&gt;问题：跑步的时候不小心把运动类型设定成步行了怎么改？&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://edooon.com/bbs/109401&#34;&gt;运动类型修改&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从这些帖子里可以知道，益动不是不能修改某条记录的运动类型，需要修改的话联系管理员在后台修改即可，管理员可真够清闲啊。另外，益动也在帖子里承诺后续版本会支持在 APP 端自行修改，可这么个简单的功能，居然从 2014 年一直拖到 2016 年都没加上。正像我上面说的，这还是一个互联网产品吗？&lt;/p&gt;

&lt;p&gt;当然，益动并不是一无是处，当时看中它的优点就是简洁，只是现在我有点受不了它过于缓慢的更新速度了。我在乎的是记录，如果一条记录都是错的，留在上面还有什么意义呢。&lt;/p&gt;

&lt;p&gt;总之，还是希望益动越来越好，在未来的跑步 APP 大战中，应该还是会有它的一席之地。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>使用ngx.header修改Accept-Ranges的问题</title>
      <link>https://pureage.info/2016/01/17/modify-accept-ranges-header.html</link>
      <pubDate>Sun, 17 Jan 2016 14:09:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/01/17/modify-accept-ranges-header.html</guid>
      
        <description>&lt;p&gt;今天有位朋友在使用 OpenResty 时发现一个奇怪的事情。&lt;/p&gt;

&lt;p&gt;他打算用 ngx.header 来修改响应的 Accept-Ranges 头，于是按照惯例做法，在 *_by_lua 脚本中写入ngx.header[&amp;ldquo;Accept-Ranges&amp;rdquo;] = &amp;ldquo;xxx&amp;rdquo;。在 OpenResty 中，这是一种经常被使用到的方法。&lt;/p&gt;

&lt;p&gt;他发现的问题是，当他这么修改后，真实响应的 Accept-Ranges 头不是被改写了，而是出现了两个并列的 Accept-Ranges 头，其中第一个的值是他打算修改的值，而第二个 Accept-Ranges 头的值却是原始的值，即 &amp;ldquo;bytes&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;开源软件的好处就是，所谓“奇怪”的事情只要愿意探究，都能找到答案。下面就简单的解释一下为什么使用 ngx.header 修改 Accept-Ranges 响应头的时候，会导致两个并列的 Accept-Ranges 头。&lt;/p&gt;

&lt;p&gt;首先，Nginx 在内部是通过一个单链表来管理一个请求的响应头。&lt;/p&gt;

&lt;p&gt;其次，Nginx 自身的 Accept-Ranges 响应头的设置是由 ngx_http_range_header_filter_module 模块来完成的。我们知道，Nginx 对于 HTTP 请求的处理是分阶段的，header_filter 和 body_filter 的位置在处理链的位置中很靠后。&lt;/p&gt;

&lt;p&gt;明确上面这两点之后，再通过阅读一下 nginx-lua 的相关代码，就可以解释这个问题了:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ngx.header 的处理方式是，在添加响应头之前，会查找响应头的链表中是否已经有了该响应，如果没有，则添加，如果有，则覆盖。这种行为正是我们已知的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;由于 ngx_http_range_header_filter_module 的位置在 nginx-lua 之后，所以在我们使用 ngx.header 添加/修改了 Accept-Ranges 头部之后，ngx_http_range_header_filter_module 依然要添加 Accept-Ranges 头。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ngx_http_range_header_filter_module 在添加 Accept-Ranges 头时的行为是不检查当前响应头链表里是否已经有了 Accept-Ranges 头部，不管三七二十一，直接在响应头的链表里添加一个 Accept-Ranges 响应头。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，ngx.header 和 ngx_http_range_header_filter_module 各自往响应头里添加了一个 Accept-Ranges 头，导致响应头中出现了两个并列的 Accept-Ranges。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>如何绘制流程图和结构图</title>
      <link>https://pureage.info/2016/01/12/flow-chart.html</link>
      <pubDate>Tue, 12 Jan 2016 14:38:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/01/12/flow-chart.html</guid>
      
        <description>&lt;p&gt;经常会看到一些技术博客在讲解代码的时候，能配上一幅幅精美的程序流程图、结构图，一直都很佩服这样的作者。其实他们大多数也并没有使用什么特别的工具，基本上可以分为如下几类:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft Viso, Word, PPT, Windows 自带的画图板等常用办公软件&lt;/li&gt;
&lt;li&gt;一些其他相对较小众的绘图软件，例如 Pencil&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;脑图工具，例如 Xmind&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Graphviz, 使用一种叫 dot 的语言来描述结构并生成图片&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;利用最基本的字符(连字符，箭头等)来绘制，这种做法第一眼就会给人一种返璞归真的感觉，但实际上我个人并不习惯&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面这几类绘制结构图、流程图的方法或工具，我基本上都使用过，但绘图水平实在太差，效率也很低。在读代码的时候，大部分是靠笔、纸这种最原始的工具来完成分析，甚至还专门买了一个白板放在家里。这样往往几幅图画下来后，自己是弄得很明白了，却没法分享到文章里去。&lt;/p&gt;

&lt;p&gt;今天试用了一下一个叫做&amp;rdquo;扫描全能王&amp;rdquo;的手机端 APP, 感觉还不错，本质上是就是用手机给你绘制在纸上的图片拍一张照片，但它会做一些图像增强方面的处理。&lt;/p&gt;

&lt;p&gt;例如，我想表示 Nginx 是如何使用 ngx_array_t, ngx_buf_t, ngx_chain_t 等基础数据结构来描述 MP4 这种复杂的文件结构时，画了下面一张图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/nginx-mp4.jpg&#34; alt=&#34;nginx-mp4.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;用手绘的好处是，画图过程中的效率真的很高，画图的过程也能增强自己的理解，打开思路。看看以后能不能用这种方式来处理文章中的流程图、结构图。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>一场噩梦</title>
      <link>https://pureage.info/2016/01/04/nightmare.html</link>
      <pubDate>Mon, 04 Jan 2016 15:04:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/01/04/nightmare.html</guid>
      
        <description>&lt;p&gt;昨晚上做了一个噩梦，现在想想还不寒而栗。&lt;/p&gt;

&lt;p&gt;这个梦有很长的情节，醒来后还回忆了一下，觉得大概可以写成一部小说了。但是现在却只记得一个片段。&lt;/p&gt;

&lt;p&gt;忘了因为什么原因，在一番恶斗后，我被一个恶人制服了，一双铁钳般的手扼住了我的脖子。在拼命的反抗中，我的一只手抓住了他的一只胳膊，像抓到了救命稻草一样，我奋力用手指、指甲去拧、去挠，但并没有挣脱出来。忽然我意识到，用指甲去挠他的胳膊时，我的另一只手臂却感受到了同步的疼痛，这个念头让我在梦里手脚冰凉。为了确认，我反复的掐、挠，果然我的意识是对的。无论我怎么将力量作用在他的那只胳膊上，这些力量其实都施加在我自己的另一只胳膊上。&lt;/p&gt;

&lt;p&gt;想到这里，我大脑一片空白。不行，我挣扎着强迫自己打了一个机灵，努力清醒过来，尝试去思考。我终于明白，我是精神分裂了，那个敌人其实就是我自己臆想出来的一个人，在旁观者看来，此刻我正自己掐着自己的脖子。&lt;/p&gt;

&lt;p&gt;然后我就知道自己正在做噩梦，一般这种梦到这里就找到出路了。我不再试图从那双大手中挣扎出来，而是用尽全力让自己醒来。最后当然醒了，从这噩梦中解脱出来。&lt;/p&gt;

&lt;p&gt;几年没看《搏击俱乐部》、《致命 ID》这类讲精神分裂的电影了，这噩梦做的真够蹊跷。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>口琴与蛋炒饭</title>
      <link>https://pureage.info/2016/01/03/keep-learning.html</link>
      <pubDate>Sun, 03 Jan 2016 13:55:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/01/03/keep-learning.html</guid>
      
        <description>&lt;p&gt;在&lt;a href=&#34;http://pureage.info/2016/01/01/first-day-of-2016.html&#34;&gt;2016第一天&lt;/a&gt;这篇日志里，我为自己的2016定下的关键词之一是&lt;strong&gt;学习&lt;/strong&gt;。学习这两个字内涵非常深，希望自己无论是在工作上，还是其他方面，都能保持学习心态。这句话似乎我们在读书时每年都会说，说了近二十年。现在再说出这句话来，却是发自内心的体会，人是确实需要持续学习，终身学习的。想到如果三年、五年、甚至十年，自己仍然跟今天一样，就会觉得害怕。我希望自己每一年回过头来，总能看到自己的变化。这也是为什么我作为一个程序员，在写技术文章之外，还要写那么多看起来无病呻吟的其他类文章的原因，希望这一篇篇文章，是我人生旅途的一个个刻度。&lt;/p&gt;

&lt;p&gt;终身学习、活到老学到老等等俗语、谚语，看起来、说出来都是那么天经地义、理所当然。可现实是很多人一毕业就忘了怎么学习了。所以，李笑来提出来一个概念，叫“&lt;strong&gt;学习学习再学习&lt;/strong&gt;”，这三个学习不是简单的重复、递进关系，第一个学习是动词，第二个是名词，第三个是动词，简言之，就是学习如何学习这件事，再去保持持续的学习这个过程。&lt;/p&gt;

&lt;p&gt;为什么我们时常会放弃主动持续学习呢？我想是学习本身也是有成本的吧，举个例子，在程序员的圈子里，最常见到的问题是“我应该选择什么语言？”，“vim 和 emacs 哪个更强?”等等。就连程序员这个从业者已经默认要学习很多新东西的工种，都会出现这么多关于学习这个词本身的问题，其他行业应该也是如此了。&lt;/p&gt;

&lt;p&gt;换做一个更通用的说法，就是“我学了这个东西有啥用？”&lt;/p&gt;

&lt;p&gt;下面我从自己的两个技能来说说这个问题。&lt;/p&gt;

&lt;p&gt;我会吹口琴。由于中国人口众多这个原因，无论任何技能，你都能迅速在网上找到众多的伙伴，但现实生活中，绝大多数情况是当身边的人知道你会一门乐器时，都会哇一声。在他们看来，学习乐器是一件很难的事情。&lt;/p&gt;

&lt;p&gt;那么学习乐器真的很难吗？如果是想成为一个音乐家或专业的乐手，那无疑确实是很难的，看看电影《&lt;a href=&#34;http://movie.douban.com/subject/25773932/&#34;&gt;爆裂鼓手&lt;/a&gt;》就知道了。&lt;/p&gt;

&lt;p&gt;这也是很多人一想到学习乐器就要放弃的原因，“既然我怎么学习都不可能有多大成就，为什么要学习这个呢，把时间放在其他对自己更有价值的地方不更好吗”。曾经我也经常有类似这样的想法，例如“我作为一个系统研发工程师，去花时间学习 Ruby on Rails 有意义吗”。现在我已经不这样想了。因为我会口琴以及其他类似的事情告诉我，学习是有好处的，哪怕你成不了顶尖人员。&lt;/p&gt;

&lt;p&gt;回到口琴这件事情上，从学习吹口琴的到现在的这几年里，这个大概十公分的小乐器给了我很多东西。由于它小巧，可以随时揣在口袋里，带上飞机火车，所以无论你是高兴，还是难过，兴奋，还是孤独，你都可以随时随地把它拿出来吹奏两曲。至于说我能否成为 &lt;a href=&#34;https://en.wikipedia.org/wiki/Little_Walter&#34;&gt;Little Walter&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Jean-Jacques_Milteau&#34;&gt;J.J.Milteau&lt;/a&gt;,这一点都不重要。&lt;/p&gt;

&lt;p&gt;说完了口琴，再说下一个，我在2015年学会了做蛋炒饭。&lt;/p&gt;

&lt;p&gt;蛋炒饭在中国流传很广，几乎家家户户都会做，所以当我说我会做蛋炒饭时，身边的朋友们一般是感觉很好笑的。那么我做的蛋炒饭有什么特点呢？那就是给我一个鸡蛋和一碗饭，我就能非常快速、稳定的输出一碗香喷喷的蛋炒饭，色香味俱全，除了油盐外不用任何调料，身边很多做了几十年饭的长辈，都做不到。&lt;/p&gt;

&lt;p&gt;有秘诀吗？当然没有什么独家秘诀，正是因为自己不会做饭，所以才到网上去找各种食谱，自然跟学习其他东西一样，光蛋炒饭也有很多种做法，那怎么办呢？很简单，大不了把几种主流的做法都尝试一下，总能找到一个自己喜欢的。然后就是不断的重复，一旦找到了感觉，你就学会了。一旦会了，就是多掌握了一项技能，而这种小小的技能往往能极大的提升自己的生活质量。&lt;/p&gt;

&lt;p&gt;最最最重要的，是要开始学习。一旦有了对某个领域感兴趣的念头，不要反复说服自己学了这个东西有没有用，自己能否学得会，而是直接开始学。毕竟当下这个时代，知识的获取比以前容易太多了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>一悲一喜</title>
      <link>https://pureage.info/2016/01/02/ianmurdock-and-agentzh.html</link>
      <pubDate>Sat, 02 Jan 2016 14:02:40 +0000</pubDate>
      
      <guid>https://pureage.info/2016/01/02/ianmurdock-and-agentzh.html</guid>
      
        <description>&lt;p&gt;这几天，开源软件界有两件大事，一件是 Debian 创始人 Ian Murdock 自杀身亡，另一件是在锤子手机 T2 的发布会上，罗永浩宣布将门票收入捐给 OpenResty，可以说是一悲一喜。&lt;/p&gt;

&lt;p&gt;2013年，Markdown 标记语言的设计者之一 Aaron Swartz 自杀，我以及无数的程序员们的博客书写时用的就是 Markdown; Debian 以及 Debian 的变种 Ubuntu，也是很多人使用过或正在使用的 Linux 发行版。他们的自杀前后的心理状态，我们肯定不可能去感同身受，我们可能会感叹一句，原来在黑客氛围浓厚的美国，这些著名的黑客在现实中却也遭遇着能敢于去自杀的痛苦。不管怎么样，他们在这个世界上留下了他们的足迹供后人怀念。祝 Ian Murdock 走好。&lt;/p&gt;

&lt;p&gt;另一件事情却是一件喜事。OpenResty 社区从来没有如此这样走进公众视线，一是因为项目发起人、负责人章亦春(agentzh)的一贯低调，直接影响了整个社区的气质，另一个是因为 OpenResty 的技术确实太靠后端，在开源社区中不像前端技术那样引人关注。&lt;/p&gt;

&lt;p&gt;我个人是从2013年开始使用 OpenResty, 并在一段时间以后，以此为切入点，开始学习 Nginx 本身。很多程序员在读书时可能都有几个技术大牛作为心中的偶像，我也不例外，读书时的偶像是 ID Software 的约翰卡马克,以及中国的&lt;a href=&#34;http://codingnow.com/&#34;&gt;云风&lt;/a&gt;。但在学习和使用 OpenResty 的过程中，偶像渐渐换成了章亦春。&lt;/p&gt;

&lt;p&gt;如今的技术圈是个很奇怪的圈子，很多技术大拿往往技术确实很强的同事，也有着锋芒毕露的性格，但章亦春真是个例外。深入接触过 OpenResty 的人自然会知道他的强大，但在没有深入接触过的人眼里，OpenResty 只不过是一个集成了很多库的 Nginx 包。所以，在2013年开始学习 OpenResty 的时候，我时常会觉得孤独，觉得这个东西太冷门了。&lt;/p&gt;

&lt;p&gt;由于章亦春本人的低调，很多程序员都不知道他技术到底有多强。我曾经写了一篇文章，叫“&lt;a href=&#34;http://pureage.info/2014/04/12/agentzh.html&#34;&gt;程序员中的标杆人物-章亦春&lt;/a&gt;”，这几天这篇文章一直是访问量最多的；我也曾经在知乎里提了一个问题，叫“&lt;a href=&#34;https://www.zhihu.com/question/28951394&#34;&gt;章亦春是个什么样的人&lt;/a&gt;”，现在 google 里搜索章亦春，也能在很靠前位置找到这两个链接，在之前几乎是无人问津，最近却因为锤子的宣传让很多人关注。可见，他是低调到了什么程度。&lt;/p&gt;

&lt;p&gt;酒香也怕巷子深，我曾经担心过 OpenResty 的发展，但2015年年末 OpenResty 社区发生的两件事让我的疑虑一扫而光。一个是 OpenResty 在北京举办了第一届大会，让分布在各地的使用者知道自己并不孤独，另一个就是这次锤子的捐献。相信会有越来越多的人去了解 OpenResty。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>2016第一天</title>
      <link>https://pureage.info/2016/01/01/first-day-of-2016.html</link>
      <pubDate>Fri, 01 Jan 2016 14:25:00 +0000</pubDate>
      
      <guid>https://pureage.info/2016/01/01/first-day-of-2016.html</guid>
      
        <description>&lt;p&gt;以前从来没有把元旦当作新一年的开始，因为觉得这是农历春节的作用。如今这个观念要做出改变了。一年的时间实在过得太快，如果把春节作为新一年的开始，发现没过多久一年又过去一半。所以，今天就应该回顾一下过去的一年，展望下新的一年了。&lt;/p&gt;

&lt;p&gt;过去的一年里，生活上最大的变化就是结婚了。结婚本身真是一件非常简单事，简单到之前漫长的等待、纠结都好似不曾存在一样。实际上婚姻相关的主题，占据了这一年大部分的时间，说在今天回顾一下过去的一年的得失，我竟只能想到结婚这两个字。回想一下，让人更觉得在那些没有意义的事情上的纠结，实在是浪费生命。与婚姻相关的痛苦和纠结，很多经历过的人都懂，就不在博客里细说了。反而，婚后的生活，异常的平静，一切更井井有条。&lt;/p&gt;

&lt;p&gt;那么，新的一年有什么希望呢？&lt;/p&gt;

&lt;p&gt;如果用几个关键词来描述一下，我想是这几个：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;理性&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;学习&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;惜时&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我希望未来，我会学习怎么让自己更加的理性，认识自己，了解自己，从身体上到心里上。珍惜时间，不断的学习，让自己持续进步。&lt;/p&gt;

&lt;p&gt;希望自己的亲人和朋友们，有困境的都能走出困境，有追求的都能达成心愿，有梦想的都能快乐前行。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>人有自知之明，挺难的</title>
      <link>https://pureage.info/2015/12/29/236.html</link>
      <pubDate>Mon, 28 Dec 2015 17:04:05 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/29/236.html</guid>
      
        <description>&lt;p&gt;这两天，金线冯唐火了，因为他的译本《飞鸟集》。&lt;/p&gt;

&lt;p&gt;但我对这事没什么感受，因为不关心。但是却对他事后的一条反应比较感兴趣。当有读者批评他英文不过关，曲解原文意思的时候，他在微博上晒出了自己的托福成绩，说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;此事如此简单，我们比比英文和中文，如果你胜，我洗耳恭听。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;顿时觉得，人贵有自知之明这句话，说的真好。为什么贵，因为难啊，有自知之明，也有逻辑，就更是难上加难了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>雾霾感怀</title>
      <link>https://pureage.info/2015/12/26/the-stars.html</link>
      <pubDate>Sat, 26 Dec 2015 11:34:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/26/the-stars.html</guid>
      
        <description>&lt;p&gt;过去的一周里，全国多个城市都遭受了雾霾的侵袭，北京不用说，就连远在南方的广州，都不例外。在高楼林立的广州东站旁边的某栋写字楼里，居然看不清对面的房子。&lt;/p&gt;

&lt;p&gt;记得在小学时，跟着一位表姐，看了几本琼瑶的书。剧情到现在都已经记不清楚了，但有本书的名字却始终不曾忘记，那本书叫《烟锁重楼》。&lt;/p&gt;

&lt;p&gt;此时此刻，用“烟锁重楼”四个字描述眼前的景观，真是别有一番滋味。&lt;/p&gt;

&lt;p&gt;在现代城市的高楼间行走，很久都没有去怀念什么了。但是今天却想起了很多事情。&lt;/p&gt;

&lt;h2 id=&#34;繁星&#34;&gt;繁星&lt;/h2&gt;

&lt;p&gt;小时候，最令人欢欣鼓舞的时候，当然是暑假了。漫长的两个月里，陪伴我们的不仅有《西游记》、《新白娘子传奇》，还有家里的水牛，和满天的繁星。&lt;/p&gt;

&lt;p&gt;湖北的夏天是非常热的，所以我们晚上经常会到阳台、楼顶睡觉，或是一张木板床，或是干脆打地铺，低头吃着西瓜，抬眼就是满天的繁星。那是一种什么景象，我有限的词汇量已经无法表达。那时候眼睛也没有近视，就盯着月亮看，盯着银河看，能看一整晚，然后在微风中睡去，在露水气中醒来。&lt;/p&gt;

&lt;p&gt;那时候有篇课文讲的是张衡数星星的故事，我也会试着数一数，后来干脆放弃，因为那密度实在太大，根本不可能去数。&lt;/p&gt;

&lt;p&gt;到中学的时候，经常在书店看到冰心的《繁星》一书，却从来没有去翻看，直到现在都没有读过这本书，因为记忆里繁星的样子太过深刻，虽然这看上去这并没有什么逻辑关系。&lt;/p&gt;

&lt;p&gt;自从来到城市后，十多年就再也没见过这繁星，环境每况日下，让年轻的我不禁发愁，以后该怎么给小孩解释银河、北斗、牛郎织女。&lt;/p&gt;

&lt;h2 id=&#34;观月&#34;&gt;观月&lt;/h2&gt;

&lt;p&gt;小学时有门课叫《自然》，我们当时的自然课老师是一位老头，姓邹，在村里很有名气，因为当时班里几乎所有同学的父母也都是他的学生，以严厉著称。在开学前，我父亲还特意很严肃的告诉我，邹老师的课要认真对待，不然少不了挨揍。&lt;/p&gt;

&lt;p&gt;不知道是不是邹老师年纪大了，脾气变温和的缘故，真上课时我并没有感受到他的严厉。直到有一次，他给我们布置了一个作业。&lt;/p&gt;

&lt;p&gt;当时的课讲到了日食、月食等自然现象。这个作业就是，连续两个月每天都将当天的月亮画下来。小伙伴们都觉得这个任务很艰巨，而且谁也不敢作弊。&lt;/p&gt;

&lt;p&gt;于是那两个月每天上早课（相当于初中的早自习）的时候，天还没完全亮，我们就走在了上学的路上。在路上，就着月色，将月亮的形状、位置和当时的时间记录下来。大家虽然不敢作弊，但背地里不乏骂骂咧咧。&lt;/p&gt;

&lt;p&gt;有几天刚好赶上了狮子座流星雨，走在路上的时候，看着一颗一颗的流星从天边滑落，幼小的呆若木鸡,莫名的感动。&lt;/p&gt;

&lt;p&gt;许多年以后，小学里很多老师都淡忘了，但这位邹老师和他的这次作业却始终记得。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>accept与epoll惊群</title>
      <link>https://pureage.info/2015/12/22/thundering-herd.html</link>
      <pubDate>Tue, 22 Dec 2015 07:01:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/22/thundering-herd.html</guid>
      
        <description>&lt;p&gt;今天打开 OneNote,发现里面躺着一篇很久以前写的笔记，现在将它贴出来。&lt;/p&gt;

&lt;h2 id=&#34;1-什么叫惊群现象&#34;&gt;1. 什么叫惊群现象&lt;/h2&gt;

&lt;p&gt;首先，我们看看&lt;a href=&#34;http://en.wikipedia.org/wiki/Thundering_herd_problem&#34;&gt;维基百科对惊群的定义&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The thundering herd problem occurs when a large number of processes waiting for an event are awoken when that event occurs, but only one process is able to proceed at a time. After the processes wake up, they all demand the resource and a decision must be made as to which process can continue. After the decision is made, the remaining processes are put back to sleep, only to all wake up again to request access to the resource.&lt;/p&gt;

&lt;p&gt;This occurs repeatedly, until there are no more processes to be woken up. Because all the processes use system resources upon waking, it is more efficient if only one process was woken up at a time.&lt;/p&gt;

&lt;p&gt;This may render the computer unusable, but it can also be used as a technique if there is no other way to decide which process should continue (for example when programming with semaphores).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简而言之，惊群现象（thundering herd）就是当多个进程和线程在同时阻塞等待同一个事件时，如果这个事件发生，会唤醒所有的进程，但最终只可能有一个进程/线程对该事件进行处理，其他进程/线程会在失败后重新休眠，这种性能浪费就是惊群。&lt;/p&gt;

&lt;h2 id=&#34;2-accept-惊群&#34;&gt;2. accept 惊群&lt;/h2&gt;

&lt;p&gt;考虑如下场景：&lt;br /&gt;
主进程创建socket, bind, listen之后，fork出多个子进程，每个子进程都开始循环处理（accept)这个socket。每个进程都阻塞在accpet上，当一个新的连接到来时，所有的进程都会被唤醒，但其中只有一个进程会accept成功，其余皆失败，重新休眠。这就是accept惊群。&lt;/p&gt;

&lt;p&gt;那么这个问题真的存在吗？&lt;/p&gt;

&lt;p&gt;事实上，历史上，Linux 的 accpet 确实存在惊群问题，但现在的内核都解决该问题了。即，当多个进程/线程都阻塞在对同一个 socket 的 accept 调用上时，当有一个新的连接到来，内核只会唤醒一个进程，其他进程保持休眠，压根就不会被唤醒。&lt;/p&gt;

&lt;p&gt;测试代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;sys/types.h&amp;gt;  
#include &amp;lt;sys/socket.h&amp;gt;  
#include &amp;lt;netinet/in.h&amp;gt;  
#include &amp;lt;sys/wait.h&amp;gt;  
#include &amp;lt;stdio.h&amp;gt;  
#include &amp;lt;string.h&amp;gt;  
#define PROCESS_NUM 10  
int main()  
{  
    int fd = socket(PF_INET, SOCK_STREAM, 0);  
    int connfd;  
    int pid;  
    char sendbuff[1024];  
    struct sockaddr_in serveraddr;  
    serveraddr.sin_family = AF_INET;  
    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);  
    serveraddr.sin_port = htons(1234);  
    bind(fd, (struct sockaddr*)&amp;amp;serveraddr, sizeof(serveraddr));  
    listen(fd, 1024);  
    int i;  
    for(i = 0; i &amp;lt; PROCESS_NUM; i++)  
    {  
        int pid = fork();  
        if(pid == 0)  
        {  
            while(1)  
            {  
                connfd = accept(fd, (struct sockaddr*)NULL, NULL);  
                snprintf(sendbuff, sizeof(sendbuff), &amp;quot;accept PID is %d\n&amp;quot;, getpid());  
                
                send(connfd, sendbuff, strlen(sendbuff) + 1, 0);  
                printf(&amp;quot;process %d accept success!\n&amp;quot;, getpid());  
                close(connfd);  
            }  
        }  
    }  
    int status;  
    wait(&amp;amp;status);  
    return 0;  
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当我们对该服务器发起连接请求（用 telnet/curl 等模拟）时，会看到只有一个进程被唤醒。&lt;/p&gt;

&lt;p&gt;关于 accept 惊群的一些帖子或文章：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bbs.chinaunix.net/thread-946261-1-1.html&#34;&gt;惊群问题在 linux 上可能是莫须有的问题&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/2213779/does-the-thundering-herd-problem-exist-on-linux-anymore&#34;&gt;Does the Thundering Herd Problem exist on Linux anymore?&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.citi.umich.edu/projects/linux-scalability/reports/accept.html&#34;&gt;历史上解决 linux accept 惊群的补丁讨论&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-epoll惊群&#34;&gt;3. epoll惊群&lt;/h2&gt;

&lt;p&gt;如上所述，accept 已经不存在惊群问题，但 epoll 上还是存在惊群问题。即，如果多个进程/线程阻塞在监听同一个 listening socket fd 的 epoll_wait 上，当有一个新的连接到来时，所有的进程都会被唤醒。&lt;/p&gt;

&lt;p&gt;考虑如下场景：&lt;/p&gt;

&lt;p&gt;主进程创建 socket, bind， listen 后，将该 socket 加入到 epoll 中，然后 fork 出多个子进程，每个进程都阻塞在 epoll_wait 上，如果有事件到来，则判断该事件是否是该 socket 上的事件，如果是，说明有新的连接到来了，则进行 accept 操作。为了简化处理，忽略后续的读写以及对 accept 返回的新的套接字的处理，直接断开连接。&lt;/p&gt;

&lt;p&gt;那么，当新的连接到来时，是否每个阻塞在 epoll_wait 上的进程都会被唤醒呢？&lt;/p&gt;

&lt;p&gt;很多博客中提到，测试表明虽然 epoll_wait 不会像 accept 那样只唤醒一个进程/线程，但也不会把所有的进程/线程都唤醒。例如这篇文章：&lt;a href=&#34;http://blog.163.com/pandalove@126/blog/static/9800324520122633515612&#34;&gt;关于多进程 epoll 与 “惊群”问题&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;为了验证这个问题，我自己写了一个测试程序：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;sys/types.h&amp;gt;  
#include &amp;lt;sys/socket.h&amp;gt;  
#include &amp;lt;sys/epoll.h&amp;gt;  
#include &amp;lt;netdb.h&amp;gt;  
#include &amp;lt;string.h&amp;gt;  
#include &amp;lt;stdio.h&amp;gt;  
#include &amp;lt;unistd.h&amp;gt;  
#include &amp;lt;fcntl.h&amp;gt;  
#include &amp;lt;stdlib.h&amp;gt;  
#include &amp;lt;errno.h&amp;gt;  
#include &amp;lt;sys/wait.h&amp;gt;  
#define PROCESS_NUM 10  
static int  
create_and_bind (char *port)  
{  
    int fd = socket(PF_INET, SOCK_STREAM, 0);  
    struct sockaddr_in serveraddr;  
    serveraddr.sin_family = AF_INET;  
    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);  
    serveraddr.sin_port = htons(atoi(port));  
    bind(fd, (struct sockaddr*)&amp;amp;serveraddr, sizeof(serveraddr));  
    return fd;  
}  
	static int  
make_socket_non_blocking (int sfd)  
{  
    int flags, s;  
 
    flags = fcntl (sfd, F_GETFL, 0);  
    if (flags == -1)  
    {  
        perror (&amp;quot;fcntl&amp;quot;);  
        return -1;  
    }  
 
    flags |= O_NONBLOCK;  
    s = fcntl (sfd, F_SETFL, flags);  
    if (s == -1)  
    {  
        perror (&amp;quot;fcntl&amp;quot;);  
        return -1;  
    }  
 
    return 0;  
}  
  
#define MAXEVENTS 64  
 
int  
main (int argc, char *argv[])  
{  
    int sfd, s;  
    int efd;  
    struct epoll_event event;  
    struct epoll_event *events;  
 
    sfd = create_and_bind(&amp;quot;1234&amp;quot;);  
    if (sfd == -1)  
        abort ();  
 
    s = make_socket_non_blocking (sfd);  
    if (s == -1)  
        abort ();  
 
    s = listen(sfd, SOMAXCONN);  
    if (s == -1)  
    {  
        perror (&amp;quot;listen&amp;quot;);  
        abort ();  
    }  
 
    efd = epoll_create(MAXEVENTS);  
    if (efd == -1)  
    {  
        perror(&amp;quot;epoll_create&amp;quot;);  
        abort();  
    }  
 
    event.data.fd = sfd;  
    //event.events = EPOLLIN | EPOLLET;  
    event.events = EPOLLIN;  
    s = epoll_ctl(efd, EPOLL_CTL_ADD, sfd, &amp;amp;event);  
    if (s == -1)  
    {  
        perror(&amp;quot;epoll_ctl&amp;quot;);  
        abort();  
    }  
 
    /* Buffer where events are returned */  
    events = calloc(MAXEVENTS, sizeof event);  
	        int k;  
    for(k = 0; k &amp;lt; PROCESS_NUM; k++)  
    {  
        int pid = fork();  
        if(pid == 0)  
        {  
 
            /* The event loop */  
            while (1)  
            {  
                int n, i;  
                n = epoll_wait(efd, events, MAXEVENTS, -1);  
                printf(&amp;quot;process %d return from epoll_wait!\n&amp;quot;, getpid());  
	                                   /* sleep here is very important!*/  
                //sleep(2);  
	                                   for (i = 0; i &amp;lt; n; i++)  
                {  
                    if ((events[i].events &amp;amp; EPOLLERR) || (events[i].events &amp;amp; EPOLLHUP) || (!(events[i].events &amp;amp;                                    EPOLLIN)))  
                    {  
                        /* An error has occured on this fd, or the socket is not  
                        ready for reading (why were we notified then?) */  
                        fprintf (stderr, &amp;quot;epoll error\n&amp;quot;);  
                        close (events[i].data.fd);  
                        continue;  
                    }  
                    else if (sfd == events[i].data.fd)  
                    {  
                        /* We have a notification on the listening socket, which  
                        means one or more incoming connections. */  
                        struct sockaddr in_addr;  
                        socklen_t in_len;  
                        int infd;  
                        char hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];  
 
                        in_len = sizeof in_addr;  
                        infd = accept(sfd, &amp;amp;in_addr, &amp;amp;in_len);  
                        if (infd == -1)  
                        {  
                            printf(&amp;quot;process %d accept failed!\n&amp;quot;, getpid());  
                            break;  
                        }  
                        printf(&amp;quot;process %d accept successed!\n&amp;quot;, getpid());  
 
                        /* Make the incoming socket non-blocking and add it to the  
                        list of fds to monitor. */  
                        close(infd); 
                    }  
                }  
            }  
        }  
    }  
    int status;  
    wait(&amp;amp;status);  
    free (events);  
    close (sfd);  
    return EXIT_SUCCESS;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发现确实如上面那篇博客里所说，当我模拟发起一个请求时，只有一个或少数几个进程被唤醒了。&lt;/p&gt;

&lt;p&gt;也就是说，到目前为止，还没有得到一个确定的答案。但后来，在下面这篇博客中看到这样一个评论：&lt;a href=&#34;http://blog.csdn.net/spch2008/article/details/18301357&#34;&gt;http://blog.csdn.net/spch2008/article/details/18301357&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这个总结，需要进一步阐述，你的实验，看上去是只有4个进程唤醒了，而事实上，其余进程没有被唤醒的原因是你的某个进程已经处理完这个 accept，内核队列上已经没有这个事件，无需唤醒其他进程。你可以在 epoll 获知这个 accept 事件的时候，不要立即去处理，而是 sleep 下，这样所有的进程都会被唤起&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看到这个评论后，我顿时如醍醐灌顶，重新修改了上面的测试程序，即在 epoll_wait 返回后，加了个 sleep 语句，这时再测试，果然发现所有的进程都被唤醒了。&lt;/p&gt;

&lt;p&gt;所以，epoll_wait上的惊群确实是存在的。&lt;/p&gt;

&lt;h2 id=&#34;4-为什么内核不处理-epoll-惊群&#34;&gt;4. 为什么内核不处理 epoll 惊群&lt;/h2&gt;

&lt;p&gt;看到这里，我们可能有疑惑了，为什么内核对 accept 的惊群做了处理，而现在仍然存在 epoll 的惊群现象呢？&lt;/p&gt;

&lt;p&gt;我想，应该是这样的：&lt;br /&gt;
accept 确实应该只能被一个进程调用成功，内核很清楚这一点。但 epoll 不一样，他监听的文件描述符，除了可能后续被 accept 调用外，还有可能是其他网络 IO 事件的，而其他 IO 事件是否只能由一个进程处理，是不一定的，内核不能保证这一点，这是一个由用户决定的事情，例如可能一个文件会由多个进程来读写。所以，对 epoll 的惊群，内核则不予处理。&lt;/p&gt;

&lt;h2 id=&#34;5-nginx-是如何处理惊群问题的&#34;&gt;5. Nginx 是如何处理惊群问题的&lt;/h2&gt;

&lt;p&gt;在思考这个问题之前，我们应该以前对前面所讲几点有所了解，即先弄清楚问题的背景，并能自己复现出来，而不仅仅只是看书或博客，然后再来看看 Nginx 的解决之道。这个顺序不应该颠倒。&lt;/p&gt;

&lt;p&gt;首先，我们先大概梳理一下 Nginx 的网络架构，几个关键步骤为:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Nginx 主进程解析配置文件，根据 listen 指令，将监听套接字初始化到全局变量 ngx_cycle 的 listening 数组之中。此时，监听套接字的创建、绑定工作早已完成。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Nginx 主进程 fork 出多个子进程。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;每个子进程在 ngx_worker_process_init 方法里依次调用各个 Nginx 模块的 init_process 钩子，其中当然也包括 NGX_EVENT_MODULE 类型的 ngx_event_core_module 模块，其 init_process 钩子为 ngx_event_process_init。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ngx_event_process_init 函数会初始化 Nginx 内部的连接池，并把 ngx_cycle 里的监听套接字数组通过连接池来获得相应的表示连接的 ngx_connection_t 数据结构，这里关于 Nginx 的连接池先略过。我们主要看 ngx_event_process_init 函数所做的另一个工作：如果在配置文件里&lt;strong&gt;没有&lt;/strong&gt;开启&lt;a href=&#34;http://nginx.org/en/docs/ngx_core_module.html#accept_mutex&#34;&gt;accept_mutex锁&lt;/a&gt;，就通过 ngx_add_event 将所有的监听套接字添加到 epoll 中。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;每一个 Nginx 子进程在执行完 ngx_worker_process_init 后，会在一个死循环中执行 ngx_process_events_and_timers，这就进入到事件处理的核心逻辑了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在 ngx_process_events_and_timers 中，如果在配置文件里开启了 accept_mutext 锁，子进程就会去获取 accet_mutext 锁。如果获取成功，则通过 ngx_enable_accept_events 将监听套接字添加到 epoll 中，否则，不会将监听套接字添加到 epoll 中，甚至有可能会调用 ngx_disable_accept_events 将监听套接字从 epoll 中删除（如果在之前的连接中，本worker子进程已经获得过accept_mutex锁)。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ngx_process_events_and_timers 继续调用 ngx_process_events，在这个函数里面阻塞调用 epoll_wait。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至此，关于 Nginx 如何处理 fork 后的监听套接字，我们已经差不多理清楚了，当然还有一些细节略过了，比如在每个 Nginx 在获取 accept_mutex 锁前，还会根据当前负载来判断是否参与 accept_mutex 锁的争夺。&lt;/p&gt;

&lt;p&gt;把这个过程理清了之后，Nginx 解决惊群问题的方法也就出来了，就是利用 accept_mutex 这把锁。&lt;/p&gt;

&lt;p&gt;如果配置文件中没有开启 accept_mutex，则所有的监听套接字不管三七二十一，都加入到每子个进程的 epoll中，这样当一个新的连接来到时，所有的 worker 子进程都会惊醒。&lt;/p&gt;

&lt;p&gt;如果配置文件中开启了 accept_mutex，则只有一个子进程会将监听套接字添加到 epoll 中，这样当一个新的连接来到时，当然就只有一个 worker 子进程会被唤醒了。&lt;/p&gt;

&lt;h2 id=&#34;6-小结&#34;&gt;6. 小结&lt;/h2&gt;

&lt;p&gt;现在我们对惊群及 Nginx 的处理总结如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;accept 不会有惊群，epoll_wait 才会。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Nginx 的 accept_mutex,并不是解决 accept 惊群问题，而是解决 epoll_wait 惊群问题。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;说Nginx 解决了 epoll_wait 惊群问题，也是不对的，它只是控制是否将监听套接字加入到epoll 中。监听套接字只在一个子进程的 epoll 中，当新的连接来到时，其他子进程当然不会惊醒了。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-其他参考文章&#34;&gt;7. 其他参考文章&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/russell_tao/article/details/7204260&#34;&gt;“惊群”，看看 nginx 是怎么解决它的&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>小聚，小感</title>
      <link>https://pureage.info/2015/12/20/meet-an-old-friend.html</link>
      <pubDate>Sun, 20 Dec 2015 15:35:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/20/meet-an-old-friend.html</guid>
      
        <description>&lt;p&gt;大学室友涛从南京来深圳出差，今天特意抽空到我家来小聚了一下。从大学毕业，到现在已经有6年多没见了，大学四年同处一室的感情还是挺深的，尽管这么久没见面了，仍没有生疏感。朋友之间相处没有生疏感的表现就是，面对彼此都没有交流上的压力，我不用刻意找话题跟你聊天，你也不用刻意逢迎我的喜好，吃饭时我不用担心是否你酒没喝到，你也不用按照我的节奏来喝酒。有一茬没一茬的聊天，一杯半盏的喝酒，自由惬意。&lt;/p&gt;

&lt;p&gt;说起来大学毕业都六年了。六年后再见面，我们都已经成家，他还有了一个刚满一岁的女儿。似水流年，流年似水，平日里丝毫不觉得，只有在带有旧日痕迹的事物放到面前时，感慨才会如此强烈。但不可避免的事实是，我们都是生活中的人了。不可能彻夜长谈，不可能一直回味过去。离别才是常态，小聚只是片段。所谓生活中的人，就是对生活本身习以为常，面对相聚别离，不会有太多悲喜。&lt;/p&gt;

&lt;p&gt;曾经的我是一个很怀旧的人。记得在六七岁的时候，经常会在睡觉跟自己对话:明天这个时候，此刻就已经成为过去，所以我现在要刻意的想一些东西，明天这个时候好回忆。原来自己小时候，还挺文艺的。&lt;/p&gt;

&lt;p&gt;从个人管理的角度上说，过于怀旧当然是不好的。所以，现在我已经刻意做出了很多改变。这种改变花了很长时间，很不容易。难度不亚于吸烟者戒掉烟瘾。&lt;/p&gt;

&lt;p&gt;但我并不觉得，一个坦然面对现在的人，比一个沉迷过去的人更值得被人尊崇。面对时间、宇宙，一切都太渺小。即使一个人活着的每一天都能活在当下，到死的那一刻，我相信过去的影像还是会在脑海中跳跃闪回。所以，如果让现在的我去劝说一个正处于“为赋新词强说愁”的年龄的少年，我还真不知道该如何组织语言，让他听信于我。&lt;/p&gt;

&lt;p&gt;我想我只能说出“尊敬时间就是尊敬自己，尊敬自己就是尊敬时间，所以不要让时间白白流失掉”这类无聊的话吧。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>跑步的意义</title>
      <link>https://pureage.info/2015/12/18/lets-talk-about-running-again.html</link>
      <pubDate>Fri, 18 Dec 2015 10:36:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/18/lets-talk-about-running-again.html</guid>
      
        <description>&lt;p&gt;去年报名了清远马拉松半程赛之后，我写了一篇 Blog 记录了一下: &lt;a href=&#34;http://pureage.info/2014/12/30/qingyuan-marathon.html&#34;&gt;报名了清远马拉松&lt;/a&gt;。时间差不多过去了整整一年，今天我再次报名参加清远马拉松。&lt;/p&gt;

&lt;p&gt;下面就说说，在即将过去的 2015 年里，关于跑步这件事儿上的一些片段和思考。&lt;/p&gt;

&lt;p&gt;2015 年，跑了两次马拉松，拿了两个纪念牌，说明我百马人生的目标已经完成了百分之二。其实这个目标是怎么来的我都不记得了，但似乎有了这个说法之后，跑步这件事情顿时被赋予了一层特别的意义一样。&lt;/p&gt;

&lt;p&gt;跑步的意义对我到底是什么，我思考了一段时间。&lt;/p&gt;

&lt;p&gt;跑步对我意义重大。这次正儿八经的开始跑步，其实是因为当时面临着一场巨大的危机，家庭、工作异常不顺，尤其是家庭，连续一年多，经常都处在崩溃的边缘。直到有一天我受不了了，决定反击。反击的时候总得有个象征性的东西吧，比如影视作品里飘扬的旗帜、燃爆的音乐，于是我选择了跑步。这种个人情况和内心的活动，外人是毫无察觉的，同事们看我开始每天下班跑步，还挺羡慕的。于是，就这么熬到了现在。从这个角度说，跑步拯救了我。&lt;/p&gt;

&lt;p&gt;但是如果仅仅停留在这个层面的思考，然后就说，跑步吧，跑步能改变你的人生，这未免也太肤浅了。真实的情况不是那样的。&lt;/p&gt;

&lt;p&gt;跑步就是跑步，仅此而已。它不能于任何困境中拯救任何人。能拯救一个人的，只能是他自己。在跑步这件事上，是我首先意识到，我该主动改变一下工作、生活中的状态，跑步只不过是一种号角性质的东西，起到助燃和提醒的作用。助燃作用不用多说，提醒作用说的是，只要这个习惯还在继续，那么个人的状态和态度都应该继续。&lt;/p&gt;

&lt;p&gt;客观的说，跑步本身的作用有两个。一是促进分泌多巴胺，让人有一种愉悦的心情。二是能真实的增强体质，身体好了，所谓的精气神就上来了。&lt;/p&gt;

&lt;p&gt;把跑步换成任何一种对健康或心理有积极作用的习惯，都能起到这个作用。比如瑜伽、钓鱼、学习一门乐器等等。把多余的精力消耗掉，让心情平静下来，就不会有那么多的时间和精力耗在空虚的消极情绪中。&lt;/p&gt;

&lt;p&gt;所以，最厉害的人是那些不需要借助外部运动，就能获得内心平静和力量的人，各种先贤圣哲多是这样的人。&lt;/p&gt;

&lt;p&gt;而我们普通人很难仅凭内心自省的力量，就能让自己活得平静。我还是继续跑下去吧。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>继续留在Typecho</title>
      <link>https://pureage.info/2015/12/16/still-using-typecho.html</link>
      <pubDate>Wed, 16 Dec 2015 14:54:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/16/still-using-typecho.html</guid>
      
        <description>&lt;p&gt;最近手心手背总时不时发痒，又开始想折腾博客玩了。&lt;/p&gt;

&lt;p&gt;这个小小的个人博客，从 2011 年开始，几乎把主流的 Blog 系统折腾了个遍，从最初的 Wordpress,到 Typecho, Emlog, Textpattern 等等。其中，Typecho 被来回折腾了几次，因为 Typecho 自身也经历了两个大的阶段：从几年没有维护，到开始重构并默认支持 Markdown 编辑器。&lt;/p&gt;

&lt;p&gt;每个阶段维护博客的心态也不一样。刚开始的时候，总到处想和人交换链接，把界面搞得好看点，各种插件都试一试。这个阶段确实还真认识了一些一起写博客的同学，大家经常互访互评，搞得还挺热闹。但是必须要知道的是，即使在 2011 年之前，个人博客也早已经开始没落了，这是大势所趋，曾经的那些博客，到现在也已经绝大多数打不开，还挺让人唏嘘的。&lt;/p&gt;

&lt;p&gt;后来就不怎么想折腾了，也不再去管写的东西到底有没有人看，因为知道这其实并没有什么意义。前面提到的几次折腾 Typecho 的过程，其实就体现了这种心态的变化。Typecho 之前的版本是很简洁甚至简陋的，默认连编辑器都没有，恰好是这个特点，一方面决定了它在某个时刻打动了我，另一方面又决定了不会在它上面停留很久。直到 2013 年，Typecho 重新开发，增加了一些特性，其中最重要的一个特性是原生支持 Markdown 编辑器，支持实时预览，恰好在那个时刻，我觉得这个特性就是我最需要的，所以在 2013 年就又将博客切到 Typecho，一直到现在。&lt;/p&gt;

&lt;p&gt;如果说这个从主动愿意折腾，到后来不想折腾的变化，算是一个成长的轨迹的话，为什么现在又突然想再重新折腾呢？似乎是一种矛盾，但其实是统一的，就是越来越想真的将精力放在文章本身了。看看这些备选项你就懂了:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Octopress&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Ghost&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Farbox&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Hexo&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面列出的每一项我都试用过，最终锁定在 Hexo 上，都挽起袖子开始准备写转换脚本了。&lt;strong&gt;临在最后关头，又打住了&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如果是早两年，此时这博客肯定就已经是迁移完了，评论什么的多半也再次都搞丢了。不过现在既然网站的底部还写着“由 Typecho 强力驱动”，则说明我已经打定主意不迁了。&lt;/p&gt;

&lt;p&gt;因为我只反问了自己一句：现在 Typecho 有让你用着不爽的地方吗？ 即使是 Typecho 的开发者 joyqi 都开始拥抱变化，捣腾出一个 PHP 版本的静态博客生成系统 Logecho 了， Typecho 确实并没有让我用起来有不好的感觉。既然没有，为什么要换呢？&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>尝鲜：Nginx-1.9.8推出的切片模块</title>
      <link>https://pureage.info/2015/12/10/nginx-slice-module.html</link>
      <pubDate>Thu, 10 Dec 2015 06:12:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/10/nginx-slice-module.html</guid>
      
        <description>&lt;p&gt;熟悉 CDN 行业主流技术的朋友应该都比较清楚，虽然 Nginx 近几年发展的如日中天，但是基本上没有直接使用它自带的 proxy_cache 模块来做缓存的，原因有很多，例如下面几个：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不支持多盘&lt;/li&gt;
&lt;li&gt;不支持裸设备&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;大文件不会切片&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;大文件的 Range 请求表现不尽如人意&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Nginx 自身不支持合并回源
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然，上面列出来的并不全， 所以，在现在主流的 CDN 技术栈里面， Nginx 起到的多是一个粘合剂的作用，例如调度器、负载均衡器、业务逻辑（防盗链等），需要与 Squid、ATS 等主流 Cache Server 配合使用，即使不使用这些技术，也会使用其它办法，例如直接使用文件系统和数据库去管理文件，而不会直接使用 proxy_cache 模块。&lt;/p&gt;

&lt;p&gt;Nginx-1.9.8 中新增加的一个模块ngx_http_slice_module解决了一部分问题。本文就来尝尝鲜，看看这个切片模块。&lt;/p&gt;

&lt;p&gt;注意：截至到发文时，Nginx 马上发布了 Nginx-1.9.9，用来解决 Nginx-1.9.8中的一个 Bug，所以，在实际使用中，如果需要使用本新增特性，请直接使用 Nginx-1.9.9。&lt;/p&gt;

&lt;p&gt;首先，我们看看几个不同版本的 Nginx 的 proxy_cache 对 Range 的处理情况。&lt;/p&gt;

&lt;h3 id=&#34;nginx-0-8-15&#34;&gt;Nginx-0.8.15&lt;/h3&gt;

&lt;p&gt;在 Nginx-0.8.15 中，使用如下配置文件做测试:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {  
    include       mime.types;  
    default_type  application/octet-stream;  
    sendfile        on;  
    keepalive_timeout  65;  
  
    proxy_cache_path /tmp/nginx/cache levels=1:2 keys_zone=cache:100m;  
    server {    
        listen       8087;  
        server_name  localhost;  
        location / {  
            proxy_cache cache;  
            proxy_cache_valid 200 206 1h;  
           # proxy_set_header Range $http_range;  
            proxy_pass http://127.0.0.1:8080;  
  
        }  
        error_page   500 502 503 504  /50x.html;  
        location = /50x.html {  
            root   html;  
        }  
  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重点说明以下两种情况：&lt;br /&gt;
* 第一次 Range 请求（没有本地缓存），Nginx 会去后端将整个文件拉取下来（后端响应码是200）后，并且返回给客户端的是整个文件，响应状态码是200，而非206. 后续的 Range 请求则都用缓存下来的本地文件提供服务，且响应状态码都是对应的206了。&lt;br /&gt;
* 如果在上面的配置文件中，加上 proxy_set_header Range $http_range;再进行测试(测试前先清空 Nginx 本地缓存)。则第一次 Range 请求（没有本地缓存），Nginx 会去后端用 Range 请求文件，而不会把整个文件拉下来，响应给客户端的也是206.但问题在于，由于没有把 Range 请求加入到 cache key 中，会导致后续所有的请求，不管 Range 如何，只要 url 不变，都会直接用cache 的内容来返回给客户端，这肯定是不符合要求的。&lt;/p&gt;

&lt;h3 id=&#34;nginx-1-9-7&#34;&gt;Nginx-1.9.7&lt;/h3&gt;

&lt;p&gt;在 Nginx-1.9.7 中，同样进行上面两种情况的测试，第二种情况的结果其实是没多少意义，而且肯定也和 Nginx-0.8.15 一样，所以这里只关注第一种测试情况。&lt;/p&gt;

&lt;p&gt;第一次 Range 请求（没有本地缓存），Nginx 会去后端将整个文件拉取下来（后端响应码是200），但返回给客户端的是正确的 Range 响应，即206.后续的 Range 请求，则都用缓存下来的本地文件提供服务，且都是正常的206响应。&lt;/p&gt;

&lt;p&gt;可见，与之前的版本相比，还是有改进的，但并没有解决最实质的问题。&lt;/p&gt;

&lt;p&gt;我们可以看看 Nginx 官方对于 Cache 在 Range 请求时行为的说明:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How Does NGINX Handle Byte Range Requests?&lt;/p&gt;

&lt;p&gt;If the file is up-to-date in the cache, then NGINX honors a byte range request and serves only the specified bytes of the item to the client. If the file is not cached, or if it’s stale, NGINX downloads the entire file from the origin server. If the request is for a single byte range, NGINX sends that range to the client as soon as it is encountered in the download stream. If the request specifies multiple byte ranges within the same file, NGINX delivers the entire file to the client when the download completes.&lt;/p&gt;

&lt;p&gt;Once the download completes, NGINX moves the entire resource into the cache so that all future byte-range requests, whether for a single range or multiple ranges, are satisfied immediately from the cache.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;nginx-1-9-8&#34;&gt;Nginx-1.9.8&lt;/h3&gt;

&lt;p&gt;我们继续看看Nginx-1.9.8, 当然，在编译时要加上参数&amp;ndash;with-http_slice_module，并作类似下面的配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {  
    include       mime.types;  
    default_type  application/octet-stream;  
    sendfile        on;  
    keepalive_timeout  65;  
  
    proxy_cache_path /tmp/nginx/cache levels=1:2 keys_zone=cache:100m;  
    server {  
        listen       8087;  
        server_name  localhost;  
        location / {  
            slice 1m;  
            proxy_cache cache;  
            proxy_cache_key $uri$is_args$args$slice_range;  
            proxy_set_header Range $slice_range;  
            proxy_cache_valid 200 206 1h;  
            #proxy_set_header Range $http_range;  
            proxy_pass http://127.0.0.1:8080;  
  
        }  
        error_page   500 502 503 504  /50x.html;  
        location = /50x.html {  
            root   html;  
        }  
  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不测不知道，一侧吓一跳，这俨然是一个杀手级的特性。&lt;/p&gt;

&lt;p&gt;首先，如果不带 Range 请求，后端大文件在本地 cache 时，会按照配置的 slice 大小进行切片存储。&lt;/p&gt;

&lt;p&gt;其次，如果带 Range 请求，则 Nginx 会用合适的 Range 大小（以 slice 为边界）去后端请求，这个大小跟客户端请求的 Range 可能不一样，并将以 slice 为大小的切片存储到本地，并以正确的206响应客户端。&lt;/p&gt;

&lt;p&gt;注意上面所说的，Nginx 到后端的 Range 并不一定等于客户端请求的 Range，因为无论你请求的Range 如何，Nginx 到后端总是以 slice 大小为边界，将客户端请求分割成若干个子请求到后端，假设配置的 slice 大小为1M,即1024字节，那么如果客户端请求 Range 为0-1023范围以内任何数字，均会落到第一个切片上，如果请求的 Range 横跨了几个 slice 大小，则nginx会向后端发起多个子请求，将这几个 slice 缓存下来。而对客户端，均以客户端请求的 Range 为准。如果一个请求中，有一部分文件之前没有缓存下来，则 Nginx 只会去向后端请求缺失的那些切片。&lt;/p&gt;

&lt;p&gt;由于这个模块是建立在子请求的基础上，会有这么一个潜在问题：当文件很大或者 slice 很小的时候，会按照 slice 大小分成很多个子请求，而这些个子请求并不会马上释放自己的资源，可能会导致文件描述符耗尽等情况。&lt;/p&gt;

&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;

&lt;p&gt;总结一下，需要注意的点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;该模块用在 proxy_cache 大文件的场景，将大文件切片缓存&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;编译时对 configure 加上 &amp;ndash;with-http_slice_module 参数&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;$slice_range 一定要加到 proxy_cache_key 中，并使用 proxy_set_header 将其作为 Range 头传递给后端&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;要根据文件大小合理设置 slice 大小&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体特性的说明，可以参考 Roman Arutyunyan 提出这个 patch 时的邮件来往：&lt;br /&gt;
&lt;a href=&#34;https://forum.nginx.org/read.php?29,261929,261929#msg-261929&#34;&gt;https://forum.nginx.org/read.php?29,261929,261929#msg-261929&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;顺带提一下，Roman Arutyunyan 也是个大牛，做流媒体领域的同学们肯定很多都听说过：&lt;a href=&#34;https://github.com/arut/nginx-rtmp-module&#34;&gt;nginx-rtmp&lt;/a&gt; 模块的作者。&lt;/p&gt;

&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Nginx 官方的 Cache 指南&lt;br /&gt;
&lt;a href=&#34;https://www.nginx.com/blog/nginx-caching-guide/&#34;&gt;https://www.nginx.com/blog/nginx-caching-guide/&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Nginx各版本changelog&lt;br /&gt;
&lt;a href=&#34;http://nginx.org/en/CHANGES&#34;&gt;http://nginx.org/en/CHANGES&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Nginx proxy 模块 wiki&lt;br /&gt;
&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&#34;&gt;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;http_slice_module 的历次提交记录&lt;br /&gt;
&lt;a href=&#34;http://hg.nginx.org/nginx/rev/29f35e60840b&#34;&gt;http://hg.nginx.org/nginx/rev/29f35e60840b&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://hg.nginx.org/nginx/rev/bc9ea464e354&#34;&gt;http://hg.nginx.org/nginx/rev/bc9ea464e354&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://hg.nginx.org/nginx/rev/4f0f4f02c98f&#34;&gt;http://hg.nginx.org/nginx/rev/4f0f4f02c98f&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;http_slice_module 提交前的邮件来往&lt;br /&gt;
&lt;a href=&#34;https://forum.nginx.org/read.php?29,261929&#34;&gt;https://forum.nginx.org/read.php?29,261929&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Nginx 之前版本关于 Range cache 的邮件来往&lt;br /&gt;
&lt;a href=&#34;https://forum.nginx.org/read.php?2,8958,8958&#34;&gt;https://forum.nginx.org/read.php?2,8958,8958&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;切片模块的 wiki&lt;br /&gt;
&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_slice_module.html&#34;&gt;http://nginx.org/en/docs/http/ngx_http_slice_module.html&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>Nginx紧急发布1.9.9修复bug</title>
      <link>https://pureage.info/2015/12/10/bugfix-of-nginx.html</link>
      <pubDate>Thu, 10 Dec 2015 03:27:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/10/bugfix-of-nginx.html</guid>
      
        <description>&lt;p&gt;有时候，仔细追踪一个项目的各次提交也是蛮有趣的，特别是各种 Bugfix，会发现，原来牛人也会有各种低级错误。&lt;/p&gt;

&lt;p&gt;例如，Nginx 刚在12月8号发布了nginx-1.9.8, 马上就在nginx-1.9.9,这种密集的发布，一看就是 Bug 修复了。我们看看到底修复了什么 Bug。&lt;/p&gt;

&lt;p&gt;首先，看看changelog:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Changes with nginx 1.9.9                                         09 Dec 2015&lt;/p&gt;

&lt;p&gt;*) Bugfix: proxying to unix domain sockets did not work when using&lt;br /&gt;
       variables; the bug had appeared in 1.9.8.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再来看看是如何修复的，变更前的代码片段:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void  
ngx_http_upstream_init_request(ngx_http_request_t *r)  
{  
    ....(略）....  
    if (u-&amp;gt;resolved-&amp;gt;port == 0) {  
        ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;log, 0,  
                      &amp;quot;no port in upstream \&amp;quot;%V\&amp;quot;&amp;quot;, host);  
        ngx_http_upstream_finalize_request(r, u,  
                                       NGX_HTTP_INTERNAL_SERVER_ERROR);  
        return;  
    }  
    ....(略)....  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;变更后的代码片段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void  
ngx_http_upstream_init_request(ngx_http_request_t *r)  
{  
    ....(略)....  
            if (u-&amp;gt;resolved-&amp;gt;port == 0  
                &amp;amp;&amp;amp; u-&amp;gt;resolved-&amp;gt;sockaddr-&amp;gt;sa_family != AF_UNIX)  
            {  
                ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;log, 0,  
                              &amp;quot;no port in upstream \&amp;quot;%V\&amp;quot;&amp;quot;, host);  
                ngx_http_upstream_finalize_request(r, u,  
                                               NGX_HTTP_INTERNAL_SERVER_ERROR);  
                return;  
            }  
    ....(略)....  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作为旁观者和事后诸葛亮，可以很明显看出之前的问题所在：在 upstream 中，Unix 本地域套接字不能用了。&lt;/p&gt;

&lt;p&gt;这次版本更新，除了修正这个 Bug 外，没有做其他任何事情，所以，如果你已经尝鲜在用 1.9.8 了，赶紧直接升级到1.9.9 吧。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Nginx对Connection头的处理过程</title>
      <link>https://pureage.info/2015/12/08/connection-header-in-nginx.html</link>
      <pubDate>Tue, 08 Dec 2015 07:04:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/08/connection-header-in-nginx.html</guid>
      
        <description>&lt;h3 id=&#34;1-标准&#34;&gt;1. 标准&lt;/h3&gt;

&lt;p&gt;RFC2616 中，对 Connection 的说明如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HTTP/1.1 proxies MUST parse the Connection header field before a message is forwarded and, for each connection-token in this field, remove any header field(s) from the message with the same name as the connection-token. Connection options are signaled by the presence of a connection-token in the Connection header field, not by any corresponding additional header field(s), since the additional header field may not be sent if there are no parameters associated with that connection option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;综合&lt;a href=&#34;https://tools.ietf.org/html/rfc2616#page-117&#34;&gt;RFC2626 14.10&lt;/a&gt;、《HTTP权威指南》4.3.1、《图解HTTP》6.3.2中的说法，均指明了 Connection 头部（请求头、响应头）主要包括如下两方面的作用：&lt;br /&gt;
1. 控制不再转发给代理的首部字段
2. 管理持久连接&lt;/p&gt;

&lt;p&gt;其中，我个人经常见到的是第二种用法，对第一种用法还不甚了解。&lt;/p&gt;

&lt;p&gt;第一种用法，大概意思就是，在一个 HTTP 应用（客户端、服务器）将报文转发出之前，必须删除 Connection 首部列出的所有首部字段（多个不同的字段用逗号分隔），当然一些 end-to-end 的头部是肯定不能放进去的，例如 Cache-Control 头。&lt;/p&gt;

&lt;h3 id=&#34;2-nginx-是如何做的&#34;&gt;2.Nginx 是如何做的&lt;/h3&gt;

&lt;p&gt;注:以下代码均来自 Nginx-1.8.0&lt;/p&gt;

&lt;p&gt;对于请求中的 Connection 头， Nginx 在 http 解析时调用 ngx_http_process_connection 方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static ngx_int_t  
ngx_http_process_connection(ngx_http_request_t *r, ngx_table_elt_t *h,  
    ngx_uint_t offset)  
{  
    if (ngx_strcasestrn(h-&amp;gt;value.data, &amp;quot;close&amp;quot;, 5 - 1)) {  
        r-&amp;gt;headers_in.connection_type = NGX_HTTP_CONNECTION_CLOSE;  
  
    } else if (ngx_strcasestrn(h-&amp;gt;value.data, &amp;quot;keep-alive&amp;quot;, 10 - 1)) {  
        r-&amp;gt;headers_in.connection_type = NGX_HTTP_CONNECTION_KEEP_ALIVE;  
    }  
  
    return NGX_OK;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，该方法主要功能只涉及到上面所述的 Connection 作用的第2个作用，而没有第1个。这应该算的上是实现对标准的支持不完整吧。&lt;/p&gt;

&lt;p&gt;不管怎么样，我们继续分析一下 Nginx 在管理持久连接上具体是怎么做的，上面的代码逻辑很简单：&lt;br /&gt;
（1）如果 Connection 头是 close（不区分大小写），则 r-&amp;gt;headers_in.connection_type 被置为 NGX_HTTP_CONNECTION_CLOSE&lt;/p&gt;

&lt;p&gt;（2）如果 Connection 头是 keep-alive（不区分大小写），则 r-&amp;gt;headers_in.connection_type 被设置为 NGX_HTTP_CONNECTION_KEEP_ALIVE&lt;/p&gt;

&lt;p&gt;（3）如果不是以上两种情况，则什么都不做，此时 r-&amp;gt;headers_in.connection_type 默认为0.&lt;/p&gt;

&lt;p&gt;可以看到，ngx_http_process_connection 的作用仅仅是设置了一个标记r-&amp;gt;headers_in.connection_type，我们继续看这个标记是如何被使用的。&lt;/p&gt;

&lt;p&gt;要想完整的讲述这个过程，不可避免需要涉及一些 Nginx 配置解析、解析 HTTP 协议相关的流程，但这些都不是本文的重点，下面均一笔带过。&lt;/p&gt;

&lt;p&gt;Nginx 的各历史版本中，对于 http 协议解析的过程，细节稍微有些变化。在 Nginx-1.8.0 中，过程如下：&lt;/p&gt;

&lt;p&gt;（0）我们知道，Nginx 是一个主进程加多子进程的架构，配置解析发生在 fork 子进程之前，在这个过程中很多操作都是对于全局变量 cycle 的操作。在 fork 之后，每个子进程均会继承一份这个全局变量 cycle(这里不考虑COW)。&lt;/p&gt;

&lt;p&gt;（1）http 配置解析的入口为 ngx_http_block，这是个很复杂的函数。因为 Nginx 的配置文件分层级，可以有包含关系，为了对这个特性提供支持，配置文件的解析涉及到配置项的内存布局的设计，最终落实下来，就是全局变量 cycle 的 conf_ctx 成员，这是个四重指针。配置解析的这部分是另一个话题，本文不打算细说。这里要关注的是，在 ngx_http_block 函数的最后，调用了ngx_http_optimize_servers 方法，在这个方法里，完成了这样一个事情：配置文件里的监听套接字（可能是多个），最终被复制到了全局变量 ngx_cycle 的 listening 数组里。整个调用关系为，nginx.c-&amp;gt;main()-&amp;gt;ngx_init_cycle-&amp;gt;ngx_http_block(在 ngx_init_cycle里通过钩子被回调)-&amp;gt;ngx_http_optimize_servers-&amp;gt;ngx_http_init_listening-&amp;gt;ngx_http_add_listening-&amp;gt;ngx_create_listening, 有兴趣的同学可以深入进去看看。&lt;/p&gt;

&lt;p&gt;（2）在上面的这个调用链里，ngx_http_add_listening 做了另外一个事情：将所有的ngx_listening_t 类型的监听套接字的 handler 钩子设置为 ngx_http_init_connection，这个在后面会用到。&lt;/p&gt;

&lt;p&gt;（3）nginx fork 出多个子进程，每个子进程会在 ngx_worker_process_init 方法里调用各个nginx 模块 init_process 钩子，其中当然也包括 NGX_EVENT_MODULE 类型的ngx_event_core_module 模块，其 init_process 钩子为 ngx_event_process_init。在ngx_event_process_init 里，每一个 ngx_listening_t 类型的监听套接字变量 ls[i]，根据ngx_get_connection 从 nginx 的 connections 储备池里获得一个与之相关的ngx_connection_t 类型的变量 c ,这两个变量均有一个指针成员指向对方，以此保持互相联系。从这里开始，我们将注意力转移到这个 ngx_connection_t 类型的变量 c 上。在 ngx_event_process_init 的后面，这个 ngx_connection_t 类型的变量的读事件的 handler，被置为 ngx_event_accept。然后这个读事件被添加到 epoll 中。&lt;/p&gt;

&lt;p&gt;（4）当一个请求来临时，ngx_event_accpet 被回调，其中上面第（2）步里为监听套接字设置的 handler,即 ngx_http_init_connection 被调用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls-&amp;gt;handler(c);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个调用非常有趣，ls 实质上是代表着监听套接字，而参数 c 则是 accept 后建立起来的连接套接字，根据 socket 的基本知识，该连接上后续客户端与 Nginx 之间的信息传输，都通过这个连接套接字上的读写来进行。&lt;/p&gt;

&lt;p&gt;（5）从 ngx_http_init_connection 开始，就着手进行一系列 HTTP 协议解析。中间涉及到ngx_http_wait_request_handler、ngx_http_create_request、ngx_http_process_request_line、ngx_http_process_request_headers 等解析方法。&lt;/p&gt;

&lt;p&gt;似乎已经偏题太远了，我们回到最初的 Connection 请求头，在上面所讲的ngx_http_process_connection 中，根据 Connection 头，将 r-&amp;gt;headers_in.connection_type 置为NGX_HTTP_CONNECTION_CLOSE、NGX_HTTP_CONNECTION_KEEP_ALIVE 或者默认初始值 0.&lt;/p&gt;

&lt;p&gt;那么这个过程发生在上面所述的一系列流程的哪个阶段呢？当然是发生在ngx_http_process_request_headers 里了，在个方法里，全局数组 ngx_http_headers_in 的对应元素的 handler 被调用，对于 Connection 请求头，就是 ngx_http_process_connection了。&lt;/p&gt;

&lt;p&gt;讲明白了 ngx_http_process_connection 发生的前因，我们再来看看后果。&lt;/p&gt;

&lt;p&gt;ngx_http_process_connection 的直接影响只有一个，即对 r-&amp;gt;headers_in.connection_type进行赋值，close 为 NGX_HTTP_CONNECTION_CLOSE，keep-alive 为NGX_HTTP_CONNECTION_KEEP_ALIVE，其它情况为 0（初始值）。&lt;/p&gt;

&lt;p&gt;（6）在第（5）步里，在 ngx_http_process_request_line方法调用完 ngx_http_process_request_headers 后，继续调用 ngx_http_process_request，进而开始正式的在业务上处理HTTP请求。ngx_http_process_request的核心内容是对 ngx_http_handler 的调用。&lt;/p&gt;

&lt;p&gt;（7）在 ngx_http_handler 里，有这样一段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!r-&amp;gt;internal) {  
        switch (r-&amp;gt;headers_in.connection_type) {  
        case 0:  
            r-&amp;gt;keepalive = (r-&amp;gt;http_version &amp;gt; NGX_HTTP_VERSION_10);  
            break;  
  
        case NGX_HTTP_CONNECTION_CLOSE:  
            r-&amp;gt;keepalive = 0;  
            break;  
  
        case NGX_HTTP_CONNECTION_KEEP_ALIVE:  
            r-&amp;gt;keepalive = 1;  
            break;  
        }  
  
        r-&amp;gt;lingering_close = (r-&amp;gt;headers_in.content_length_n &amp;gt; 0  
                              || r-&amp;gt;headers_in.chunked);  
        r-&amp;gt;phase_handler = 0;  
  
    } else {  
        cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);  
        r-&amp;gt;phase_handler = cmcf-&amp;gt;phase_engine.server_rewrite_index;  
    }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以，到现在为止，客户端请求里带来的 Connection 头部，落在了 r-&amp;gt;keepalive 上了。规则如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果 Connection 头部里为&amp;rdquo;close&amp;rdquo;,则 r-&amp;gt;keepalive 为 0.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果 Connection 头部里为&amp;rdquo;keep-alive&amp;rdquo;,则 r-&amp;gt;keepalive为 1.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果不是以上两种情况，则按照 HTTP 协议走默认情况：如果是 HTTP 1.0 以上，则 r-&amp;gt;keepalive 默认为 1，如果是 HTTP 1.0及以下，则 r-&amp;gt;keepalive默认为 0.这一点是与 HTTP 协议相符合的.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到目前为止，我们所讲的都算是 r-&amp;gt;keepalive 是怎么产生的，还没有涉及到它是如何被使用的。&lt;/p&gt;

&lt;p&gt;r-&amp;gt;keepalive 的使用主要是在函数 ngx_http_finalize_connection 中，而ngx_http_finalize_connection 在 Nginx 中，仅被 ngx_http_finalize_request 调用。顾名思义，ngx_http_finalize_request 讲的是怎么结束一个 HTTP 请求的。&lt;/p&gt;

&lt;p&gt;（8）在 ngx_http_finalize_connection 中，如果 r-&amp;gt;keepalive 为1，则会调用ngx_http_set_keepalive 并返回。ngx_http_set_keepalive 方法完成将当前连接设为keepalive 状态的实质性工作。它实际上会把表示请求的 ngx_http_request_t 结构体释放，却又不会调用 ngx_http_close_connection 方法关闭连接，同时也在检测 keepalive 连接是否超时。&lt;/p&gt;

&lt;p&gt;至此，Connection 头部在 Nginx 里的处理流程差不多都讲完了，具体细节可按照这个脉络查看相应的代码。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>2015广马小结</title>
      <link>https://pureage.info/2015/12/07/guangzhou-marathon.html</link>
      <pubDate>Mon, 07 Dec 2015 14:58:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/07/guangzhou-marathon.html</guid>
      
        <description>&lt;p&gt;2015年12月6日，我的第二次半程马拉松之旅结束了。觉得应该记录一下，但跑完了却又没什么特别想说的了，就说几个点权当流水账吧。&lt;/p&gt;

&lt;p&gt;关于天气，用天公作美来形容再贴切不过了。广州经过多次试探，终于找到了入冬的节奏，气温骤降，还有阵阵小雨。本来以为这次会像三月份的清远马拉松一样冒雨奔跑，还在担心这寒冷的天气淋雨可能会吃不消，结果当天突然风和日丽，蓝天白云。真是一个惊喜。&lt;/p&gt;

&lt;p&gt;这次半马，我的准备工作其实是不足的。最近已经有两周没有跑步了，而且当天早上还没有任何进食，直接空腹开跑，但还好之前还是积累了一定的跑量，再加上之前已经有一次半马的经验了，所以心理上并没有什么压力。&lt;/p&gt;

&lt;p&gt;有一个让我非常兴奋的地方是，整个过程中我的膝盖没有任何不适。倒是双脚有些疼痛，尤其是脚拇指，估计是鞋的问题，到现在脚趾头还是淤青的。另外，大腿、臀部肌肉酸痛感强烈，这恰恰说明我的跑步姿势是没问题的，所以膝盖才会感觉良好。总体上说，身体没有什么不良反应。这也算是一个惊喜，说明在这方面的努力没有白费。&lt;/p&gt;

&lt;p&gt;比赛组织上，广马比清远马拉松更有经验，不得不提，赛后的姜汤简直是久旱甘霖。当天凭借广马参赛号码布，在广州市内还能免费乘坐地铁，比赛成绩也是当天就用短信发到手机上等等，做的好的地方真的还是挺多的。&lt;/p&gt;

&lt;p&gt;目前在考虑是否明年跑一次全马，主要思想斗争集中在如下几点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我是个平底足。平时走路稍微距离长一点脚都会痛，如果我能控制好膝盖，那么跑全马的瓶颈应该就在脚上了。本着健康第一的原则，我不适合去跑全马。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;但是如果每年都去参加几次半马，时间长了肯定也会腻。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;暂时并没有得出结论，明年先跑一次半马再说，如果确实很轻松了，再考虑全马的事。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>挤公交车二三事</title>
      <link>https://pureage.info/2015/12/02/cram-in-the-bus.html</link>
      <pubDate>Wed, 02 Dec 2015 14:38:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/12/02/cram-in-the-bus.html</guid>
      
        <description>&lt;p&gt;毕业工作后，我其实一直都没有真正尝过挤公交车、地铁上班的滋味，因为我租的房子总在公司附近，况且还每天骑车上班。但是这种好景在今年九月份时结束了，新公司距离住的地方要坐一个小时的公交车。这几个月挤公交车的经历大概可以分为几个阶段。&lt;/p&gt;

&lt;h3 id=&#34;1-噩梦般的挤车体验&#34;&gt;1. 噩梦般的挤车体验&lt;/h3&gt;

&lt;p&gt;这个时期，我大概七点半起床，八点左右到达公交站，公交站里已经是人头攒动了。想挤上去绝对是个体力活。而且，大家似乎都有这么一种心理，当自己是往上挤的一方时，就希望车里的人往里面动一动，腾出点空间，可如果自己在里面站定了后，到了后面的站时，却又不愿意给后来人腾出地方了。这种情况就导致了车门口附近的区域变成噩梦一般的存在。&lt;/p&gt;

&lt;p&gt;必须得想办法了。&lt;/p&gt;

&lt;h3 id=&#34;2-多走几分钟路-就有座位了&#34;&gt;2. 多走几分钟路，就有座位了&lt;/h3&gt;

&lt;p&gt;有一路车的起点站就在我最近的站点的上一站。于是我开始每天步行一站路，到始发站排队上车。这样，虽然多走了几百米，但是每次都有座位了。坐在车窗边，看到下一站很多人蜂拥而上却挤不进来，或者即使挤进来了也被挤成肉干的样子，就忍不住暗暗得意，就这么几百米的距离，为什么不多走几步呢。多走几百米路，就换来一个小时的舒适，简直太划算了。&lt;/p&gt;

&lt;h3 id=&#34;3-早起半个小时-多出一个小时&#34;&gt;3. 早起半个小时，多出一个小时&lt;/h3&gt;

&lt;p&gt;上一个阶段持续了一个月，虽然每天都能美滋滋的在座位上看看书和手机，然后偶尔抬起头看看车门挤成一锅粥的其他人，享受一下幸福感爆表的心情，但是仍然有个问题让人不满意。不管有没有座位，路况却都是一样的堵。算上到公司附近吃早餐的时间，我仍然在迟到的边缘徘徊。&lt;/p&gt;

&lt;p&gt;还是得想办法。&lt;/p&gt;

&lt;p&gt;在某天早上，一咬牙，提前半个小时起床了，一个超乎想象的惊喜突然砸到了我面前。由于早起了半个小时，离我最近的那个车站等车的人少了很多，所以我不用再额外步行到前一站就能坐到座位了。并且，由于早起了半个小时，路上就不堵车了，本来一个小时的车程半个小时就到了。这样算下来，早上的时间，硬生生的多出了一个多小时。从此，我再也不迟到了。&lt;/p&gt;

&lt;h3 id=&#34;4-大师有话说&#34;&gt;4. 大师有话说&lt;/h3&gt;

&lt;p&gt;我把这段时间坐车经历就这样平铺直叙的告诉了我体内的大师。大师沉吟片刻，摇头晃脑的说道：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;比别人多走一点，其实并不用走多远，你就能比大部分人从容得多&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;比别人早出发一点，其实并不用早多少，你就能大幅延长生命的长度&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我看了一眼大师，当然，他在我体内，我是看不到的，只能假装与他对话：“大师，你赢了。”&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>最近在看的几本书</title>
      <link>https://pureage.info/2015/11/28/some-books.html</link>
      <pubDate>Sat, 28 Nov 2015 15:30:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/11/28/some-books.html</guid>
      
        <description>&lt;p&gt;最近在这两本书：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;《自私的基因》&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;《机器人叛变》&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事实上，这一轮我打算看的完整书单是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;《自私的基因》&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;《机器人叛乱》&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;《超越智商》&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;《这才是心理学》&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;《思考，快与慢》&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到今天为止，《自私的基因》已经看完，《机器人叛乱》看了一大半。看一遍肯定是不够的，至于是整个书单完整看完再回过头来翻阅，还是一本的一本的深入看下去，视情况而定。&lt;/p&gt;

&lt;p&gt;为什么要看这几本书？因为我忽然想明白了一件事情，人具有自我反思的能力，也就具有了不断自主将自己的思维升级的能力。从这个角度上说，人应该是一个完美的生物。可是现实中，为什么到处都是相反的例子。小到怒路一族，大到恐怖袭击，这中间一定有一些深奥的东西，所以我想去了解一下。&lt;/p&gt;

&lt;p&gt;我希望这几本书我能认真看完。认真看完的意思是指看完后，大脑里能有一个体系结构，这个体系不一定完全正确，但一定要在逻辑上站得住脚，用它可以去解释很多让人疑惑的事情，如果能对自己的生活有一些指导意义就更好了。&lt;/p&gt;

&lt;p&gt;读书笔记是必须要有的。到了这个年龄段，我是再也不相信自己的记忆力了，虽然我在某些方面的记忆力确实是惊人的，例如，我至今仍清楚的记得很多和初中、小学同学之间的琐碎的点点滴滴，而当我和他们说起时，他们大吃一惊。再例如，在大学时，有次把水杯丢了，我很沮丧，走进超市一下买了两个水杯，这个过程的心理活动、动作、两个杯子的细节等等，历历在目。&lt;/p&gt;

&lt;p&gt;那是我第十次去上自习时丢水杯。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>扔掉那本书</title>
      <link>https://pureage.info/2015/11/27/throw-that-book-away.html</link>
      <pubDate>Fri, 27 Nov 2015 02:08:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/11/27/throw-that-book-away.html</guid>
      
        <description>&lt;p&gt;这几天搬家，收拾东西基本就是一个扔东西的过程，伴随着阵阵惊呼：“我竟然还有这个东西，扔&amp;hellip;”&lt;/p&gt;

&lt;p&gt;最重的东西，其实是书。&lt;/p&gt;

&lt;p&gt;有些书，翻出来的时候还能清楚的记得当时将它保留下来时的心理活动，例如这本《射频模拟电路》，毕业前邮寄物品的时候，内心挣扎着：张玉兴老师的这本书写的这么好，一定要保留下来，以后还要好好学学。真实情况是，当时我就知道以后不会从事电子方面的工作，而且，我并不是真的喜欢学射频，学的也不好，张玉兴老师究竟有多牛，我也不知道。那为什么我觉得它好呢？恐怕真实原因是大家都说它好吧。同样类型的书，还有《电路基础》、《模拟电路》等等。&lt;/p&gt;

&lt;p&gt;于是没有怎么犹豫，就把这类书都扔了。&lt;/p&gt;

&lt;p&gt;有些书，翻出来后能仍然觉得它真的是好。这种感觉一定是自己曾经亲身感受到的。例如，奥本海姆的《信号与系统》，是我本科时候遇到最好的一本教材了。很庆幸，当时老师给我们推荐了这本教材，而不是那些国内大学编纂的其他版本。那些各色版本的《信号与系统》，基本就是各类公式的推导和罗列（甚至大部分连推导都没有），这类书也不是一无是处，它们其实本质上都是为考试服务的，所以，靠前用这类书突击一下准没错，考完试后就扔掉吧。而奥本海姆版的，公式是在不知不觉中给你推导出来的，等你看到公式的部分时，你早就明白它的历史由来和应用场景了。&lt;/p&gt;

&lt;p&gt;这本书还见证了我和我过去的女友，现在的妻子的一段美好时光。当时我读研一，她大四备考我所在学校的研究生，《信号与系统》是初试指定专业课之一。我跟她说，不要看别的书了，现在时间还够，好好把奥本海姆的版本研读一遍吧，然后把这本书给她邮寄过去了，哦，对了，当时还是异地恋。由于这本书我是认真看了的，上面都保留着我的笔记和一些随手写的心得，所以她看的时候得心应手，有时候还在我做的批注下面进行二次批注。后来她考上了，这本书也依然保留下来了。同样类型的书，还有《小王子》等。&lt;/p&gt;

&lt;p&gt;毫不犹豫，这类书依然会保留。&lt;/p&gt;

&lt;p&gt;总体上来说，小部分优秀的引进的或者自己认真研读过的教材、一些软件开发经典书籍和感兴趣的人文类的书会留下来，大部分书都扔掉了。&lt;/p&gt;

&lt;p&gt;毕业前的一段时间，通往食堂的路的两边，都是毕业生们待售的教材和各种课外书。路过的时候隔三差五会想，这本书怎么也要卖掉啊？现在想到当时的心理活动，我很脸红。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>不规范的 Nginx 开发</title>
      <link>https://pureage.info/2015/11/11/non-standard-nginx-programming.html</link>
      <pubDate>Wed, 11 Nov 2015 09:55:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/11/11/non-standard-nginx-programming.html</guid>
      
        <description>&lt;p&gt;最近这一年多， 见识过很多基于 Nginx 开发的项目， 在这个过程中也遇到了几个很常见的不规范的做法。&lt;/p&gt;

&lt;h2 id=&#34;离主分支过远&#34;&gt;离主分支过远&lt;/h2&gt;

&lt;p&gt;Nginx 是一个很有生命力的项目， 不断的在开发一些新的特性， 基于这种项目开发的项目，从一开始就要想到版本同步升级的问题。&lt;/p&gt;

&lt;p&gt;Nginx 本身提供了强大的模块开发机制， 在做自己的业务开发时， 应该尽可能用模块去解决， 而不要乱动 Nginx 核心代码。其实， 如果不是业务场景特殊， 或者对性能有更苛刻的要求， 开发者都不应该去修改核心代码。 如果实在到了不动核心代码不行或者解决方案非常憋屈的时候， 也应该尽量先做好同步升级的方案， 比如经常不定期合入主干代码等。 连开发阵容强大的 Tengine, 都会跟进 Nginx 的更新， 你有什么理由不这样做呢。&lt;/p&gt;

&lt;p&gt;这不， 我就见过一个基于 Nginx 的某个上古版本(0.7.x)开发的系统， 随着业务的积累， 已经将 Nginx 原始代码改的不像样子了， 甚至连基础的进程架构都改了。 但业务需求越来越多， 这种方式明显跟不上节奏了， 一方面是新特性用不了， 另一方面是过多的改动导致潜在的 bug 很多。直到现在不得不痛下决心， 彻底更新 Nginx 版本， 去掉之前的那些核心改动。 虽然比较痛苦， 但方向是对的。当业界都在利用 Openresty 这一利器， 用 lua 开心的写着业务逻辑， 你还在一行一行的用 c 来写业务， 这项目怎么能维护得下去。&lt;/p&gt;

&lt;p&gt;提到 Openresty, 不得不赞叹章宜春的版本策略。首先 Openresty 是一个bundle，其核心是 ngx_lua 模块， 这个模块本身是不会依赖对 Nginx 核心的改动。 而且 Openresty 跟进 Nginx 版本的速度也很快， 当前 Openresty 的 release 已经到 Nginx-1.9.3 了。&lt;/p&gt;

&lt;h2 id=&#34;真的是一定要动核心吗&#34;&gt;真的是一定要动核心吗？&lt;/h2&gt;

&lt;p&gt;事实上，并不是。 很多时候， 所谓 “不得不” 进行的对核心的修改， 只是因为开发者对 Nginx 本身理解的不够透彻。&lt;/p&gt;

&lt;p&gt;例如， 一个简单的场景： 一个模块 A 需要为当前请求生成几个内部变量， 既然是与当前请求相关的， 很自然的会想到在 ngx_http_request_s 结构体里增加一个成员。 可是， Nginx 已经提供了请求上下文的的 ctx 机制了， 使用起来干净、简单。&lt;/p&gt;

&lt;p&gt;再例如， Nginx 的各模块之间本应互相独立的。 但出于代码复用等目的， 实际项目里会出现模块之间互相依赖的情况。 比方说， A 模块固定完成一个功能， 所有其他的业务模块， 都去操作当前请求的对应 A 模块的上下文 ctx， 而 A 模块只去根据 ctx 做相应的处理。 这种做法看上去很精明， 却毫不优雅。 导致了模块之间的耦合， 编译 B 模块就必须把 A 模块一起编译进来。 其实深入思考一下， 这些都可以用很好的方式来实现。&lt;/p&gt;

&lt;h2 id=&#34;末尾&#34;&gt;末尾&lt;/h2&gt;

&lt;p&gt;这篇文章似乎是在吐槽一些开发者， 但实际不是得。 从公司的角度， 不管使用什么办法， 能撑起业务来， 就是英雄， 相应的， 开发周期的制定里， 并不会去给那么多时间让开发者去透彻理解一个系统后再开始开发。&lt;/p&gt;

&lt;p&gt;所以，当我们看到这些 “老旧” 的系统， 虽然他们可能很难维护， 但我们还是应该对当初开发的人持有敬意。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>跑步近况-准备广州马拉松</title>
      <link>https://pureage.info/2015/10/23/preparing-for-guangzhou-marason.html</link>
      <pubDate>Fri, 23 Oct 2015 15:23:06 +0000</pubDate>
      
      <guid>https://pureage.info/2015/10/23/preparing-for-guangzhou-marason.html</guid>
      
        <description>&lt;p&gt;最近这几周，具体是九月的一整月和十月初，都没怎么跑步。客观原因主要有两个：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我换工作了&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我结婚了
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于跑步的好消息也有一个，那就是报名十二月份的广州马拉松，中签了。广马麻烦的地方有两个：&lt;br /&gt;
1. 需要抽签&lt;br /&gt;
2. 报名有资格要求：必须有以往参加过马拉松比赛的经历&lt;/p&gt;

&lt;p&gt;第一个条件很正常， 很多有名气的马拉松都是要抽签的，因为人满为患嘛。第二个条件却引起骂声一片，因为涉及到鸡生蛋还是蛋生鸡的问题，很多广州本地人，就想在自己的城市参加第一次马拉松，却没有资格。&lt;/p&gt;

&lt;p&gt;而我，由于今年三月份已经参加了一次清远的半马，再加上抽签时的一点运气，就成功报上名了。&lt;/p&gt;

&lt;p&gt;报名成功后的感受， 已经远不如年初报名清远马拉松时那么激动了。一切都是理所当然，顺理成章。即使广州报名失败， 也会转而去报名深圳的。 刚好今年深圳和广州在同一天举办马拉松。&lt;/p&gt;

&lt;p&gt;平淡归平淡，训练还是要的。&lt;/p&gt;

&lt;p&gt;于是，本周开始了正式的准备工作。我上班的地方早上在高峰期坐公交车大概需要 50 分钟， 晚上不堵车也要四十分钟。如果每天这样上下班，留给跑步的时间就很少了。某天我突发奇想，要不就晚上下班时跑回家算了。于是，这条下班的路就成了我的固定跑步路线。&lt;/p&gt;

&lt;p&gt;经过两次测试，发现跑步下班居然跟坐公交车的时间差不多，当然，跑步的路线是经过优化的。&lt;/p&gt;

&lt;p&gt;重新开始跑步的感觉真好。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>我们来拍拍肩吧，《百元之恋》观后感</title>
      <link>https://pureage.info/2015/08/12/baiyuanzhilian.html</link>
      <pubDate>Wed, 12 Aug 2015 12:56:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/08/12/baiyuanzhilian.html</guid>
      
        <description>&lt;p&gt;《百元之恋》讲述了迷茫、堕落的一子，在经历各种屈辱、挫折之后，选择学习拳击的故事。&lt;/p&gt;

&lt;p&gt;豆瓣对该电影的类型归纳为“剧情、喜剧、运动”，说是剧情和运动片无可厚非，但喜剧二字却让人啼笑皆非。电影前大半段都是弥漫着压抑、颓废甚至绝望的气氛，最后小半段转向奋进、激昂。跟喜剧八竿子打不着。&lt;/p&gt;

&lt;p&gt;女性、拳击、失败，这些关键词不由让人们想到伊斯特伍德的《百万美元宝贝》，珠玉在前，其实这部电影想拍的出彩，还是挺难的。但看完电影之后，不得不说，它做到了。&lt;/p&gt;

&lt;p&gt;那么，它吸引人的地方在哪里呢？我认为主要在于两个字，真实。&lt;/p&gt;

&lt;p&gt;因为真实，所以能让观众产生很强的共鸣。&lt;/p&gt;

&lt;p&gt;当一子在半夜骑着辆在路边顺来的自行车去超市时，我想到了，曾经有段时间我在床上一躺躺一整天，晚上饿的要晕了，晃晃悠悠爬起来去学校超市买东西吃。在昏黄的路灯下，没有什么比行尸走肉这个词更贴切了。&lt;/p&gt;

&lt;p&gt;当一子在家里和妹妹在地上扭打在一起的时候，我想到了，曾经有段时间，因为种种原因，我异常暴躁，面对女友和家人，火气一触即发，自己还特别痛苦。王小波说，“人的一切痛苦，本质都是对自己无能的愤怒”。是的，那段时间，确实对很多事情挺无能的。&lt;/p&gt;

&lt;p&gt;当一子刚在超市工作，力不从心的时候，我想到了，我刚工作时其实也是这样。手足无措，疲于奔命。&lt;/p&gt;

&lt;p&gt;还有很多，我想很多人都或多或少能从中找到自己之前或现在的一点影子。&lt;/p&gt;

&lt;p&gt;这样的颓废伴着时而响起的布鲁斯口琴，持续了一大半的时间，如果观众没有从中找到点共鸣，或者没有耐心，早就看不下去了。但当最后女主开始专心训练的时候，节奏忽而转快，像换了一部电影。此前积攒了这么久的情绪，就像被压到底的弹簧一下子被释放出来，怎一个燃字了得。最后当一子踏上拳台的时候，那几个特写让人很难相信，这还是之前那个弱鸡姑娘吗？&lt;/p&gt;

&lt;p&gt;最终比赛还是输了，尽管一子是那么想赢。她没忘记自己学拳的初衷：奋力的搏斗，结束后互相拍拍肩。片尾，她伤心的痛哭，自己是那么的想赢，哪怕只赢一次也好啊。但是所有人其实都知道，她其实已经赢了。在她向这狗屎一样的生活奋力挥出一拳时，她就赢了。&lt;/p&gt;

&lt;p&gt;影片看完后，我在想，为什么一子在三十二岁左右的时候，会如此颓废？为什么一个拳击就能这么大的改变她？我自己给出的答案是，活着的感觉。通过拳击，她找到了之前没有的活着的感觉。哪怕后面的生活，她依然会一次次的被击倒，但她已经知道该怎么做了，那就是“奋力搏斗，最后互相拍拍肩”。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>nginx proxy_cache与etag配合的问题</title>
      <link>https://pureage.info/2015/06/25/nginx-proxy-cache-and-etag.html</link>
      <pubDate>Thu, 25 Jun 2015 13:07:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/06/25/nginx-proxy-cache-and-etag.html</guid>
      
        <description>&lt;p&gt;&lt;strong&gt;首先谈谈遇到的问题:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个Nginx架在一个后端服务的前面，Nginx proxy_pass到它并开启proxy_cache,假设这个后端服务总是会吐Etag响应头。
在应用中，我们发现当nginx 的proxy_cache成功将后端的页面cache住时,浏览器多次对该页面发起请求，会命中nginx的cache,但即使浏览器请求带了If-None-Match请求头，nginx却不会响应304，而是响应200.&lt;br /&gt;
这样带来的问题是，即使nginx的cache将请求阻挡在后端应用之外，但是:&lt;br /&gt;
（1）命中后每次响应200导致我们nginx所在的服务器和客户浏览器双方都有流量损耗&lt;br /&gt;
（2）更重要的是增长了我们的服务响应时间。因为，如果是304的话，nginx不需要向浏览器吐数据，只用告诉浏览器用本地的缓存就好了。&lt;/p&gt;

&lt;p&gt;排查过程涉及个版本的测试和代码比对，这里就省略了，下面说下结论:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一. nginx-1.7.3之前的版本:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nginx很早就支持etag，但是nginx-1.7.3之前不支持弱etag。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;nginx-1.7.3之前版本在proxy_cache时，会有上面提到的问题。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;之所以会遇到上面的问题，是因为nginx里面有很多filter模块，比如ssl,xsl,gzip等等，这些filter模块本质上算是对响应做出了修改。所以，Nginx为了严格遵循etag的本意，这种情况下就认为etag应该失效。而早期版本又不支持弱etag验证，所以干脆就不承认etag，每次都返回200,而不是304.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;二.nginx-1.7.3及其之后的版本:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先我们看看nginx-1.7.3的changelog：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Changes with nginx 1.7.3                                         08 Jul 2014&lt;br /&gt;
   *) Feature: weak entity tags are now preserved on response&lt;br /&gt;
      modifications, and strong ones are changed to weak.&lt;br /&gt;
   *) Feature: cache revalidation now uses If-None-Match header if&lt;br /&gt;
      possible.&lt;br /&gt;
   *) Feature: the &amp;ldquo;ssl_password_file&amp;rdquo; directive.&lt;br /&gt;
   *) Bugfix: the If-None-Match request header line was ignored if there&lt;br /&gt;
      was no Last-Modified header in a response returned from cache.&lt;br /&gt;
   *) Bugfix: &amp;ldquo;peer closed connection in SSL handshake&amp;rdquo; messages were&lt;br /&gt;
      logged at &amp;ldquo;info&amp;rdquo; level instead of &amp;ldquo;error&amp;rdquo; while connecting to&lt;br /&gt;
      backends.&lt;br /&gt;
   *) Bugfix: in the ngx_http_dav_module module in nginx/Windows.&lt;br /&gt;
   *) Bugfix: SPDY connections might be closed prematurely if caching was&lt;br /&gt;
      used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;可以看到，主要有两点：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;增加了弱etag检验功能：对于那些修改了响应的filter模块，nginx启用弱etag检验。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;cache住的文件，其验证会优先采用If-None-Match校验，即Etag校验。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么，在nginx-1.7.3及其以后的版本，其Etag功能可以描述如下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Etag功能得到增强，既有强Etag，又有弱Etag.其实，但是所谓的强弱，只是为了遵循标准而分出来的两种说法而已。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对于Nginx本地的静态文件，是强Etag验证。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对于Nginx本地的非静态内容，不做Etag验证。这里可以用nginx-lua模块ngx.say来简单验证。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对于proxy_cache缓存住的文件,无论该文件是后端的静态文件，或是后端动态产生的页面，只要后端吐出了Etag响应头，则Nginx对客户端过来的请求，都会启动Etag校验。即，第一次请求，Nginx会将后端吐出的Etag头传给客户端，客户端后面再请求时，会带上 If-None-Match请求头，如果校验通过，会直接返回304.（这就解决了我们的问题)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;注意，上面这一点又可以分为两种情况，第一种是如果Nginx在将cache住的内容吐给浏览器时，如果Nginx不启用filter模块来修改响应，则Etag的强弱跟后端传过来的相同。第二种情况，如果Nginx在将cache住的内容吐给浏览器时，如果启用了filter模块，即响应头或体被修改，那么Nginx会将后端的强Etag转换为弱Etag.例如：如果后端本来返回的Etag为ETag: &amp;ldquo;12345&amp;rdquo;,则Nginx会将其弱化，吐给浏览器，即改为Etag: W/&amp;ldquo;12345&amp;rdquo;, 浏览器下次请求的If-None-Match请求头也变为If-None-Match: W/&amp;ldquo;12345&amp;rdquo;。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>Nginx中的进程间通信</title>
      <link>https://pureage.info/2015/03/28/ipc-of-nginx.html</link>
      <pubDate>Sat, 28 Mar 2015 12:39:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/03/28/ipc-of-nginx.html</guid>
      
        <description>&lt;p&gt;我们知道,Linux提供了多种进程间传递消息的方式，比如共享内存、套接字、管道、消息队列、信号等，每种方式都各有特点，各有优缺点。其中Nginx主要使用了其中的三种方式:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;套接字（匿名套接字对）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;共享内存&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;信号&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文主要结合代码讲一下前两种方式，匿名套接字对和共享内存在Nginx中的使用。&lt;/p&gt;

&lt;h2 id=&#34;1-nginx中的channel通信机制&#34;&gt;1. Nginx中的channel通信机制&lt;/h2&gt;

&lt;h3 id=&#34;1-1概述&#34;&gt;1.1概述&lt;/h3&gt;

&lt;p&gt;首先简单的说一下Nginx中channel通信的机制。&lt;/p&gt;

&lt;p&gt;Nginx中的channel通信，本质上是多个进程之间,利用匿名套接字(socketpair)对来进行通信。&lt;/p&gt;

&lt;p&gt;我们知道,socketpair可以创建出一对套接字,在这两个套接字的任何一个上面进行写操作,在另一个套接字上就可以相应的进行读操作,而且这个管道是全双工的。&lt;/p&gt;

&lt;p&gt;那么,当父进程在调用了socketpair创建出一对匿名套接字对(A1,B1)后,fork出一个子进程,那么此时子进程也继承了这一对套接字对(A2,B2)。在这个基础上,父子进程即可进行通信了。例如,父进程对A1进行写操作,子进程可通过B2进行相应的读操作;子进程对B2进行写操作,父进程可以通过A1来进行相应的读操作等等。&lt;/p&gt;

&lt;p&gt;我们假设,父进程依次fork了N个子进程,在每次fork之前,均如前所述调用了socketpair建立起一个匿名套接字对,这样,父进程与各个子进程之间即可通过各自的套接字对来进行通信。&lt;/p&gt;

&lt;p&gt;但是各子进程之间能否使用匿名套接字对来进行通信呢？&lt;/p&gt;

&lt;p&gt;我们假设父进程A中,它与子进程B之间的匿名套接字对为AB[2],它与子进程C之间的匿名套接字对为AC[2]。且进程B在进程C之前被fork出来。&lt;/p&gt;

&lt;p&gt;对进程B而言，当它被fork出来后，它就继承了父进程创建的套接字对,命名为BA[2],这样父进程通过操作AB[2]，子进程B通过操作BA[2],即可实现父子进程之间的通信。&lt;/p&gt;

&lt;p&gt;对进程C而言,当它被fork出来后，他就继承了父进程穿件的套接字对，命名为CA[2],这样父进程通过操作AC[2]，子进程C通过操作CA[2]，即可实现父子进程之间的通信。&lt;/p&gt;

&lt;p&gt;但B和C有一点不同。由于B进程在C之前被fork，B进程无法从父进程中继承到父进程与C进程之间的匿名套接字对,而C进程在后面被fork出来，它却从父进程处继承到了父进程与子进程B之间的匿名套接字对。&lt;/p&gt;

&lt;p&gt;这样，之后被fork出来的进程C,可以通过它从父进程那里继承到的与B进程相关联的匿名套接字对来向进程B发送消息，但进程B却无法向进程C发送消息。&lt;/p&gt;

&lt;p&gt;当子进程数量比较多时，就会造成这样的情况：即后面的进程拥有前面每一个子进程的一个匿名套接字，但前面的进程则没有后面任何一个子进程的匿名套接字。&lt;/p&gt;

&lt;p&gt;那么这个问题该如何解决呢？这就涉及到进程间传递文件描述符这个话题了。可以参考这里:&lt;a href=&#34;http://pureage.info/2015/03/19/passing-file-descriptors.html&#34;&gt;进程之间传递文件描述符&lt;/a&gt;。一个子进程被fork出来后，它可以依次向它之前被fork出来的所有子进程传递自己的描述符（匿名套接字对中的一个)。&lt;/p&gt;

&lt;p&gt;通过这种机制,子进程之间也可以进行通信了。&lt;/p&gt;

&lt;p&gt;Nginx中也就是这么做的。&lt;/p&gt;

&lt;h3 id=&#34;1-2-nginx中的具体实现&#34;&gt;1.2 Nginx中的具体实现&lt;/h3&gt;

&lt;p&gt;在ngx_process.c中，定义了一个全局的数组ngx_processes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngx_process_t    ngx_processes\[NGX\_MAX\_PROCESSES\];  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中,ngx_process_t类型定义为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct {
    ngx_pid_t           pid;  
    int                 status;  
    ngx_socket_t        channel\[2\];  

    ngx_spawn_proc_pt   proc;  
    void               *data;  
    char               *name;  
  
    unsigned            respawn:1;  
    unsigned            just_spawn:1;  
    unsigned            detached:1;  
    unsigned            exiting:1;  
    unsigned            exited:1;  
} ngx_process_t;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里,我们只关心成员channel成员，这个两元素的数组即用来存放一个匿名套接字对。&lt;/p&gt;

&lt;p&gt;我们假设程序运行后，有1个master进程和4个worker进程。那么，对这5个进程而言，每个进程都有一个4元素的数组ngx_processes[4]，数组中每个元素都是一个ngx_process_t类型的结构体，包含了相应的某个worker进程的相关信息。我们这里关心的是每个结构体的channel数组成员。&lt;/p&gt;

&lt;p&gt;绘制成表如下:&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/ipc-4.jpg&#34; alt=&#34;ipc-4.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上表的每一列表示每个进程的ngx_processes数组的各个元素的channel成员。&lt;/p&gt;

&lt;p&gt;其中，master进程列中的每一个元素，表示master进程与对应的每个worker进程之间的匿名套接字对。&lt;/p&gt;

&lt;p&gt;而每一个worker进程列中的每一个元素，表示该worker进程与对应的每个worker进程之间的匿名套接字对。当然这只是一个粗略的说法，与真实情况并不完全相符，还有很多细节需要进一步阐述。&lt;/p&gt;

&lt;p&gt;我们直接借助《深入剖析Nginx》，直接看下图的实例:&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/ipc-5.jpg&#34; alt=&#34;ipc-5.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;再次感谢《深入剖析Nginx》的作者高群凯，觉得在这里我没法表达的比他更好了。所以下面会引用很多该书中的内容。&lt;/p&gt;

&lt;p&gt;在上表中，每一个单元格的内容分别表示channel[ 0 ]和channel[ 1 ]的值，-1表示这之前是描述符，但在之后被主动close()掉了，0表示这一直都无对应的描述符，其他数字表示对应的描述符值。&lt;/p&gt;

&lt;p&gt;每一列数据都表示该列所对应进程与其他进程进行通信的描述符，如果当前列所对应进程为父进程，那么它与其它进程进行通信的描述符都为channel[ 0 ](其实channel[ 1 ]也可以)；如果当前列所对应的进程为子进程，那么它与父进程进行通信的描述符为channel[ 1 ]（注：这里书中说的太简略，应该为如果当前列所对应的进程为子进程，那么它与父进程进行通信的描述符为该进程的ngx_processes数组中，与本进程对应的元素中的channel[ 1 ]，在图中即为标粗的对角线部分，即[-1,7],[-1,9],[-1,11],[-1,13]这四对），与其它子进程进行通信的描述符都为本进程的ngx_processes数组中与该其它进程对应元素的channel[ 0 ]。&lt;/p&gt;

&lt;p&gt;比如，[3,7]单元格表示，如果父进程向worker0发送消息，需要使用channel[ 0 ]，即描述符3，实际上channel[ 1 ]也可以，它的channel[ 1 ]为7，没有被close()关闭掉，但一直也没有被使用，所以没有影响，不过按道理应该关闭才是。&lt;/p&gt;

&lt;p&gt;再比如，[-1,7]单元格表示如果worker0向master进程发送消息，需要使用channel[ 1 ]，即描述符7，它的channel[ 0 ]为-1，表示已经close()关闭掉了（Nginx某些地方调用close()时并没有设置对应变量为-1，这里只是为了更好的说明，将已经close()掉的描述符全部标记为-1）。&lt;/p&gt;

&lt;p&gt;越是后生成的worker进程，其ngx_processes数组的元素中，channel[ 0 ]与父进程对应的ngx_processes数组的元素中的channel[ 0 ]值相同的越多，因为基本都是继承而来，但前面生成的worker进程，其channel[ 0 ]是通过进程间调用sendmsg传递获得的，所以与父进程对应的channel[ 0 ]不一定相等。比如，如果worker0向worker3发送消息，需要使用worker0进程的ngx_processes[ 3 ]元素的channel[ 0 ],即描述符10，而对应master进程的ngx_processes[ 3 ]元素的channel[ 0 ]却是12。虽然它们在各自进程里表现为不同的整型数字，但在内核里表示同一个描述符结构，即不管是worker0往描述符10写数据，还是master往描述符12写数据，worker3都能通过描述符13正确读取到这些数据，至于worker3怎么识别它读到的数据是来自worker0，还是master，就得靠其他收到的数据特征，比如pid，来做标记区分。&lt;/p&gt;

&lt;p&gt;关于上段讲的，一个子进程如何区分接收到的数据是来自哪一个进程，我们可以看一下Nginx-1.6.2中的一段代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngx_int_t  
ngx_write_channel(ngx_socket_t s, ngx_channel_t *ch, size_t size,  
    ngx_log_t *log)  
{  
    ssize_t             n;  
    ngx_err_t           err;  
    struct iovec        iov[1];  
    struct msghdr       msg;  
  
#if (NGX_HAVE_MSGHDR_MSG_CONTROL)  
  
    union {  
        struct cmsghdr  cm;  
        char            space[CMSG_SPACE(sizeof(int))];  
    } cmsg;  
  
    if (ch-&amp;gt;fd == -1) {  
        msg.msg_control = NULL;  
        msg.msg_controllen = 0;  
  
    } else {  
        msg.msg_control = (caddr_t) &amp;amp;cmsg;  
        msg.msg_controllen = sizeof(cmsg);  
  
        ngx_memzero(&amp;amp;cmsg, sizeof(cmsg));  
  
        cmsg.cm.cmsg_len = CMSG_LEN(sizeof(int));  
        cmsg.cm.cmsg_level = SOL_SOCKET;  
        cmsg.cm.cmsg_type = SCM_RIGHTS;  
  
        /*  
         * We have to use ngx_memcpy() instead of simple  
         *   *(int *) CMSG_DATA(&amp;amp;cmsg.cm) = ch-&amp;gt;fd;  
         * because some gcc 4.4 with -O2/3/s optimization issues the warning:  
         *   dereferencing type-punned pointer will break strict-aliasing rules  
         *  
         * Fortunately, gcc with -O1 compiles this ngx_memcpy()  
         * in the same simple assignment as in the code above  
         */  
  
        ngx_memcpy(CMSG_DATA(&amp;amp;cmsg.cm), &amp;amp;ch-&amp;gt;fd, sizeof(int));  
    }  
  
    msg.msg_flags = 0;  
  
#else  
  
    if (ch-&amp;gt;fd == -1) {  
        msg.msg_accrights = NULL;  
        msg.msg_accrightslen = 0;  
  
    } else {  
        msg.msg_accrights = (caddr_t) &amp;amp;ch-&amp;gt;fd;  
        msg.msg_accrightslen = sizeof(int);  
    }  
  
#endif  
  
    iov[0].iov_base = (char *) ch;  
    iov[0].iov_len = size;  
  
    msg.msg_name = NULL;  
    msg.msg_namelen = 0;  
    msg.msg_iov = iov;  
    msg.msg_iovlen = 1;  
  
    n = sendmsg(s, &amp;amp;msg, 0);  
  
    if (n == -1) {  
        err = ngx_errno;  
        if (err == NGX_EAGAIN) {  
            return NGX_AGAIN;  
        }  
  
        ngx_log_error(NGX_LOG_ALERT, log, err, &amp;quot;sendmsg() failed&amp;quot;);  
        return NGX_ERROR;  
    }  
  
    return NGX_OK;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在调用时，参数ch即为发送的数据部分，其类型定义如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct {  
     ngx_uint_t  command;  
     ngx_pid_t   pid;  
     ngx_int_t   slot;  
     ngx_fd_t    fd;  
} ngx_channel_t;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，其中就包含了发送方的pid。&lt;/p&gt;

&lt;p&gt;最后，就目前Nginx代码来看，子进程并没有往父进程发送任何消息，子进程之间也没有相互通信的逻辑。也许是因为Nginx有其他一些更好的进程通信方式，比如共享内存等，所以这种channel通信目前仅作为父进程往子进程发送消息使用。但由于有这个架构在，可以很轻松使用channel机制来完成各进程间的通信任务。&lt;/p&gt;

&lt;h3 id=&#34;1-3-nginx中的相关代码流程&#34;&gt;1.3 Nginx中的相关代码流程&lt;/h3&gt;

&lt;p&gt;下面，将上面所讲的内容，在Nginx代码中的流程，大概梳理一遍。本文所有代码片段，均来自于nginx-1.6.2。&lt;/p&gt;

&lt;p&gt;首先是main函数调用ngx_master_process_cycle:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if (ngx_process == NGX_PROCESS_SINGLE) {  
        ngx_single_process_cycle(cycle);  
  
    } else {  
        ngx_master_process_cycle(cycle);  
    }  
  
    return 0;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ngx_master_process_cycle调用ngx_start_worker_processes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ccf = (ngx_core_conf_t *) ngx_get_conf(cycle-&amp;gt;conf_ctx, ngx_core_module);  
  
ngx_start_worker_processes(cycle, ccf-&amp;gt;worker_processes,  
                           NGX_PROCESS_RESPAWN);  
ngx_start_cache_manager_processes(cycle, 0);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在ngx_start_worker_processes函数中，完成对所有worker进程的fork操作:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void  
ngx_start_worker_processes(ngx_cycle_t *cycle, ngx_int_t n, ngx_int_t type)  
{  
    ngx_int_t      i;  
    ngx_channel_t  ch;  
  
    ngx_log_error(NGX_LOG_NOTICE, cycle-&amp;gt;log, 0, &amp;quot;start worker processes&amp;quot;);  
  
    ngx_memzero(&amp;amp;ch, sizeof(ngx_channel_t));  
  
    ch.command = NGX_CMD_OPEN_CHANNEL;  
  
    for (i = 0; i &amp;lt; n; i++) {  
  
        ngx_spawn_process(cycle, ngx_worker_process_cycle,  
                          (void *) (intptr_t) i, &amp;quot;worker process&amp;quot;, type);  
  
        ch.pid = ngx_processes[ngx_process_slot].pid;  
        ch.slot = ngx_process_slot;  
        ch.fd = ngx_processes[ngx_process_slot].channel[0];  
  
        ngx_pass_open_channel(cycle, &amp;amp;ch);  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述代码调用的ngx_spawn_process即完成具体的socketpair()操作和fork操作:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngx_pid_t  
ngx_spawn_process(ngx_cycle_t *cycle, ngx_spawn_proc_pt proc, void *data,  
     char *name, ngx_int_t respawn)  
{  
       ......  
       if (socketpair(AF_UNIX, SOCK_STREAM, 0, ngx_processes[s].channel) == -1)  
        {  
            ngx_log_error(NGX_LOG_ALERT, cycle-&amp;gt;log, ngx_errno,  
                          &amp;quot;socketpair() failed while spawning \&amp;quot;%s\&amp;quot;&amp;quot;, name);  
            return NGX_INVALID_PID;  
        }  
        ......  
        ngx_channel = ngx_processes[s].channel[1];  
        ......  
        ngx_process_slot = s;  
        pid = fork();  
        ......  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上一段代码中可以看到，master进程在调用socketpair后，将生成的channel[ 1 ]保存在全局变量ngx_channel中,ngx_channel全局变量的作用是，子进程中会使用该全局变量，并加入到自己的事件中，达到的效果即是子进程将channel[ 1 ]加入到自己的事件中。&lt;/p&gt;

&lt;p&gt;话分两头，我们先来具体看看子进程的流程。&lt;/p&gt;

&lt;p&gt;在主进程执行完fork之后，ngx_start_worker_processes会调用proc回调:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   pid = fork();  
  
    switch (pid) {  
  
    case -1:  
        ngx_log_error(NGX_LOG_ALERT, cycle-&amp;gt;log, ngx_errno,  
                      &amp;quot;fork() failed while spawning \&amp;quot;%s\&amp;quot;&amp;quot;, name);  
        ngx_close_channel(ngx_processes[s].channel, cycle-&amp;gt;log);  
        return NGX_INVALID_PID;  
  
    case 0:  
        ngx_pid = ngx_getpid();  
        proc(cycle, data);  
        break;  
  
    default:  
        break;  
    }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中,proc即为ngx_worker_process_cycle。ngx_worker_process_cycle会调用ngx_worker_process_init函数，子进程将从父进程处继承到的channel[ 1 ]加入到自己的事件集中，就是在这个函数中完成的:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void  
ngx_worker_process_init(ngx_cycle_t *cycle, ngx_int_t worker)  
{  
......  
   for (n = 0; n &amp;lt; ngx_last_process; n++) {  
  
        if (ngx_processes[n].pid == -1) {  
            continue;  
        }  
  
        if (n == ngx_process_slot) {  
            continue;  
        }  
  
        if (ngx_processes[n].channel[1] == -1) {  
            continue;  
        }  
  
        if (close(ngx_processes[n].channel[1]) == -1) {  
            ngx_log_error(NGX_LOG_ALERT, cycle-&amp;gt;log, ngx_errno,  
                          &amp;quot;close() channel failed&amp;quot;);  
        }  
    }  
  
    if (close(ngx_processes[ngx_process_slot].channel[0]) == -1) {  
        ngx_log_error(NGX_LOG_ALERT, cycle-&amp;gt;log, ngx_errno,  
                      &amp;quot;close() channel failed&amp;quot;);  
    }  
  
#if 0  
    ngx_last_process = 0;  
#endif  
  
    if (ngx_add_channel_event(cycle, ngx_channel, NGX_READ_EVENT,  
                              ngx_channel_handler)  
        == NGX_ERROR)  
    {  
        /* fatal */  
        exit(2);  
    }  
......  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体的将channel[ 1 ]添加到事件集中的操作，是由ngx_add_channel_event来完成的，对应的回调处理函数为ngx_channel_handler,同时我们看到，在添加之前，还进行了很多close的工作，这就于之前的示例表里，那些描述符为-1的表项相对应了。&lt;/p&gt;

&lt;p&gt;此时，子进程已经将从父进程那里继承来的channel[ 1 ]加入到了自己的监听事件集中，这样，一个子进程从自己的ngx_processses数组中，对应自己的那一个元素中的channel[ 1 ]中，即可读取来自其他进程的消息。收到消息时，将执行设置好的回调函数ngx_channel_handler，把接收到的新子进程的相关信息存储在自己的全局变量ngx_processes数组内。见下面的代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void  
ngx_channel_handler(ngx_event_t *ev)  
{  
    ......  
          case NGX_CMD_OPEN_CHANNEL:  
  
            ngx_log_debug3(NGX_LOG_DEBUG_CORE, ev-&amp;gt;log, 0,  
                           &amp;quot;get channel s:%i pid:%P fd:%d&amp;quot;,  
                           ch.slot, ch.pid, ch.fd);  
  
            ngx_processes[ch.slot].pid = ch.pid;  
            ngx_processes[ch.slot].channel[0] = ch.fd;  
            break;  
    ......  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们再回到父进程中。&lt;/p&gt;

&lt;p&gt;父进程在从ngx_spawn_process返回后，回来继续执行ngx_start_worker_processes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void  
ngx_start_worker_processes(ngx_cycle_t *cycle, ngx_int_t n, ngx_int_t type)  
{  
    ngx_int_t      i;  
    ngx_channel_t  ch;  
  
    ngx_log_error(NGX_LOG_NOTICE, cycle-&amp;gt;log, 0, &amp;quot;start worker processes&amp;quot;);  
  
    ngx_memzero(&amp;amp;ch, sizeof(ngx_channel_t));  
  
    ch.command = NGX_CMD_OPEN_CHANNEL;  
  
    for (i = 0; i &amp;lt; n; i++) {  
  
        ngx_spawn_process(cycle, ngx_worker_process_cycle,  
                          (void *) (intptr_t) i, &amp;quot;worker process&amp;quot;, type);  
  
        ch.pid = ngx_processes[ngx_process_slot].pid;  
        ch.slot = ngx_process_slot;  
        ch.fd = ngx_processes[ngx_process_slot].channel[0];  
  
        ngx_pass_open_channel(cycle, &amp;amp;ch);  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中的for循环即表示，父进程会把刚刚生成的子进程的channel[ 0 ],放在一条消息的内容中发送给之前生成的子进程。消息的格式定义为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct {  
     ngx_uint_t  command;  
     ngx_pid_t   pid;  
     ngx_int_t   slot;  
     ngx_fd_t    fd;  
} ngx_channel_t;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们看下ngx_pass_open_channel函数:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void  
ngx_pass_open_channel(ngx_cycle_t *cycle, ngx_channel_t *ch)  
{  
    ngx_int_t  i;  
  
    for (i = 0; i &amp;lt; ngx_last_process; i++) {  
  
        if (i == ngx_process_slot  
            || ngx_processes[i].pid == -1  
            || ngx_processes[i].channel[0] == -1)  
        {  
            continue;  
        }  
  
        ngx_log_debug6(NGX_LOG_DEBUG_CORE, cycle-&amp;gt;log, 0,  
                      &amp;quot;pass channel s:%d pid:%P fd:%d to s:%i pid:%P fd:%d&amp;quot;,  
                      ch-&amp;gt;slot, ch-&amp;gt;pid, ch-&amp;gt;fd,  
                      i, ngx_processes[i].pid,  
                      ngx_processes[i].channel[0]);  
  
        /* TODO: NGX_AGAIN */  
  
        ngx_write_channel(ngx_processes[i].channel[0],  
                          ch, sizeof(ngx_channel_t), cycle-&amp;gt;log);  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从该函数定义中，可以很清晰的看到“往之前生成的每个进程发送消息”。对之前的每个子进程，具体消息发送工作，是由函数ngx_write_channel完成的。&lt;/p&gt;

&lt;p&gt;ngx_write_channel函数的第一个参数是之前某个进程从master进程继承来的channel[ 0 ],第二个参数发送的内容。其中包含了当前进程的pid,slot号，command等信息，最重要的是，包含了当前子进程的channel[ 0 ]，其实是实现了一个简单的协议。注意，当前子进程的channel[ 0 ]虽然存在ngx_channel_t类型的消息体中，但真正文件描述符的传递操作，是ngx_write_channel通过发送控制信息来完成的。接收进程虽然在接收到的消息体中获得了发送进程的channel[ 0 ]这个值，但并不能直接使用，必须根据控制信息来获取一个新的文件描述符。参看&lt;a href=&#34;jin_cheng_jian_chuan_di_wen_jian_miao_shu_fu.md&#34;&gt;进程间传递文件描述符&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;至此，父子进程间的配合，使得所有的子进程均拥有了其他子进程的channel[ 0 ]，而另一方面，由于所有子进程的channel[ 1 ]已加入到自己的监听事件集，所以子进程之间的通信通道即被建立起来。&lt;/p&gt;

&lt;p&gt;值得一提的是，父进程在调用socketpair()产生一个匿名套接字对后，再fork出一个子进程，那么现在有4个文件描述符了。其实对这4个文件描述符中的任何一个进行写入，从其他3个描述符中的任何一个均可以进行读取操作。&lt;/p&gt;

&lt;p&gt;但Nginx通过一些close()操作,有意达到这样一种目的:&lt;br /&gt;
* 对任何一个子进程，其ngx_processes数组中，对应其它进程的元素,其channel[ 0 ]用来向该&amp;rdquo;其他进程&amp;rdquo;发送消息。&lt;br /&gt;
* 对任何一个子进程，其ngx_processes数组中，对应本进程的元素,其channel[ 1 ]用来接收来自其他进程的消息，这个其他进程既包括其他子进程，也包括master进程。至于如何区分是来自哪个进程，以及该消息是用来做什么的，则通过判断ngx_channel_t类型的消息的command,pid,slot等成员来协商。&lt;br /&gt;
* 对master进程, 其ngx_processes数组的中，对应相应子进程的元素的channel[ 0 ],用来向该子进程发送消息。注:其实channel[ 1 ]也可以，但按常理，master进程的ngx_processes数组所有元素的channel[ 1 ]应该关闭的。&lt;/p&gt;

&lt;h2 id=&#34;2-nginx中的共享内存&#34;&gt;2. Nginx中的共享内存&lt;/h2&gt;

&lt;h3 id=&#34;2-1-概述&#34;&gt;2.1 概述&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;共享内存是Linux下提供的最基本的进程间通信方法，它通过mmap或者shmget系统调用在内存中创建了一块连续的线性地址空间，而通过munmap或者shmdt系统调用可以释放这块内存。使用共享内存的好处是当多个进程使用同一块共享内存时，在任何一个进程修改了共享内存中的内容后，其他进程通过访问这段共享内存都能够得到修改后的内容。&lt;/p&gt;

&lt;p&gt;陶辉《深入理解Nginx》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;共享内存可以说是最有用的进程间通信方式，也是最快的IPC形式。两个不同进程A、B共享内存的意思是，同一块物理内存被映射到进程A、B各自的进程地址空间。进程A可以即时看到进程B对共享内存中数据的更新，反之亦然。由于多个进程共享同一块内存区域，必然需要某种同步机制，互斥锁和信号量都可以。&lt;/p&gt;

&lt;p&gt;采用共享内存通信的一个显而易见的好处是效率高，因为进程可以直接读写内存，而不需要任何数据的拷贝。对于像管道和消息队列等通信方式，则需要在内核和用户空间进行四次的数据拷贝，而共享内存则只拷贝两次数据：一次从输入文件到共享内存区，另一次从共享内存区到输出文件。实际上，进程之间在共享内存时，并不总是读写少量数据后就解除映射，有新的通信时，再重新建立共享内存区域。而是保持共享区域，直到通信完毕为止，这样，数据内容一直保存在共享内存中，并没有写回文件。共享内存中的内容往往是在解除映射时才写回文件的。因此，采用共享内存的通信方式效率是非常高的。&lt;/p&gt;

&lt;p&gt;Linux中，共享内存可以通过两个系统系统调用来获得，mmap和shmget，分别属于不同的标准，这不在本文的关注范围之内。mmap语义上比shmget更通用，因为它最一般的做法，是将一个打开的实体文件，映射到一段连续的内存中，各个进程可以根据各自的权限对该段内存进行相应的读写操作，其他进程则可以看到其他进程写入的结果。而shmget在语义上相当于是匿名的mmap，即不关注实体文件，直接在内存中开辟这块共享区域，mmap通过设置调用时的参数，也可达到这种效果，一种方法是映射/dev/zero设备,另一种是使用MAP_ANON选项。至于mmap和shmget的效率，跟不同的内核实现相关，不在本文关注范围内。&lt;/p&gt;

&lt;p&gt;除了上面的简单描述外，本文不打算仔细介绍mmap和shmget的使用。有如下相关资料可以参考:&lt;br /&gt;
1. &lt;a href=&#34;http://www.ibm.com/developerworks/cn/linux/l-ipc/part5/index1.html&#34;&gt;Linux环境进程间通信（五）: 共享内存（上）&lt;/a&gt;&lt;br /&gt;
2. &lt;a href=&#34;http://www.ibm.com/developerworks/cn/linux/l-ipc/part5/index2.html&#34;&gt;Linux环境进程间通信（五）: 共享内存（下）&lt;/a&gt;&lt;br /&gt;
3. APUE,14.8,15.9&lt;/p&gt;

&lt;h3 id=&#34;2-2-nginx中的实现&#34;&gt;2.2 Nginx中的实现&lt;/h3&gt;

&lt;p&gt;那么，在Nginx中，到底是选用mmap映射到/dev/null，还是使用MAP_ANON选项调用mmap，或者是使用shmget呢？看相关实现的代码就会一目了然:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*  
 * Copyright (C) Igor Sysoev  
 * Copyright (C) Nginx, Inc.  
 */  
  
  
#include &amp;lt;ngx_config.h&amp;gt;  
#include &amp;lt;ngx_core.h&amp;gt;  
  
  
#if (NGX_HAVE_MAP_ANON)  
  
ngx_int_t  
ngx_shm_alloc(ngx_shm_t *shm)  
{  
    shm-&amp;gt;addr = (u_char *) mmap(NULL, shm-&amp;gt;size,  
                                PROT_READ|PROT_WRITE,  
                                MAP_ANON|MAP_SHARED, -1, 0);  
  
    if (shm-&amp;gt;addr == MAP_FAILED) {  
        ngx_log_error(NGX_LOG_ALERT, shm-&amp;gt;log, ngx_errno,  
                      &amp;quot;mmap(MAP_ANON|MAP_SHARED, %uz) failed&amp;quot;, shm-&amp;gt;size);  
        return NGX_ERROR;  
    }  
  
    return NGX_OK;  
}  
  
  
void  
ngx_shm_free(ngx_shm_t *shm)  
{  
    if (munmap((void *) shm-&amp;gt;addr, shm-&amp;gt;size) == -1) {  
        ngx_log_error(NGX_LOG_ALERT, shm-&amp;gt;log, ngx_errno,  
                      &amp;quot;munmap(%p, %uz) failed&amp;quot;, shm-&amp;gt;addr, shm-&amp;gt;size);  
    }  
}  
  
#elif (NGX_HAVE_MAP_DEVZERO)  
  
ngx_int_t  
ngx_shm_alloc(ngx_shm_t *shm)  
{  
    ngx_fd_t  fd;  
  
    fd = open(&amp;quot;/dev/zero&amp;quot;, O_RDWR);  
  
    if (fd == -1) {  
        ngx_log_error(NGX_LOG_ALERT, shm-&amp;gt;log, ngx_errno,  
                      &amp;quot;open(\&amp;quot;/dev/zero\&amp;quot;) failed&amp;quot;);  
        return NGX_ERROR;  
    }  
  
    shm-&amp;gt;addr = (u_char *) mmap(NULL, shm-&amp;gt;size, PROT_READ|PROT_WRITE,  
                                MAP_SHARED, fd, 0);  
  
    if (shm-&amp;gt;addr == MAP_FAILED) {  
        ngx_log_error(NGX_LOG_ALERT, shm-&amp;gt;log, ngx_errno,  
                      &amp;quot;mmap(/dev/zero, MAP_SHARED, %uz) failed&amp;quot;, shm-&amp;gt;size);  
    }  
  
    if (close(fd) == -1) {  
        ngx_log_error(NGX_LOG_ALERT, shm-&amp;gt;log, ngx_errno,  
                      &amp;quot;close(\&amp;quot;/dev/zero\&amp;quot;) failed&amp;quot;);  
    }  
  
    return (shm-&amp;gt;addr == MAP_FAILED) ? NGX_ERROR : NGX_OK;  
}  
  
  
void  
ngx_shm_free(ngx_shm_t *shm)  
{  
    if (munmap((void *) shm-&amp;gt;addr, shm-&amp;gt;size) == -1) {  
        ngx_log_error(NGX_LOG_ALERT, shm-&amp;gt;log, ngx_errno,  
                      &amp;quot;munmap(%p, %uz) failed&amp;quot;, shm-&amp;gt;addr, shm-&amp;gt;size);  
    }  
}  
  
#elif (NGX_HAVE_SYSVSHM)  
  
#include &amp;lt;sys/ipc.h&amp;gt;  
#include &amp;lt;sys/shm.h&amp;gt;  
  
  
ngx_int_t  
ngx_shm_alloc(ngx_shm_t *shm)  
{  
    int  id;  
  
    id = shmget(IPC_PRIVATE, shm-&amp;gt;size, (SHM_R|SHM_W|IPC_CREAT));  
  
    if (id == -1) {  
        ngx_log_error(NGX_LOG_ALERT, shm-&amp;gt;log, ngx_errno,  
                      &amp;quot;shmget(%uz) failed&amp;quot;, shm-&amp;gt;size);  
        return NGX_ERROR;  
    }  
  
    ngx_log_debug1(NGX_LOG_DEBUG_CORE, shm-&amp;gt;log, 0, &amp;quot;shmget id: %d&amp;quot;, id);  
  
    shm-&amp;gt;addr = shmat(id, NULL, 0);  
  
    if (shm-&amp;gt;addr == (void *) -1) {  
        ngx_log_error(NGX_LOG_ALERT, shm-&amp;gt;log, ngx_errno, &amp;quot;shmat() failed&amp;quot;);  
    }  
  
    if (shmctl(id, IPC_RMID, NULL) == -1) {  
        ngx_log_error(NGX_LOG_ALERT, shm-&amp;gt;log, ngx_errno,  
                      &amp;quot;shmctl(IPC_RMID) failed&amp;quot;);  
    }  
  
    return (shm-&amp;gt;addr == (void *) -1) ? NGX_ERROR : NGX_OK;  
}  
  
  
void  
ngx_shm_free(ngx_shm_t *shm)  
{  
    if (shmdt(shm-&amp;gt;addr) == -1) {  
        ngx_log_error(NGX_LOG_ALERT, shm-&amp;gt;log, ngx_errno,  
                      &amp;quot;shmdt(%p) failed&amp;quot;, shm-&amp;gt;addr);  
    }  
}  
  
#endif  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码即是Nginx源代码中的src/os/unix/ngx_shemem.c的全部内容。可见，整个文件只是为了提供两个接口：ngx_shm_alloc和ngx_shm_free。而这两个接口的实现，按如下逻辑来决定:&lt;br /&gt;
1. 如果当前系统的mmap系统调用支持MAP_ANON选项，则使用带MAP_ANON选项的mmap。&lt;br /&gt;
2. 如果1不满足，则如果当前系统mmap系统调用支持映射/dev/zero设备，则使用mmap映射/dev/zero的方式来实现。&lt;br /&gt;
3. 如果上面1和2都不满足，且如果当前系统支持shmget系统调用的话，则使用该系统调用来实现。&lt;/p&gt;

&lt;p&gt;看到这里，也许大家就有疑问了，如果当前3个条件都不满足怎么办，那就没辙了，ngx_shm_alloc接口没有相应的定义，只能在链接的时候就不成功了。&lt;/p&gt;

&lt;p&gt;另外，关于上面三种情况的判断，都是通过相应的宏是否定义来进行的，而相应的宏的定义，是在auto/unix脚本中进行的，该脚本会写一端测试程序来判断相应的系统调用是否支持，如果支持，则在configure后自动生成的objs/ngx_auto_config.h文件中定义对应的宏。&lt;/p&gt;

&lt;h2 id=&#34;3-channel机制和共享内存在nginx中的使用情况&#34;&gt;3. channel机制和共享内存在Nginx中的使用情况&lt;/h2&gt;

&lt;p&gt;前面讲Nginx中的channel机制时提到，Nginx虽然提供了这种机制，但目前很少用到，而共享内存却相对用的比较多了。例如，为了统计Nginx总体的http请求处理情况，需要跨越多个worker来计算，Nginx自带的http模块ngx_http_stub_status_module即主要依赖共享内存的方式。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>进程间传递文件描述符</title>
      <link>https://pureage.info/2015/03/19/passing-file-descriptors.html</link>
      <pubDate>Thu, 19 Mar 2015 08:46:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/03/19/passing-file-descriptors.html</guid>
      
        <description>&lt;p&gt;首先，必须声明，“进程间传递文件描述符”这个说法是错误的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在处理文件时，内核空间和用户空间使用的主要对象是不同的。对用户程序来说，一个文件由一个文件描述符标识。该描述符是一个整数，在所有有关文件的操作中用作标识文件的参数。文件描述符是在打开文件时由内核分配，只在一个进程内部有效。两个不同进程可以使用同样的文件描述符，但二者并不指向同一个文件。基于同一个描述符来共享文件是不可能的。&lt;br /&gt;
《深入理解Linux内核架构》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里说的“进程间传递文件描述符”是指，A进程打开文件fileA,获得文件描述符为fdA,现在A进程要通过某种方法，根据fdA,使得另一个进程B,获得一个新的文件描述符fdB,这个fdB在进程B中的作用，跟fdA在进程A中的作用一样。即在fdB上的操作,即是对fileA的操作。&lt;/p&gt;

&lt;p&gt;这看似不可能的操作，是怎么进行的呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;答案是使用匿名Unix域套接字，即socketpair()和sendmsg/recvmsg来实现。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;关于socketpair&#34;&gt;关于socketpair&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;UNIX domain sockets provide both stream and datagram interfaces. The UNIX&lt;br /&gt;
domain datagram service is reliable, however. Messages are neither lost nor delivered&lt;br /&gt;
out of order. UNIX domain sockets are like a cross between sockets and pipes. You can
use the network-oriented socket interfaces with them, or you can use the socketpair&lt;br /&gt;
function to create a pair of unnamed, connected, UNIX domain sockets.&lt;/p&gt;

&lt;p&gt;APUE 3rd edition,17.2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;socketpair的原型为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;sys/types.h&amp;gt;  
#include &amp;lt;sys/socket.h&amp;gt;  
  
int socketpair(int d, int type, int protocol, int sv[2]);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;传入的参数sv为一个整型数组，有两个元素。当调用成功后，这个数组的两个元素即为2个文件描述符。&lt;/p&gt;

&lt;p&gt;一对连接起来的Unix匿名域套接字就建立起来了，它们就像一个全双工的管道，每一端都既可读也可写。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/ipc-1.jpg&#34; alt=&#34;ipc-1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;即，往sv[0]写入的数据，可以通过sv&lt;a href=&#34;https://pureage.info/img/ipc-1.jpg&#34;&gt;1&lt;/a&gt;读出来，往sv&lt;a href=&#34;https://pureage.info/img/ipc-1.jpg&#34;&gt;1&lt;/a&gt;写入的数据，也可以通过sv[0]读出来。&lt;/p&gt;

&lt;h2 id=&#34;关于sendmsg-recvmsg&#34;&gt;关于sendmsg/recvmsg&lt;/h2&gt;

&lt;p&gt;通过socket发送数据，主要有三组系统调用，分别是&lt;br /&gt;
1. send/recv(与write/read类似，面向连接的)&lt;br /&gt;
2. sendto/recvfrom(sendto与send的差别在于，sendto可以面向无连接,recvfrom与recv的区别是,recvfrom可以获取sender方的地址)&lt;br /&gt;
3. sendmsg/recvmsg. 通过sendmsg,可以用msghdr参数，来指定多个缓冲区来发送数据，与writev系统调用类似。&lt;/p&gt;

&lt;p&gt;sendmsg函数原型如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;sys/socket.h&amp;gt;  
ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，根据POSIX.1 msghdr的定义至少应该包含下面几个成员：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct msghdr {  
    void *msg_name; /* optional address */  
    socklen_t msg_namelen; /* address size in bytes */  
    struct iovec *msg_iov; /* array of I/O buffers */  
    int msg_iovlen; /* number of elements in array */  
    void *msg_control; /* ancillary data */  
    socklen_t msg_controllen; /* number of ancillary bytes */  
    int msg_flags; /* flags for received message */  
};  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Linux的manual page中，msghdr的定义为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct msghdr {  
    void         *msg_name;       /* optional address */  
    socklen_t     msg_namelen;    /* size of address */  
    struct iovec *msg_iov;        /* scatter/gather array */  
    size_t        msg_iovlen;     /* # elements in msg_iov */  
    void         *msg_control;    /* ancillary data, see below */  
    socklen_t     msg_controllen; /* ancillary data buffer len */  
    int           msg_flags;      /* flags on received message */  
};  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看Linux内核源代码(3.18.1)，可知msghdr的准确定义为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct msghdr {  
	void		*msg_name;	/* ptr to socket address structure */  
	int		msg_namelen;	/* size of socket address structure */  
	struct iovec	*msg_iov;	/* scatter/gather array */  
	__kernel_size_t	msg_iovlen;	/* # elements in msg_iov */  
	void		*msg_control;	/* ancillary data */  
	__kernel_size_t	msg_controllen;	/* ancillary data buffer length */  
	unsigned int	msg_flags;	/* flags on received message */  
};  
  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，与Manual paga中的描述一致。&lt;/p&gt;

&lt;p&gt;其中，前两个成员msg_name和msg_namelen是用来在发送datagram时，指定目的地址的。如果是面向连接的，这两个成员变量可以不用。&lt;/p&gt;

&lt;p&gt;接下来的两个成员,msg_iov和msg_iovlen，则是用来指定发送缓冲区数组的。其中，msg_iovlen是iovec类型的元素的个数。每一个缓冲区的起始地址和大小由iovec类型自包含，iovec的定义为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct iovec {  
    void *iov_base;   /* Starting address */  
    size_t iov_len;   /* Number of bytes */  
};  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;成员msg_flags用来描述接受到的消息的性质,由调用recvmsg时传入的flags参数设置。recvmsg的函数原型为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;sys/socket.h&amp;gt;  
ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与sendmsg相对应，recvmsg用msghdr结构指定多个缓冲区来存放读取到的结果。flags参数用来修改recvmsg的默认行为。传入的flags参数在调用完recvmsg后，会被设置到msg所指向的msghdr类型的msg_flags变量中。flags可以为如下值:&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/ipc-2.jpg&#34; alt=&#34;ipc-2.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;回来继续讲sendmsg和msghdr结构。&lt;/p&gt;

&lt;p&gt;msghdr结构中剩下的两个成员,msg_control和msg_contorllen,是用来发送或接收控制信息的。其中,msg_control指向一个cmsghdr的结构体,msg_controllen成员是控制信息所占用的字节数。&lt;/p&gt;

&lt;p&gt;注意,msg_controllen与前面的msg_iovlen不同,msg_iovlen是指的由成员msg_iov所指向的iovec型的数组的元素个数,而msg_controllen,则是所有控制信息所占用的总的字节数。&lt;/p&gt;

&lt;p&gt;其实,msg_control也可能是个数组,但msg_controllen并不是该cmsghdr类型的数组的元素的个数。在Manual page中,关于msg_controllen有这么一段描述:&lt;br /&gt;
&amp;gt;To create ancillary data, first initialize the msg_controllen member of the msghdr with the length of the control message buffer.  Use CMSG_FIRSTHDR() on the msghdr to get the first control  message  and CMSG_NEXTHDR  to  get  all  subsequent  ones.   In  each  control  message, initialize cmsg_len (with CMSG_LEN), the other cmsghdr header fields, and the  data  portion  using  CMSG_DATA.   Finally,  the msg_controllen  field of the msghdr should be set to the sum of the CMSG_SPACE() of the length of all control messages in the buffer.&lt;/p&gt;

&lt;p&gt;在Linux 的Manual page(man cmsg)中,cmsghdr的定义为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct cmsghdr {  
    socklen_t   cmsg_len;   /* data byte count, including header */  
    int         cmsg_level; /* originating protocol */  
    int         cmsg_type;  /* protocol-specific type */  
    /* followed by  unsigned char   cmsg_data[]; */  
};  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意,控制信息的数据部分,是直接存储在cmsg_type之后的。但中间可能有一些由于对齐产生的填充字节,由于这些填充数据的存在，对于这些控制数据的访问,必须使用Linux提供的一些专用宏来完成。这些宏包括如下几个:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;sys/socket.h&amp;gt;  
  
struct cmsghdr *CMSG_FIRSTHDR(struct msghdr *msgh);  
struct cmsghdr *CMSG_NXTHDR(struct msghdr *msgh, struct cmsghdr *cmsg);  
size_t CMSG_ALIGN(size_t length);  
size_t CMSG_SPACE(size_t length);  
size_t CMSG_LEN(size_t length);  
unsigned char *CMSG_DATA(struct cmsghdr *cmsg);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中:&lt;/p&gt;

&lt;p&gt;CMSG_FIRSTHDR()返回msgh所指向的msghdr类型的缓冲区中的第一个cmsghdr结构体的指针。&lt;/p&gt;

&lt;p&gt;CMSG_NXTHDR()返回传入的cmsghdr类型的指针的下一个cmsghdr结构体的指针。&lt;/p&gt;

&lt;p&gt;CMSG_ALIGN()根据传入的length大小,返回一个包含了添加对齐作用的填充数据后的大小。&lt;/p&gt;

&lt;p&gt;CMSG_SPACE()中传入的参数length指的是一个控制信息元素(即一个cmsghdr结构体)后面数据部分的字节数,返回的是这个控制信息的总的字节数,即包含了头部(即cmsghdr各成员)、数据部分和填充数据的总和。&lt;/p&gt;

&lt;p&gt;CMSG_DATA根据传入的cmsghdr指针参数,返回其后面数据部分的指针。&lt;/p&gt;

&lt;p&gt;CMSG_LEN传入的参数是一个控制信息中的数据部分的大小,返回的是这个根据这个数据部分大小,需要配置的cmsghdr结构体中cmsg_len成员的值。这个大小将为对齐添加的填充数据也包含在内。&lt;/p&gt;

&lt;p&gt;用一张图来表示这几个变量和宏的关系为:&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/ipc-3.jpg&#34; alt=&#34;ipc-3.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如前所述,msghdr结构中,msg_controllen成员的大小为所有cmsghdr控制元素调用CMSG_SPACE()后相加的和。&lt;/p&gt;

&lt;p&gt;讲了这么多msghdr,cmsghdr,还是没有讲到如何传递文件描述符。其实很简单,本来sendmsg是和send一样,是用来传送数据的,只不过其数据部分的buffer由参数msg_iov来指定,至此,其行为和send可以说是类似的。&lt;/p&gt;

&lt;p&gt;但是sendmsg提供了可以传递控制信息的功能,我们要实现的传递描述符这一功能,就必须要用到这个控制信息。在msghdr变量的cmsghdr成员中,由控制头cmsg_level和cmsg_type来设置&amp;rdquo;传递文件描述符&amp;rdquo;这一属性,并将要传递的文件描述符作为数据部分,保存在cmsghdr变量的后面。这样就可以实现传递文件描述符这一功能,在此时,是不需要使用msg_iov来传递数据的。&lt;/p&gt;

&lt;p&gt;具体的说,为msghdr的成员msg_control分配一个cmsghdr的空间,将该cmsghdr结构的cmsg_level设置为SOL_SOCKET,cmsg_type设置为SCM_RIGHTS,并将要传递的文件描述符作为数据部分,调用sendmsg即可。其中,SCM表示socket-level control message,SCM_RIGHTS表示我们要传递访问权限。&lt;/p&gt;

&lt;p&gt;弄清楚了发送部分,文件描述符的接收部分就好说了。跟发送部分一样,为控制信息配置好属性,并在其后分配一个文件描述符的数据部分后，在成功调用recvmsg后,控制信息的数据部分就是在接收进程中的新的文件描述符了,接收进程可直接对该文件描述符进行操作。&lt;/p&gt;

&lt;h2 id=&#34;nginx中传递文件描述符的代码实现&#34;&gt;Nginx中传递文件描述符的代码实现&lt;/h2&gt;

&lt;p&gt;关于如何在进程间传递文件描述符,我们已经理的差不多了。下面看看Nginx中是如何做的。&lt;/p&gt;

&lt;p&gt;Nginx中发送文件描述符的相关代码为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngx_int_t  
ngx_write_channel(ngx_socket_t s, ngx_channel_t *ch, size_t size,  
    ngx_log_t *log)  
{  
    ssize_t             n;  
    ngx_err_t           err;  
    struct iovec        iov[1];  
    struct msghdr       msg;  
  
#if (NGX_HAVE_MSGHDR_MSG_CONTROL)  
  
    union {  
        struct cmsghdr  cm;  
        char            space[CMSG_SPACE(sizeof(int))];  
    } cmsg;  
  
    if (ch-&amp;gt;fd == -1) {  
        msg.msg_control = NULL;  
        msg.msg_controllen = 0;  
  
    } else {  
        msg.msg_control = (caddr_t) &amp;amp;cmsg;  
        msg.msg_controllen = sizeof(cmsg);  
  
        ngx_memzero(&amp;amp;cmsg, sizeof(cmsg));  
  
        cmsg.cm.cmsg_len = CMSG_LEN(sizeof(int));  
        cmsg.cm.cmsg_level = SOL_SOCKET;  
        cmsg.cm.cmsg_type = SCM_RIGHTS;  
  
        /*  
         * We have to use ngx_memcpy() instead of simple  
         *   *(int *) CMSG_DATA(&amp;amp;cmsg.cm) = ch-&amp;gt;fd;  
         * because some gcc 4.4 with -O2/3/s optimization issues the warning:  
         *   dereferencing type-punned pointer will break strict-aliasing rules  
         *  
         * Fortunately, gcc with -O1 compiles this ngx_memcpy()  
         * in the same simple assignment as in the code above  
         */  
  
        ngx_memcpy(CMSG_DATA(&amp;amp;cmsg.cm), &amp;amp;ch-&amp;gt;fd, sizeof(int));  
    }  
  
    msg.msg_flags = 0;  
  
#else  
  
    if (ch-&amp;gt;fd == -1) {  
        msg.msg_accrights = NULL;  
        msg.msg_accrightslen = 0;  
  
    } else {  
        msg.msg_accrights = (caddr_t) &amp;amp;ch-&amp;gt;fd;  
        msg.msg_accrightslen = sizeof(int);  
    }  
  
#endif  
  
    iov[0].iov_base = (char *) ch;  
    iov[0].iov_len = size;  
  
    msg.msg_name = NULL;  
    msg.msg_namelen = 0;  
    msg.msg_iov = iov;  
    msg.msg_iovlen = 1;  
  
    n = sendmsg(s, &amp;amp;msg, 0);  
  
    if (n == -1) {  
        err = ngx_errno;  
        if (err == NGX_EAGAIN) {  
            return NGX_AGAIN;  
        }  
  
        ngx_log_error(NGX_LOG_ALERT, log, err, &amp;quot;sendmsg() failed&amp;quot;);  
        return NGX_ERROR;  
    }  
  
    return NGX_OK;  
}  
  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中,参数s就是一个用socketpair创建的管道的一端,要传送的文件描述符位于参数ch所指向的结构体中。ch结构体本身,包含要传送的文件描述符和其他成员,则通过io_vec类型的成员msg_iov传送。&lt;/p&gt;

&lt;p&gt;接收部分的代码为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngx_int_t  
ngx_read_channel(ngx_socket_t s, ngx_channel_t *ch, size_t size, ngx_log_t *log)  
{  
    ssize_t             n;  
    ngx_err_t           err;  
    struct iovec        iov[1];  
    struct msghdr       msg;  
  
#if (NGX_HAVE_MSGHDR_MSG_CONTROL)  
    union {  
        struct cmsghdr  cm;  
        char            space[CMSG_SPACE(sizeof(int))];  
    } cmsg;  
#else  
    int                 fd;  
#endif  
  
    iov[0].iov_base = (char *) ch;  
    iov[0].iov_len = size;  
  
    msg.msg_name = NULL;  
    msg.msg_namelen = 0;  
    msg.msg_iov = iov;  
    msg.msg_iovlen = 1;  
  
#if (NGX_HAVE_MSGHDR_MSG_CONTROL)  
    msg.msg_control = (caddr_t) &amp;amp;cmsg;  
    msg.msg_controllen = sizeof(cmsg);  
#else  
    msg.msg_accrights = (caddr_t) &amp;amp;fd;  
    msg.msg_accrightslen = sizeof(int);  
#endif  
  
    n = recvmsg(s, &amp;amp;msg, 0);  
  
    if (n == -1) {  
        err = ngx_errno;  
        if (err == NGX_EAGAIN) {  
            return NGX_AGAIN;  
        }  
  
        ngx_log_error(NGX_LOG_ALERT, log, err, &amp;quot;recvmsg() failed&amp;quot;);  
        return NGX_ERROR;  
    }  
  
    if (n == 0) {  
        ngx_log_debug0(NGX_LOG_DEBUG_CORE, log, 0, &amp;quot;recvmsg() returned zero&amp;quot;);  
        return NGX_ERROR;  
    }  
  
    if ((size_t) n &amp;lt; sizeof(ngx_channel_t)) {  
        ngx_log_error(NGX_LOG_ALERT, log, 0,  
                      &amp;quot;recvmsg() returned not enough data: %z&amp;quot;, n);  
        return NGX_ERROR;  
    }  
  
#if (NGX_HAVE_MSGHDR_MSG_CONTROL)  
  
    if (ch-&amp;gt;command == NGX_CMD_OPEN_CHANNEL) {  
  
        if (cmsg.cm.cmsg_len &amp;lt; (socklen_t) CMSG_LEN(sizeof(int))) {  
            ngx_log_error(NGX_LOG_ALERT, log, 0,  
                          &amp;quot;recvmsg() returned too small ancillary data&amp;quot;);  
            return NGX_ERROR;  
        }  
  
        if (cmsg.cm.cmsg_level != SOL_SOCKET || cmsg.cm.cmsg_type != SCM_RIGHTS)  
        {  
            ngx_log_error(NGX_LOG_ALERT, log, 0,  
                          &amp;quot;recvmsg() returned invalid ancillary data &amp;quot;  
                          &amp;quot;level %d or type %d&amp;quot;,  
                          cmsg.cm.cmsg_level, cmsg.cm.cmsg_type);  
            return NGX_ERROR;  
        }  
  
        /* ch-&amp;gt;fd = *(int *) CMSG_DATA(&amp;amp;cmsg.cm); */  
  
        ngx_memcpy(&amp;amp;ch-&amp;gt;fd, CMSG_DATA(&amp;amp;cmsg.cm), sizeof(int));  
    }  
  
    if (msg.msg_flags &amp;amp; (MSG_TRUNC|MSG_CTRUNC)) {  
        ngx_log_error(NGX_LOG_ALERT, log, 0,  
                      &amp;quot;recvmsg() truncated data&amp;quot;);  
    }  
  
#else  
  
    if (ch-&amp;gt;command == NGX_CMD_OPEN_CHANNEL) {  
        if (msg.msg_accrightslen != sizeof(int)) {  
            ngx_log_error(NGX_LOG_ALERT, log, 0,  
                          &amp;quot;recvmsg() returned no ancillary data&amp;quot;);  
            return NGX_ERROR;  
        }  
  
        ch-&amp;gt;fd = fd;  
    }  
  
#endif  
  
    return n;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该代码配合发送部分的代码来读,意义很明确。只不过,在我们上面所讲的基础上,Nginx将ch变量作为发送和接收的数据(此数据指放在iovec缓冲区中的数据,而非控制信息中的数据部分),并用一个成员ch-&amp;gt;command实现了一个简单的协议,使得这一对函数功能更通用。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>记在清远马拉松之后</title>
      <link>https://pureage.info/2015/03/18/qingyuan-marathon-1.html</link>
      <pubDate>Wed, 18 Mar 2015 10:23:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/03/18/qingyuan-marathon-1.html</guid>
      
        <description>&lt;p&gt;3月15号上午8点开赛，现在是3月18号，想想还是写一篇文章记录一下吧，免得再拖就拖没了。&lt;/p&gt;

&lt;p&gt;总体上说，比赛本身很顺利，一方面我不是很在乎具体成绩，能在关门前跑完就行；另一方面，我虽然报的是半马，但在平时的训练中，从来没有一次超过12km的，在这种情况下，能跑完且不受伤，就算是很顺利了。&lt;/p&gt;

&lt;p&gt;但整个赛期安排略有坑爹。一方面，是清远首次举办马拉松比赛，经验不足，另一方面是我首次参加马拉松比赛，经验也不足。这一大一小两个菜鸟一碰撞，受苦的当然就是我这个小菜鸟了。&lt;/p&gt;

&lt;p&gt;走的弯路主要有以下几点：&lt;/p&gt;

&lt;p&gt;1)3月14号就到了清远，3月15号6点起床从住处往起点赶。因为马上要封路，路上并没有多少车往起点的方向去，我们心想这些完了，要走一个马拉松半程的距离了，时间恐怕不够了。不过幸运的是，半路上碰到一个出租车司机，他正好载着他的夫人和儿子往起点赶，于是愉快的坐了一趟顺风车。谢谢这位热情好客，助人为乐的清远的哥。&lt;/p&gt;

&lt;p&gt;2)这次比赛从一开始到结束，雨就一直没停过。参赛前，觉得清远本来就是个山清水秀的地方，边跑步边欣赏美景是件很惬意的事情。可是由于天气的原因，全程能见度都只有几百米，跑的时候，有人说，这简直是在玩寂静岭啊。而且，由于下雨，开始大家都穿着雨衣跑。雨衣虽然能防水，但随着跑步的进行，体内的热气散发不出去，感觉又闷又燥，最后，跑到8千米的时候，我只好双手一把将雨衣潇洒的撕开，冒雨前进了。&lt;/p&gt;

&lt;p&gt;3)比赛结束后才十点多，但周边道路要到下午两点才能解封，于是我们又拖着“残腿”，浑身湿漉漉的冒雨各种绕路，相当于又走了一回半程马拉松，回到住处。&lt;/p&gt;

&lt;p&gt;4)回到住处后，赶紧洗了个热水澡，将鞋袜子大致吹干，办理退房手续，乘出租车赶到高铁站。这时当次列车已经错过了。于是去办理改签，被告知之前已经改签过一次，故只能作废，重新买一张，而且只有晚上7点45的商务座还有票。这时，我们可以选择去汽车站，毕竟清远距离广州这么近，汽车还是很多的。但腿实在是不想再动了，于是只好和女友双双买了商务座，然后在高铁站等了5个多小时。这商务座还真不是盖的，座椅可以自动调节，空间大的惊人，还有可口零食赠送。正当我们开始享受时，列车开始报站了“广州车站就要到了&amp;hellip;”，泪奔。&lt;/p&gt;

&lt;p&gt;总结起来，以后去异地参加马拉松，一定要注意以下几点：&lt;br /&gt;
1)住宿。一定要考虑到封路的情况，最好住的地方位于起点往赛区的反方向。&lt;/p&gt;

&lt;p&gt;2)交通。提前订火车票时，回去的时间晚一点没事，不要把时间卡的很紧。一方面，比赛完了不适宜赶路，另一方面天气情况也难以预料。&lt;/p&gt;

&lt;p&gt;至于跑步本身，唯一值得一说的就是，感谢膝盖兄，让你超负荷运转这么久，也没把我撂在半路上。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>与髂胫束综合症战斗</title>
      <link>https://pureage.info/2015/03/11/fighting-with-iliotibial-band-friction-syndrome.html</link>
      <pubDate>Wed, 11 Mar 2015 12:00:00 +0000</pubDate>
      
      <guid>https://pureage.info/2015/03/11/fighting-with-iliotibial-band-friction-syndrome.html</guid>
      
        <description>&lt;p&gt;我想百分之九十的可能，我是被髂胫束综合症给缠上了。&lt;/p&gt;

&lt;p&gt;具体表现就是跑步距离过长时，膝盖外侧疼痛，当爬楼梯时尤其疼痛难忍。但在跑步过程中，很容易受到忽视，不就是有点疼吗，坚持坚持就行了，然后才发现这种疼痛是越来越剧烈的。&lt;/p&gt;

&lt;p&gt;不过自从决定将跑步作为一项终身运动后，心里就已经做好了与伤病共舞的准备了。还记得去年冬天去北京出差，那天刚好是广州马拉松比赛，在飞机上，我旁边坐着一位刚跑完全程的北京小伙，虽然年轻，但已经跑过很多次全马了。一路上，他与另一位中年大叔交谈，那位大叔因为脚伤中途退赛了。我记得那小伙子安慰大叔的话，“对于我们跑者来说，受伤未尝不是一个好事，因为它让我们更加了解自己的身体。”&lt;/p&gt;

&lt;p&gt;无论如何，是不会因为这个髂胫束综合症就放弃跑步的，因为自从去年秋天开始跑步以来，收获的东西太多了。&lt;/p&gt;

&lt;p&gt;记得刚开始跑时，我还特意花近500块钱买了个入耳式walkman，开始时听歌，后来换成百家讲坛。不知道从哪天起，就再也没戴过了。因为慢慢我开始觉得，跑步不是一个机械的运动而已，在整个跑步的过程中，其实需要精神高度的集中，感官也需要尽量的打开，感知周围的自然声，自己的脚步、心跳，以及感知自己的动作。说的夸张一点，这个时候，我明显感觉自己进入了一个全新的境界。&lt;/p&gt;

&lt;p&gt;但髂胫束综合症这个东西还是要面对的。不过还好，这个症状在骑行、跑步者中很常见，相应的缓解手段也很容易搜索到。例如这个：&lt;a href=&#34;http://site.douban.com/106644/widget/notes/258412/note/102321976/&#34;&gt;髂胫束磨擦综合症的伸展及力量训练&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本周日清远马拉松就要开始了，虽然我还从没跑过2万以上的距离，但我还是挺乐观的，相信自己能够顺利跑完全程。（其实，是跑不完也无所谓）&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>受伤小记</title>
      <link>https://pureage.info/2015/02/14/learning-from-injury.html</link>
      <pubDate>Sat, 14 Feb 2015 09:33:52 +0000</pubDate>
      
      <guid>https://pureage.info/2015/02/14/learning-from-injury.html</guid>
      
        <description>&lt;p&gt;千小心万小心，我还是受伤了。&lt;/p&gt;

&lt;p&gt;一月中下旬的时候，由于各种事情挤在一起，有一周多的时间完全没有跑步，其中包括去北京参加公司年会等。于是在1月25号，我开始恢复训练。&lt;/p&gt;

&lt;p&gt;那天是个周日，下午五点多的时候，我直接从住处沿公路跑到我经常跑步的公园并继续跑完6千多米。在跑之前，本是打算跑完一万米的，谁知由于前半程是在公路上跑的，路上各种变向绕开行人等动作，而且并没有做准备动作，导致腿部、膝盖等在跑完三千米的时候已经有不适了。&lt;/p&gt;

&lt;p&gt;在这种情况下，我做了一个错误的决定，继续跑了三千米。跑完后，膝盖侧面有些不适，心里暗想糟糕，不会受伤了吧。&lt;/p&gt;

&lt;p&gt;第二天，我又做出了一个更错误的决定，上完班后又跑了次一万米。这直接导致跑完后膝盖侧面非常疼痛，接下来的一周我已经完全不能跑步了，上下楼都很困难，不得已还只好放弃骑车上下班，改为步行。&lt;/p&gt;

&lt;p&gt;自正儿八经开始跑步以来，这是我第一次受伤，没想到来得这么真实。&lt;/p&gt;

&lt;p&gt;但我认为这也是件好事。因为只有受过伤，才会更新懂的自己的身体，更明确跑步的意义。&lt;/p&gt;

&lt;p&gt;休息两周后，于2月9号继续开始。这次给自己下的任务非常明确，无论如何，只跑三千米。&lt;/p&gt;

&lt;p&gt;2月11号，继续三千米。&lt;/p&gt;

&lt;p&gt;2月13号，六千米。&lt;/p&gt;

&lt;p&gt;这几天又重新把《跑步，该怎么跑》拿出来读，并重新制定了一个跑步计划，具体到天和距离。初步给自己定下这几个规定：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;只要有超过一周没跑的，重新开始跑时，都从三千米开始，再逐步增加。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;原则上跑一次就休息一天，如果有连续两天跑的情况，那么其中一天也只跑三千米。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;每次跑步前，必须将准备活动做到位。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;每次跑步完，必须将拉伸活动做到位。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大概就这么些了，希望今年不要再受伤了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>报名了清远马拉松</title>
      <link>https://pureage.info/2014/12/30/qingyuan-marathon.html</link>
      <pubDate>Tue, 30 Dec 2014 12:54:01 +0000</pubDate>
      
      <guid>https://pureage.info/2014/12/30/qingyuan-marathon.html</guid>
      
        <description>&lt;p&gt;昨晚在网上提交了清远马拉松的报名资料，第一次参加马拉松，以我现在的实力只能报个半程马拉松。希望明年11月时，能参加广州马拉松的全马，虽然按照今年的情况来看，想抽到签实在太难。&lt;/p&gt;

&lt;p&gt;将清远作为我的首个马拉松，自以为还是挺不错的。一方面清远离广州近，另一方面清远环境也挺好的。以后即使成为马拉松常客，北马什么的恐怕我也不会考虑。&lt;/p&gt;

&lt;p&gt;报名中还有个小插曲，官网上的报名须知里写的是报名费100元，结果付款时扣了200元，第二天打电话咨询一下，才知道有100元是芯片押金。土了一把，不过官网上也确实没写清楚。&lt;/p&gt;

&lt;p&gt;比赛时间是3月15号，是个星期天，正好可以周六过去住一晚，连假都不用请。&lt;/p&gt;

&lt;p&gt;现在是12月30号，我平时的训练量还是一万米过一点，能不能跑完半马还是个问题，不过估计问题不大。成绩之类的暂时不在我考虑范围之内，能跑完就算成功。&lt;/p&gt;

&lt;p&gt;真有点不可思议，短短的几个月，我居然就报名参加马拉松了。&lt;/p&gt;

&lt;p&gt;清远，我要来了！&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>跑步随感</title>
      <link>https://pureage.info/2014/12/29/running-feelings.html</link>
      <pubDate>Mon, 29 Dec 2014 14:07:15 +0000</pubDate>
      
      <guid>https://pureage.info/2014/12/29/running-feelings.html</guid>
      
        <description>&lt;h3 id=&#34;1-节奏比速度重要&#34;&gt;1. 节奏比速度重要&lt;/h3&gt;

&lt;p&gt;当然，这一条针对的是长跑。节奏比速度重要，一方面是因为找准自己的节奏，更容易完成自己的目标，我们普通人参加长跑运动，更多的是与自己的对话。另一方面，长跑没有节奏增大了受伤的几率，一旦受伤，实在得不偿失。&lt;/p&gt;

&lt;h3 id=&#34;2-长跑不需要成为多任务工作应用的场景&#34;&gt;2. 长跑不需要成为多任务工作应用的场景&lt;/h3&gt;

&lt;p&gt;之前看过很多关于时间管理的书，关于多任务工作是这些书中重点讲述的内容。一种被普遍接受的观点是，一些重要的工作不适合多任务工作，要排除一切干扰静下心来去完成，这样效率较高。而对于那些不重要的，或者是一些机械重复的工作，可以多个工作同时进行，而这时，往往跑步会作为例子被提出，例如，可以在跑步时听歌，可以在跑步时思考等等。&lt;/p&gt;

&lt;p&gt;总体上，我同意这种观点，但这个例子举得不对。&lt;/p&gt;

&lt;p&gt;只要一定程度上接触过长跑的人都会知道，伤病是跑者的一大威胁。膝盖、小腿、脚部关节等等都一不小心就会受伤。而受伤的一大原因在于跑步姿势不对，跑步姿势不对的一大原因又在于跑步过程太过散漫。长跑的时候为了让自己保持正确的姿势，需要时刻以第三者的视角来观察自己，给自己纠错。&lt;/p&gt;

&lt;h3 id=&#34;3-过程比结果重要&#34;&gt;3. 过程比结果重要&lt;/h3&gt;

&lt;p&gt;这个表现在很多方面，最重要的还是在于，跑步重要的享受跑步这个过程。这不是一句口号，想想马拉松比赛几个小时的赛程，如果不享受其中，只奔着结果去的话，这几个小时该是多么的煎熬。&lt;/p&gt;

&lt;h3 id=&#34;4-适度装逼有益身心健康&#34;&gt;4. 适度装逼有益身心健康&lt;/h3&gt;

&lt;p&gt;破了自己的记录时在社交网络上分享一下；买一套亮骚的装备；推荐身边的朋友也加入跑步者的行列等等，其实或多或少都具有装逼的性质，但只要这些行为能促进自己更好的跑步，同时不对他人造成什么影响，实在是无伤大雅。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>豆瓣阅读《高效的学习技巧》笔记</title>
      <link>https://pureage.info/2014/12/28/highly-effective-leargning.html</link>
      <pubDate>Sun, 28 Dec 2014 08:28:25 +0000</pubDate>
      
      <guid>https://pureage.info/2014/12/28/highly-effective-leargning.html</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;http://read.douban.com/reader/ebook/7336813/&#34;&gt;高效学习技巧&lt;/a&gt;阅读笔记&lt;/p&gt;

&lt;h3 id=&#34;1-学习过程中的挫败是件好事情&#34;&gt;1.学习过程中的挫败是件好事情&lt;/h3&gt;

&lt;p&gt;在多年的学校生活中，我们很多人已经不能正视挫败了，很多成年人几乎得不到和失败交锋的经验。很多人在学校挂了一门课之后，就直接认定“我不是学习xx的料”，这种想法让他们免去了尝试的麻烦，让他们远离失败，当然也就阻止了他们的学习。&lt;/p&gt;

&lt;h3 id=&#34;2-重复和联系是记忆的诀窍&#34;&gt;2. 重复和联系是记忆的诀窍&lt;/h3&gt;

&lt;h3 id=&#34;3-互联网时代最重要的技能是什么&#34;&gt;3. 互联网时代最重要的技能是什么&lt;/h3&gt;

&lt;p&gt;互联网不仅增加了专业化教育的需要（只需要看看现在有多少人加入了继续教育的行列），而且让那些忽视学习的人更加危险。专注于把观察到的数据点联系起来，并且能够简练的说明为什么要把他们联系起来。这是现代知识经济活动中最重要的技能&lt;/p&gt;

&lt;h3 id=&#34;4-选择焦虑驱动型成长&#34;&gt;4. 选择焦虑驱动型成长&lt;/h3&gt;

&lt;p&gt;焦虑驱动型成长与无聊驱动型成长对应。相类似的文章有&lt;a href=&#34;http://www.geekonomics10000.com/317&#34;&gt;《成年人的思想还能进步么？》&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-有效的管理时间&#34;&gt;5. 有效的管理时间&lt;/h3&gt;

&lt;p&gt;这是个老生常谈的话题，类似的书也太多了。大多数都是在讲“重要、紧急”之间的轻重关系。关键在于执行。&lt;/p&gt;

&lt;h3 id=&#34;6-克服拖延症&#34;&gt;6. 克服拖延症&lt;/h3&gt;</description>
      
    </item>
    
    <item>
      <title>跑步阶段性总结（一）</title>
      <link>https://pureage.info/2014/11/11/running-report-1.html</link>
      <pubDate>Tue, 11 Nov 2014 12:55:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/11/11/running-report-1.html</guid>
      
        <description>&lt;p&gt;进入11月份，广州也开始降温了，白天都开始穿长裤衬衣了。所以跑步前还得去公司洗手间换上短袖短裤，这一个新的动作的引入，导致我匆匆出门时忘了带上导汗带。不过也没关系，我不是已经很久跑步时不戴MP3了么。&lt;/p&gt;

&lt;p&gt;还是在天河公园绕圈，这条线路现在我已经太熟了。知乎上有个问题，&lt;a href=&#34;http://www.zhihu.com/question/25947722&#34;&gt;叫你跑步的时候在想什么？&lt;/a&gt;里面有各种令人忍俊不禁或是会心一笑的答案。今天，我大概想了这么几件事：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;今天能不能破一万米呢？&lt;/li&gt;
&lt;li&gt;今天还是不按圈计了，改成按每千米来计吧。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;天冷了，跑步的人果然少了。看来能坚持的人也不是很多嘛！&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;到一千米了，三圈能刚好一万米吧？&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;又碰到前几天碰到的也来跑步的老外了。老外长得高，动作也轻盈舒展，不错。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;leetcode上的那道题是怎么回事?&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;不好，开始下雨了。希望别下太大。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;三千米了，这一圈快完了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;又碰到那个老外了。（我们在反方向绕圈）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这雨要是变大了还跑步跑了？还是跑吧！&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;回忆一下动作要领！&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;又碰到那个老外了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;(略)&amp;hellip;&amp;hellip;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;终于跑完三圈了，可还没到一万米啊，怎么办？是继续跑一段再回来还是干脆再跑一圈？算了，继续马不停蹄往快餐店跑吧。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在绕着天河公园跑了三圈，出门后继续跑了一小段后，手机APP开始播报，您当前运动距离，10公里。小步停下，看了下统计数据：我用xxGPS跑步10.07公里，耗时01：02：54，平均时速9.61km/h，平均配速06:14。&lt;/p&gt;

&lt;p&gt;就这样，我有生以来第一次连续跑了一万米。有必要来个阶段性陈述。&lt;/p&gt;

&lt;p&gt;很遗憾，已经不记得今年开始跑步具体的日期了。但我第一篇关于跑步的博客&lt;a href=&#34;http://pureage.info/2014/08/19/start-runngin-again.html&#34;&gt;重新开始跑步&lt;/a&gt;是写于2014年8月19号。那么，大概快三个月了。&lt;/p&gt;

&lt;p&gt;应该说，这三个月的进步是巨大的。即使是大学时曾有近一年都在坚持跑步，但从没跑过一万米，每次大概3000米就差不多了。而且，即使今天破万了，我也丝毫没有“坚持”的感觉。我想，这应该归功于科学的跑步姿势和认真的心态吧，而且后者的比重更大。以前跑步，其实都是在跟自己赌气，“我就要坚持每天跑。”但跑的过程，实在是难受。而现在，我已经做好了长期跑步的心理准备，所以反而能够认真的去对待跑步这件事情本身，例如，看一些跑步的经典著作，订阅一些跑步相关的专栏，逛一逛跑步的论坛，关注一下知乎上相关的热门话题，也有了自己心仪但还舍不得买的装备。不知不觉，跑步带来的享受由跑完后的如释重负，变成了跑步过程中的所闻所见所思，如果没有所闻所见所思，那么这享受便是来自身体自然的表达。&lt;/p&gt;

&lt;p&gt;一万米到了，距离我的第一次马拉松也不会太远了。考虑到广州马拉松对于初次参加马拉松比赛的选手，只允许跑半马，我想，明年的马拉松比赛怎么也能去小试一下牛刀了。当然，能不能抽到签是另一回事了。但这丝毫不重要。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Nginx如何控制某个特性是否打开</title>
      <link>https://pureage.info/2014/10/17/nginx-configure-of-define-and-have.html</link>
      <pubDate>Fri, 17 Oct 2014 09:31:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/10/17/nginx-configure-of-define-and-have.html</guid>
      
        <description>&lt;p&gt;提到Nginx，大家首先会想到它的高性能，异步框架、模块化、upstream、红黑树等耳熟能详的技术实现。这些确实也是Nginx的核心，但作为一个优秀的开源项目，Nginx可以供我们借鉴的远不止这些，例如本文的话题：如何控制某个特性是否打开？&lt;/p&gt;

&lt;p&gt;我们知道，在Linux下用源码安装方式编译安装一个软件时，标准情况下是有一个configure的动作，这个动作即是在编译前对环境进行检查，服务于后面的编译和安装，Nginx当然也不例外。&lt;/p&gt;

&lt;p&gt;Nginx的configure文件是一个入口，在里面调用了很多其他脚本，这些脚本都位于源代码的auto目录下。本文重点涉及其中两个脚本：auto/have和auto/define.&lt;/p&gt;

&lt;p&gt;它们的内容极其简单，分别如下：
1.auto/have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Copyright (C) Igor Sysoev
# Copyright (C) Nginx, Inc.  
  
  
cat &amp;lt;&amp;lt; END &amp;gt;&amp;gt; $NGX_AUTO_CONFIG_H  
  
#ifndef $have  
#define $have 1  
#endif  
  
END  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.auto/define&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Copyright (C) Igor Sysoev  
# Copyright (C) Nginx, Inc.  
  
  
cat &amp;lt;&amp;lt; END &amp;gt;&amp;gt; $NGX_AUTO_CONFIG_H  
  
#ifndef $have  
#define $have $value  
#endif  
  
END  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，两个脚本只有一处不同，是将have变量定义成value变量还是将其定义为1，所以后面仅仅以have脚本为例进行说明。&lt;/p&gt;

&lt;p&gt;have脚本的用法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;have=XXXX  . auto/have  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就会在$NGX_AUTO_CONFIG_H所代表的文件里（默认为objs/ngx_auto_config.h)追加如下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#ifndef XXXX  
#define XXXX 1  
#endif  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，就可以用XXXX宏是否定义来控制编译的过程。&lt;/p&gt;

&lt;p&gt;下面以ngx_memalign这个Nginx内部接口为例来进行详细的说明。&lt;br /&gt;
ngx_memalign是Nginx里最基本的接口之一，经常会被调用。从接口的名字就可以看出，这个接口是用来处理内存分配和对齐的。其定义在ngx_alloc.h中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#if (NGX_HAVE_POSIX_MEMALIGN || NGX_HAVE_MEMALIGN)  
void *ngx_memalign(size_t alignment, size_t size, ngx_log_t *log); 
#else 
#define ngx_memalign(alignment, size, log) ngx_alloc(size, log) 
#endif  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码的意图是，如果定义了NGX_HAVE_POSIX_MEMALIGN宏或者NGX_HAVE_MEMALIGN宏，则声明函数ngx_memalign，否则，简单的对ngx_alloc进行一下封装（ngx_alloc是对malloc的简单封装）。&lt;/p&gt;

&lt;p&gt;我们在来看函数ngx_memalign在ngx_alloc.c中的定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#if (NGX_HAVE_POSIX_MEMALIGN)  
  
void *  
ngx_memalign(size_t alignment, size_t size, ngx_log_t *log)  
{  
    void *p;  
    int err;  
  
    err = posix_memalign(&amp;amp;p, alignment, size);  
  
    if (err) {  
        ngx_log_error(NGX_LOG_EMERG, log, err,  
                      &amp;quot;posix_memalign(%uz, %uz) failed&amp;quot;, alignment, size);  
        p = NULL;  
    }  
  
    ngx_log_debug3(NGX_LOG_DEBUG_ALLOC, log, 0,  
                   &amp;quot;posix_memalign: %p:%uz @%uz&amp;quot;, p, size, alignment);  
  
    return p;  
}  
  
#elif (NGX_HAVE_MEMALIGN)  
  
void *  
ngx_memalign(size_t alignment, size_t size, ngx_log_t *log)  
{  
    void *p;  
  
    p = memalign(alignment, size);  
    if (p == NULL) {  
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,  
                      &amp;quot;memalign(%uz, %uz) failed&amp;quot;, alignment, size);  
    }  
  
    ngx_log_debug3(NGX_LOG_DEBUG_ALLOC, log, 0,  
                   &amp;quot;memalign: %p:%uz @%uz&amp;quot;, p, size, alignment);  
  
    return p;  
}  
  
#endif  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码的意图为，如果定义了NGX_HAVE_POSIX_MEMALIGN，那么ngx_memalign就是对posix_memalign的简单封装，否则，如果定义了NGX_HAVE_MEMALIGN，则ngx_memalign是对memalign的简单封装。&lt;/p&gt;

&lt;p&gt;那么NGX_HAVE_POSIX_MEMALIGN和NGX_HAVE_MEMALIGN又是什么时候被定义呢？&lt;/p&gt;

&lt;p&gt;过程如下：&lt;br /&gt;
在auto/unix脚本，列出需要检查的接口，这里就是memalign和posix_memalign了，交给auto/feature脚本来逐一处理，auto/feature脚本会对针对每一个带检查的接口，生成一个最基本的临时c源文件，该源文件会调用该接口。feature脚本然后对该源文件进行编译并判断最终生成的目标文件的可执行性。用这种动态检测的方法来判断该接口在当前系统中是否支持。&lt;/p&gt;

&lt;p&gt;如果feature脚本验证出posix_memalign和memalign接口在当前系统中都可用后，则会逐一调用have脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;have=$ngx_have_feature . auto/have  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里，变量ngx_have_feature即是NGX_HAVE_POSIX_MEMALIGN和NGX_HAVE_MEMALIGN。&lt;/p&gt;

&lt;p&gt;最终，have在configure、auto/unix、auto/feature、auto/have各个脚本的通力合作下，在objs/ngx_auto_config.h中就有了对NGX_HAVE_POSIX_MEMALIGN和NGX_HAVE_MEMALIGN的定义，进而影响到ngx_memalign接口的实现。&lt;/p&gt;

&lt;p&gt;让我们从需求出发，将接口ngx_memalign的需求描述一遍：&lt;br /&gt;
1. 如果系统支持posix_memalign，则ngx_memalign是对posix_memalign的简单封装。&lt;br /&gt;
2. 如果系统不支持posix_memalign，但支持memalign，则ngx_memalign是对memalign的简单封装。&lt;br /&gt;
3. 如果系统竟然对posix_memalign和memalign都不支持，则ngx_memalign是对malloc的简单封装。&lt;/p&gt;

&lt;p&gt;实现需求很简单，但如何实现的优雅，则是另一回事。Nginx向我们展示了，一个在C上尽力把服务器性能做到极致的项目，是如何在脚本上也尽最大努力做得漂亮。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>跑步是一件快乐的事情</title>
      <link>https://pureage.info/2014/09/28/running-is-a-happy-sport.html</link>
      <pubDate>Sun, 28 Sep 2014 00:16:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/09/28/running-is-a-happy-sport.html</guid>
      
        <description>&lt;p&gt;跑步是一件快乐的事情，这似乎是无庸置疑的，不然无法解释每年各地举办的马拉松比赛都爆满甚至要用抽签来决定参赛名单的现象。如果跑步不是一个快乐的事情，这些人怎么能忍受几个小时的枯燥乏味呢，更别说身体上的煎熬。&lt;/p&gt;

&lt;p&gt;但对我来说，跑步真正是一件简单、快乐的事情，是最近才有的。&lt;/p&gt;

&lt;p&gt;之前有过一年坚持每天跑步，但那个时候，“成就感”的驱动大于快乐的驱动。跑步已经不仅仅是一项运动了，它似乎变成了一种精神象征，只要我还在跑，那么我就没被打倒。但跑步本身的乐趣却被忽略。&lt;/p&gt;

&lt;p&gt;这个转变是由两本书促成的，&lt;a href=&#34;http://book.douban.com/subject/3369600/&#34;&gt;《当我谈跑步时我谈些什么》&lt;/a&gt;和&lt;a href=&#34;http://book.douban.com/subject/22993407/&#34;&gt;《跑步，该怎么跑？》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;《当》主要讲的是村上春树回忆、分析自己的跑步经历。他是一个取得了很高成就的作家，却也是一个跑者，这让我大吃一惊。不仅如此，他还几十年如一日的保持着简单、规律的生活方式，相比于一些作家或艺术家从毒品、性中寻找灵感，这真是一个充满正能量的故事。我们无法通过模仿他的文笔写出传世的作品，但成为一个跑者，确实有可能的。把跑步变成一种生活方式，不是坚持一个星期一个月，而是几年，几十年，这本身就已经是一个非常励志的故事了。&lt;/p&gt;

&lt;p&gt;当思想上接受了把跑步变成自己生活的一部分后，跑步在心里的地位也就变了。跑步不是为了锤炼毅力，不是为了通过跑步获得其他方面的成功。跑步就是跑步。&lt;/p&gt;

&lt;p&gt;人类发展至今，任何一个活动、兴趣的背后，都有着极为庞大的知识体系。既然决定了要成为一个跑者，就不能不去了解这些知识。于是，就把《跑步，应该怎么跑》看完了，当然这只是一个开始。&lt;/p&gt;

&lt;p&gt;当我开始跑步，并且开始了解跑步这项运动后，跑步就变得轻松愉快了。它不再是一个需要毅力来完成的运动了，在奔跑中倾听自己的脚本声，感受汗珠从毛孔里一点点挣脱出来的，这种感觉棒极了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>用proxy_intercept_errors和recursive_error_pages代理多次302</title>
      <link>https://pureage.info/2014/08/25/hiding-302-using-proxy-pass.html</link>
      <pubDate>Mon, 25 Aug 2014 15:59:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/08/25/hiding-302-using-proxy-pass.html</guid>
      
        <description>&lt;p&gt;302是HTTP协议中的一个经常被使用状态码，是多种重定向方式的一种，其语义经常被解释为“Moved Temporarily”。这里顺带提一下，现实中用到的302多为误用（与303，307混用），在HTTP/1.1中，它的语义为“Found”.&lt;/p&gt;

&lt;p&gt;302有时候很明显，有时候又比较隐蔽。最简单的情况，是当我们在浏览器中输入一个网址A，然后浏览器地址栏会自动跳到B，进而打开一个网页，这种情况就很可能是302。&lt;/p&gt;

&lt;p&gt;比较隐蔽的情况经常发生在嵌入到网页的播放器中。例如，当你打开一个优酷视频播放页面时，抓包观察一下就会经常发现302的影子。但由于这些url并不是直接在浏览器中打开的，所以在浏览器的地址栏看不到变化，当然，如果将这些具体的url特意挑出来复制到浏览器地址栏里，还是可以观察到的。&lt;/p&gt;

&lt;p&gt;上一段提到了优酷。其实现在多数在线视频网站都会用到302，原因很简单，视频网站流量一般较大，都会用到CDN,区别只在于是用自建CDN还是商业CDN。而由于302的重定向语义（再重复一遍，302的语义广泛的被误用，在使用302的时候，我们很可能应该使用303或307，但后面都不再纠结这一点），可以与CDN中的调度很好的结合起来。&lt;/p&gt;

&lt;p&gt;我们来看一个例子，打开一个网易视频播放页面，抓一下包，找到302状态的那个url。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们把它复制到浏览器地址栏中，会发现地址栏迅速的变为了另外一个url，这个Url是不定的，有可能为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://14.18.140.83/f6c00af500000000-1408987545-236096587/data6/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用curl工具会更清楚的看到整个过程：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -I &amp;quot;http://flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4&amp;quot; -L  
HTTP/1.1 302 Moved Temporarily 
Server: nginx 
Date: Mon, 25 Aug 2014 14:49:43 GMT 
Content-Type: text/html 
Content-Length: 154 
Connection: keep-alive 
NG: CCN-SW-1-5L2 
X-Mod-Name: GSLB/3.1.0 
Location: http://119.134.254.9/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4 
  
HTTP/1.1 302 Moved Temporarily 
Server: nginx 
Date: Mon, 25 Aug 2014 14:49:41 GMT 
Content-Type: text/html 
Content-Length: 154 
Connection: keep-alive 
X-Mod-Name: Mvod-Server/4.3.3 
Location: http://119.134.254.7/cc89fdac00000000-1408983581-2095617481/data4/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4 
NG: CHN-SW-1-3Y1 
  
HTTP/1.1 200 OK 
Server: nginx 
Date: Mon, 25 Aug 2014 14:49:41 GMT 
Content-Type: video/mp4 
Content-Length: 3706468 
Last-Modified: Mon, 25 Aug 2014 00:23:50 GMT 
Connection: keep-alive 
Cache-Control: no-cache 
ETag: &amp;quot;53fa8216-388e64&amp;quot; 
NG: CHN-SW-1-3g6 
X-Mod-Name: Mvod-Server/4.3.3 
Accept-Ranges: bytes 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，这中间经历了两次302。&lt;/p&gt;

&lt;p&gt;先暂时将这个例子放在一边，再来说说另一个重要的术语：proxy.我们通常会戏称，某些领导是302类型的，某些领导是proxy类型的。302类型的领导，一件事情经过他的手，会迅速的转给他人，而proxy类型的领导则会参与到事情中来，甚至把事情全部做完。&lt;/p&gt;

&lt;p&gt;回到上面的例子，如果访问一个url中途会有多个302，那如果需要用Nginx设计一个proxy，来隐藏掉中间所有的这些302，该怎么做呢？&lt;/p&gt;

&lt;h3 id=&#34;1-原始proxy&#34;&gt;1.原始Proxy&lt;/h3&gt;

&lt;p&gt;我们知道，Nginx本身就是一个优秀的代理服务器。因此，首先我们来架设一个Nginx正向代理，服务器IP为192.168.109.128（我的一个测试虚拟机）。&lt;/p&gt;

&lt;p&gt;初始配置简化如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {  
        listen 80;  
        location / {  
                rewrite_by_lua &#39;  
                        ngx.exec(&amp;quot;/proxy-to&amp;quot; .. ngx.var.request_uri)  
                &#39;;  
        }  
  
        location ~ /proxy-to/([^/]+)(.*) {  
                proxy_pass http://$1$2$is_args$query_string;  
  
        }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实现的功能是，当使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://192.168.109.128/xxxxxx  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;访问该代理时，会proxy到xxxxxx所代表的真实服务器。&lt;/p&gt;

&lt;p&gt;测试结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -I &amp;quot;http://192.168.109.128/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4&amp;quot; -L  
HTTP/1.1 302 Moved Temporarily 
Server: nginx/1.4.6 
Date: Mon, 25 Aug 2014 14:50:54 GMT 
Content-Type: text/html 
Content-Length: 154 
Connection: keep-alive 
NG: CCN-SW-1-5L2 
X-Mod-Name: GSLB/3.1.0 
Location: http://183.61.140.24/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4 
  
HTTP/1.1 302 Moved Temporarily 
Server: nginx 
Date: Mon, 25 Aug 2014 14:50:55 GMT 
Content-Type: text/html 
Content-Length: 154 
Connection: keep-alive 
X-Mod-Name: Mvod-Server/4.3.3 
Location: http://183.61.140.20/540966e500000000-1408983655-236096587/data1/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4 
NG: CHN-ZJ-4-3M4 
  
HTTP/1.1 200 OK 
Server: nginx 
Date: Mon, 25 Aug 2014 14:50:55 GMT 
Content-Type: video/mp4 
Content-Length: 3706468 
Last-Modified: Mon, 25 Aug 2014 00:31:03 GMT 
Connection: keep-alive 
Cache-Control: no-cache 
ETag: &amp;quot;53fa83c7-388e64&amp;quot; 
NG: CHN-ZJ-4-3M4 
X-Mod-Name: Mvod-Server/4.3.3 
Accept-Ranges: bytes  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，虽然使用proxy，但过程与原始访问没有什么区别。访问过程为，当访问&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://192.168.109.128/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;时，Nginx会将该请求proxy到&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而后者马上就会返回一个302，所以Nginx作为proxy，将该302传回到客户端，客户端重新发起请求，进而重复之前的多次302.这里说明一个问题，一旦Nginx的proxy的后端返回302后，客户端即与Nginx这个proxy脱离关系了，Nginx无法起到完整的代理的作用。&lt;/p&gt;

&lt;h3 id=&#34;2-第1次修改&#34;&gt;2. 第1次修改&lt;/h3&gt;

&lt;p&gt;将配置文件修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {  
        listen 80;  
        location / {  
                rewrite_by_lua &#39;  
                        ngx.exec(&amp;quot;/proxy-to&amp;quot; .. ngx.var.request_uri)  
                &#39;;  
        }  
  
        location ~ /proxy-to/([^/]+)(.*) {  
                proxy_pass http://$1$2$is_args$query_string;  
                error_page 302 = @error_page_302;  
  
        }  
        location @error_page_302 {  
                rewrite_by_lua &#39;  
                        local _, _, upstream_http_location = string.find(ngx.var.upstream_http_location, &amp;quot;^http:/(.*)$&amp;quot;)  
                        ngx.header[&amp;quot;zzzz&amp;quot;] = &amp;quot;/proxy-to&amp;quot; .. upstream_http_location  
                        ngx.exec(&amp;quot;/proxy-to&amp;quot; .. upstream_http_location);  
                &#39;;  
  
        }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与上面的区别在于，使用了一个error_page，目的是当发现proxy的后端返回302时，则用这个302的目的location继续proxy，而不是直接返回给客户端。并且这个逻辑里面包含着递归的意思，一路跟踪302，直到最终返回200的那个地址。测试结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -I &amp;quot;http://192.168.109.128/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4&amp;quot; -L  
HTTP/1.1 302 Moved Temporarily 
Server: nginx/1.4.6 
Date: Mon, 25 Aug 2014 15:01:17 GMT 
Content-Type: text/html 
Content-Length: 154 
Connection: keep-alive 
NG: CCN-SW-1-5L2 
X-Mod-Name: GSLB/3.1.0 
Location: http://183.61.140.24/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4 
  
HTTP/1.1 302 Moved Temporarily 
Server: nginx 
Date: Mon, 25 Aug 2014 15:01:17 GMT 
Content-Type: text/html 
Content-Length: 154 
Connection: keep-alive 
X-Mod-Name: Mvod-Server/4.3.3 
Location: http://183.61.140.20/a90a952900000000-1408984277-236096587/data1/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4 
NG: CHN-ZJ-4-3M4 
  
HTTP/1.1 200 OK 
Server: nginx 
Date: Mon, 25 Aug 2014 15:01:17 GMT 
Content-Type: video/mp4 
Content-Length: 3706468 
Last-Modified: Mon, 25 Aug 2014 00:31:03 GMT 
Connection: keep-alive 
Cache-Control: no-cache 
ETag: &amp;quot;53fa83c7-388e64&amp;quot; 
NG: CHN-ZJ-4-3M4 
X-Mod-Name: Mvod-Server/4.3.3 
Accept-Ranges: bytes  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，本次修改仍然没有成功！&lt;br /&gt;
为什么呢？分析一下，我们在@error_page_302这个location里已经加了一个头部打印语句，可是在测试中，该头部并没有打出来，可见流程并没有进入到@error_page_302这个location。&lt;/p&gt;

&lt;p&gt;原因在于&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error_page 302 = @error_page_302;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;error_page默认是本次处理的返回码。作为proxy，本次处理，只要转发上游服务器的响应成功，应该状态码都是200.即，我们真正需要检查的，是proxy的后端服务器返回的状态码，而不是proxy本身返回的状态码。查一下Nginx的wiki,proxy_intercept_errors指令正是干这个的:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Syntax:	proxy_intercept_errors on | off;  
Default:	  
proxy_intercept_errors off;  
Context:	http, server, location  
Determines whether proxied responses with codes greater than or equal to 300 should be passed to a client or be redirected to nginx for processing with the error_page directive.  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-第二次修改&#34;&gt;3. 第二次修改&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;server {  
        listen 80;  
        proxy_intercept_errors on;  
        location / {  
                rewrite_by_lua &#39;  
                        ngx.exec(&amp;quot;/proxy-to&amp;quot; .. ngx.var.request_uri)  
                &#39;;  
        }  
        location ~ /proxy-to/([^/]+)(.*) {  
                proxy_pass http://$1$2$is_args$query_string;  
                error_page 302 = @error_page_302;  
  
        }  
        location @error_page_302 {  
                rewrite_by_lua &#39;  
                        local _, _, upstream_http_location = string.find(ngx.var.upstream_http_location, &amp;quot;^http:/(.*)$&amp;quot;)  
                        ngx.header[&amp;quot;zzzz&amp;quot;] = &amp;quot;/proxy-to&amp;quot; .. upstream_http_location  
                        ngx.exec(&amp;quot;/proxy-to&amp;quot; .. upstream_http_location);  
                &#39;;  
        }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与上一次修改相比，区别仅仅在于增加了一个proxy_intercept_errors指令。测试结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -I &amp;quot;http://192.168.109.128/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4&amp;quot; -L 
HTTP/1.1 302 Moved Temporarily  
Server: nginx/1.4.6  
Date: Mon, 25 Aug 2014 15:05:54 GMT  
Content-Type: text/html  
Content-Length: 160  
Connection: keep-alive  
zzzz: /proxy-to/183.61.140.24/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这次更神奇了，直接返回一个302状态完事，也不继续跳转了。&lt;br /&gt;
问题出在，虽然第一次302，请求成功的进入到@error_page_302，但后续的error_page指令却没起作用。也就是说，error_page只检查了第一次后端返回的状态码，而没有继续检查后续的后端状态码。&lt;/p&gt;

&lt;p&gt;查一下资料，这个时候，另一个指令 recursive_error_pages就派上用场了。&lt;/p&gt;

&lt;h3 id=&#34;4-第3次修改&#34;&gt;4. 第3次修改&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;server {  
        listen 80;  
        proxy_intercept_errors on;  
        recursive_error_pages on;  
        location / {  
                rewrite_by_lua &#39;  
                        ngx.exec(&amp;quot;/proxy-to&amp;quot; .. ngx.var.request_uri)  
                &#39;;  
        }  
        location ~ /proxy-to/([^/]+)(.*) {  
                proxy_pass http://$1$2$is_args$query_string;  
                error_page 302 = @error_page_302;  
  
        }  
        location @error_page_302 {  
                rewrite_by_lua &#39;  
                        local _, _, upstream_http_location = string.find(ngx.var.upstream_http_location, &amp;quot;^http:/(.*)$&amp;quot;)  
                        ngx.header[&amp;quot;zzzz&amp;quot;] = &amp;quot;/proxy-to&amp;quot; .. upstream_http_location  
                        ngx.exec(&amp;quot;/proxy-to&amp;quot; .. upstream_http_location);  
                &#39;;  
        }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与上一次相比，仅仅增加了recursive_error_pages on这条指令。测试结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -I &amp;quot;http://192.168.109.128/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4&amp;quot; -L 
HTTP/1.1 200 OK 
Server: nginx/1.4.6 
Date: Mon, 25 Aug 2014 15:09:04 GMT 
Content-Type: video/mp4 
Content-Length: 3706468 
Connection: keep-alive 
zzzz: /proxy-to/14.18.140.83/f48bad0100000000-1408984745-236096587/data6/flv.bn.netease.com/tvmrepo/2014/8/5/P/EA3I1J05P/SD/EA3I1J05P-mobile.mp4 
Last-Modified: Mon, 25 Aug 2014 00:21:07 GMT 
Cache-Control: no-cache 
ETag: &amp;quot;53fa8173-388e64&amp;quot; 
NG: CHN-MM-4-3FE 
X-Mod-Name: Mvod-Server/4.3.3 
Accept-Ranges: bytes  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，Nginx终于成功的返回200了。此时，Nginx才真正起到了一个Proxy的功能，隐藏了一个请求原本的多个302链路，只返回客户端一个最终结果。&lt;/p&gt;

&lt;h3 id=&#34;5-小结&#34;&gt;5. 小结&lt;/h3&gt;

&lt;p&gt;综上，通过proxy_pass、error_page、proxy_intercept_errors、recursive_error_pages这几个指令的配合使用，可以向客户端隐藏一条请求的跳转细节，直接返回用户一个状态码为200的最终结果。&lt;/p&gt;

&lt;p&gt;奇怪的是，在Nginx的官方wiki中并没有recursive_error_pages指令的相关说明。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>读《当我谈跑步时我谈些什么》有感</title>
      <link>https://pureage.info/2014/08/24/what-i-talk-about-when-i-talk-about-running.html</link>
      <pubDate>Sun, 24 Aug 2014 15:01:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/08/24/what-i-talk-about-when-i-talk-about-running.html</guid>
      
        <description>&lt;p&gt;从来都不会想到，村上会是一个生活极其规律，几十年如一日坚持跑步训练，长期参与世界各地的马拉松比赛，甚至是铁人三项比赛的人。&lt;/p&gt;

&lt;p&gt;在看完这本书并了解到这一点后，我又很难想象这样一个人居然是《挪威的森林》的作者。&lt;/p&gt;

&lt;p&gt;其实，村上在书中某一章详细的回忆了当初是如何开始跑步的。他跑步的初衷不能说不简单，就是保持身体健康，以能写出更多更好的小说来：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;打算作为小说家度过今后漫长的人生，就必须找到一个既能维持体力，又可将体重保持得恰到好处的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是的，这就是他跑步几十年最原始的动力。娓娓道来，平淡如水。&lt;/p&gt;

&lt;p&gt;可我读起来，总觉得哪里不对劲。直到我把书都看完了，才想起为什么不对劲来。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;打算作为小说家度过今后漫长的人生，就必须找到一个既能维持体力，又可将体重保持得恰到好处的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;按照这种说法，可以衍生出无数的句子，例如：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;打算作为程序员度过今后漫长的人生，就必须找到一个既能维持体力，又可将体重保持得恰到好处的方法。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;打算作为产品经理度过今后漫长的人生，就必须找到一个既能维持体力，又可将体重保持得恰到好处的方法。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;打算作为投行从业者度过今后漫长的人生，就必须找到一个既能维持体力，又可将体重保持得恰到好处的方法。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;会直接或间接导致使身体健康恶化的职业，如果有个排名，我想怎么也轮不到作家吧。但为什么这样一个似乎不能构成强大动力的理由，为什么能支撑他走这么久，而我们却很难做到呢？&lt;/p&gt;

&lt;p&gt;我想，主要是有两点。&lt;/p&gt;

&lt;p&gt;第一，他真正了解自己。&lt;/p&gt;

&lt;p&gt;那年他三十三岁，在开始跑步时已经知道自己会作为小说家度过今后漫长的人生。而我们很多人，即使到了三十三岁，恐怕也不知道该以哪一种角色度过这一生。确定了这个简单的目标后，保持身体健康，创作出更多更好的作品是很自然的事情。&lt;/p&gt;

&lt;p&gt;以前有段时间很喜欢路遥。看了他的《早晨从中午开始》后更是感动流涕，但现在想想，如果能够保持好的健康状态，即使一辈子只写一本书，是否也能让《平凡的世界》更好一些呢？&lt;/p&gt;

&lt;p&gt;第二，极端的自律。&lt;/p&gt;

&lt;p&gt;书中有一段讲到，在比赛时，太累的时候，一般人都会用类似于快走的节奏来调整自己的步伐。但他却是会站在原地休息，只要是开始，那就一定是跑。他参加比赛，是来跑步的，不是走路的。&lt;/p&gt;

&lt;p&gt;看到这里，读者应该都能知道，即使这是一场有着明确规则和标准的比赛，他仍然坚持自己的一套原则。至于慢走调整步伐合不合理，科不科学，他一概不管。&lt;/p&gt;

&lt;p&gt;所以，我认为正是这两点，是他几十年坚持跑步的原因。&lt;/p&gt;

&lt;p&gt;书的结尾：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;假如有我的墓志铭，而且上面的文字可以自己选择，我愿意它是这么写的：&lt;br /&gt;
村上春树&lt;br /&gt;
作家（兼跑者）&lt;br /&gt;
1949-20xx&lt;br /&gt;
他至少是跑到了最后&lt;/p&gt;

&lt;p&gt;此时此刻，这，便是我的愿望。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>重新开始跑步</title>
      <link>https://pureage.info/2014/08/19/start-runngin-again.html</link>
      <pubDate>Tue, 19 Aug 2014 00:57:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/08/19/start-runngin-again.html</guid>
      
        <description>&lt;p&gt;大三那年，跑了整整一年步，风雨无阻。五年后，我再度下了这个决心。&lt;/p&gt;

&lt;p&gt;巧得很，正当我下完决心后，发现自己手里捧着一本村上春树的《当我谈跑步时我谈些什么》。当然这只是一种主观的说法，到底是在看这本书书的时候下了决心还是在看书之前已经下了决心，我自己也搞不清了。&lt;/p&gt;

&lt;p&gt;跑步其实不仅仅是跑步这项运动。跑步意味着生活的一切都开始逐渐规律化，平静化，意味着对自己的掌控。&lt;/p&gt;

&lt;p&gt;希望这是一个新的开始。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>用git做本地备份</title>
      <link>https://pureage.info/2014/08/14/local-backup-using-git.html</link>
      <pubDate>Thu, 14 Aug 2014 01:48:16 +0000</pubDate>
      
      <guid>https://pureage.info/2014/08/14/local-backup-using-git.html</guid>
      
        <description>&lt;p&gt;得益于强大的git以及github、bitbucket之类的外围产品，我们可以很方便的将自己本地的文件推到远端，除了可以完成它原本程序员之间协同工作的功能外，还可以单纯的将git作为本地备份工具来使用。&lt;/p&gt;

&lt;p&gt;假设A目录是你的工作目录，这里面的文件经常变动，所以你想使用git来管理，但又不想推到远端，只想在本地保存。最简单的做法就是在工作目录下执行git init，git add, git commit等一系列操作。但这里有一个小问题，假如该目录是一个公用目录或其他原因，导致该目录有可能被直接删除掉，这样即使是git也无力回天了。&lt;/p&gt;

&lt;p&gt;进一步想一下，这里有两种做法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在另外一个目录B下做一个该工作目录的克隆，每次工作目录提交后，在B下面执行git pull来同步。这样比较麻烦的一点是每次都要切换目录pull。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在另外一个目录下新建一个裸仓库。执行git init &amp;ndash;bare, 然后在A目录下将这个新建的裸仓库添加到上游upstream。这样每次在工作目录A下commit后，再执行一个push就可以了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://treeleafmedia.be/blog/2011/03/creating-a-new-git-repository-on-a-local-file-system/&#34;&gt;http://treeleafmedia.be/blog/2011/03/creating-a-new-git-repository-on-a-local-file-system/&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>ngx.var.arg与ngx.req.get_uri_args的区别</title>
      <link>https://pureage.info/2014/07/30/two-kinds-of-variables-in-ngx-lua.html</link>
      <pubDate>Wed, 30 Jul 2014 10:30:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/07/30/two-kinds-of-variables-in-ngx-lua.html</guid>
      
        <description>&lt;p&gt;ngx.var.arg_xx与ngx.req.get_uri_args[&amp;ldquo;xx&amp;rdquo;]两者都是为了获取请求uri中的参数，例如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://pureage.info?strider=1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了获取输入参数strider，以下两种方法都可以：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;local strider = ngx.var.arg_strider&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;local strider = ngx.req.get_uri_args[&amp;ldquo;strider&amp;rdquo;]&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;差别在于，当请求uri中有多个同名参数时,ngx.var.arg_xx的做法是取第一个出现的值,ngx.req_get_uri_args[&amp;ldquo;xx&amp;rdquo;]的做法是返回一个table，该table里存放了该参数的所有值，例如,当请求uri为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://pureage.info?strider=1&amp;amp;strider=2&amp;amp;strider=3&amp;amp;strider=4  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;时，ngx.var.arg_strider的值为&amp;rdquo;1&amp;rdquo;,而ngx.req.get_uri_args[&amp;ldquo;strider&amp;rdquo;]的值为table [&amp;ldquo;1&amp;rdquo;, &amp;ldquo;2&amp;rdquo;, &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo;]。因此，ngx.req.get_uri_args属于ngx.var.arg_的增强。&lt;/p&gt;

&lt;p&gt;ngx.var.arg_的实现是直接使用nginx原生的变量支持，nginx相关代码为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngx_http_variable_value_t *  
ngx_http_get_variable(ngx_http_request_t *r, ngx_str_t *name, ngx_uint_t key)  
{  
....(略）....  
if (ngx_strncmp(name-&amp;gt;data, &amp;quot;arg_&amp;quot;, 4) == 0) {  
  
        if (ngx_http_variable_argument(r, vv, (uintptr_t) name) == NGX_OK) {  
            return vv;  
        }  
  
        return NULL;  
    }  
  
    vv-&amp;gt;not_found = 1;  
  
    return vv;  
}  
  
static ngx_int_t  
ngx_http_variable_argument(ngx_http_request_t *r, ngx_http_variable_value_t *v,  
    uintptr_t data)  
{  
    ngx_str_t *name = (ngx_str_t *) data;  
  
    u_char *arg;  
    size_t len;  
    ngx_str_t value;  
  
    len = name-&amp;gt;len - (sizeof(&amp;quot;arg_&amp;quot;) - 1);  
    arg = name-&amp;gt;data + sizeof(&amp;quot;arg_&amp;quot;) - 1;  
  
    if (ngx_http_arg(r, arg, len, &amp;amp;value) != NGX_OK) {  
        v-&amp;gt;not_found = 1;  
        return NGX_OK;  
    }  
  
    v-&amp;gt;data = value.data;  
    v-&amp;gt;len = value.len;  
    v-&amp;gt;valid = 1;  
    v-&amp;gt;no_cacheable = 0;  
    v-&amp;gt;not_found = 0;  
  
    return NGX_OK;  
}  
  
ngx_int_t  
ngx_http_arg(ngx_http_request_t *r, u_char *name, size_t len, ngx_str_t *value)  
{  
    u_char *p, *last;  
  
    if (r-&amp;gt;args.len == 0) {  
        return NGX_DECLINED;  
    }  
  
    p = r-&amp;gt;args.data;  
    last = p + r-&amp;gt;args.len;  
  
    for ( /* void */ ; p &amp;lt; last; p++) {  
  
        /* we need &#39;=&#39; after name, so drop one char from last */  
  
        p = ngx_strlcasestrn(p, last - 1, name, len - 1);  
  
        if (p == NULL) {  
            return NGX_DECLINED;  
        }  
  
        if ((p == r-&amp;gt;args.data || *(p - 1) == &#39;&amp;amp;&#39;) &amp;amp;&amp;amp; *(p + len) == &#39;=&#39;) {  
  
            value-&amp;gt;data = p + len + 1;  
  
            p = ngx_strlchr(p, last, &#39;&amp;amp;&#39;);  
  
            if (p == NULL) {  
                p = r-&amp;gt;args.data + r-&amp;gt;args.len;  
            }  
  
            value-&amp;gt;len = p - value-&amp;gt;data;  
  
            return NGX_OK;  
        }  
    }  
  
    return NGX_DECLINED;  
}  
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>电影，其实是一件非常私人的东西</title>
      <link>https://pureage.info/2014/07/12/movie-cannot-be-shared.html</link>
      <pubDate>Sat, 12 Jul 2014 08:38:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/07/12/movie-cannot-be-shared.html</guid>
      
        <description>&lt;p&gt;看电影，就像其他一切需要调动内心体验的行为，都是非常私人化的，这是无数次教训得出的宝贵经验。它告诉我，自己的看法，不要指望其他任何人能认同。&lt;/p&gt;

&lt;p&gt;很多次沮丧的发现，自己给身边的人倾心推荐的电影，他们看完都表示没有什么感觉。有一个经验是，如果电影看到一半，对方萌萌的抬起头，弱弱的问道，这个电影到底是讲什么的啊？这个时候最聪明的做法是赶紧换别的活动，不要抱有任何也许后面的剧情会让他/她大为震撼的幻想。&lt;/p&gt;

&lt;p&gt;刚开始的时候是心情是很不愉快的，明明这个电影我已经看了三遍了，恨不得次次都有泪点，为啥在您这就一无是处呢？后来，我逐渐领悟到，问题在我，而不在别人。&lt;/p&gt;

&lt;p&gt;只要不是太糟糕的电影，无论什么类型，基本上我都能集中注意力去看的。因为电影于我，是一种精神体验，当你的精神投入到一定程度，有时会觉得自己把别人的人生也经历了一遍。人的一生只有一次，但通过电影，让人生在某种程度上得到了延伸。&lt;/p&gt;

&lt;p&gt;所以，看电影的确是一种非常私人的东西。能陪朋友一起看的，只能是那些“爆米花电影”。&lt;/p&gt;

&lt;p&gt;所以，下次有跟别人一起看电影的欲望时，及时打住。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>两只金鱼</title>
      <link>https://pureage.info/2014/05/29/two-fishes.html</link>
      <pubDate>Thu, 29 May 2014 11:47:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/05/29/two-fishes.html</guid>
      
        <description>&lt;p&gt;最近家里来了两个客人：两只金鱼，一只白色的，一只红色的，我给他们分别取了个名字，小红与小白。于是每天早上出门前，给他们喂点食料，晚上回来后趴在鱼缸前跟他们说两声Hello成了我的一大乐趣。&lt;/p&gt;

&lt;p&gt;几天之后，我发现，当我凑近鱼缸跟他们say Hello的时候，他们会慢慢的游到水面，露头吐出两个泡泡然后迅速沉入水底，仿佛一脸娇羞。一脸娇羞，说明我是一个喜欢歪歪的人，放佛，有说明我并没有歪歪的那么放肆。&lt;/p&gt;

&lt;p&gt;想起小时候貌似看过一个少数民族的传说，一个小伙子家里有条鱼，每天当小伙子出门干活后，那条鱼就跳出鱼缸，变成一个美丽的姑娘，把家里的活都干好。不知道是不是古人和我一样看到了鱼儿冒泡时&amp;rdquo;一脸娇羞&amp;rdquo;的样子，才歪歪出这么个故事的。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>RPM中的%config和%config(noreplace)</title>
      <link>https://pureage.info/2014/04/30/noreplace-in-rpm-spec-file.html</link>
      <pubDate>Wed, 30 Apr 2014 15:43:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/04/30/noreplace-in-rpm-spec-file.html</guid>
      
        <description>&lt;p&gt;打开一个rpm spec文件，在 %files段有一个指令很常见：%config(noreplace)，这个指定到底是干什么用的呢？&lt;/p&gt;

&lt;p&gt;答案是，该指令决定如果一个文件被管理员修改过后，下次更新该文件所在的rpm包时，该文件的存在状态。例如，一般升级软件时，配置文件是不会变化的，而主程序则一般需要被升级（替换）。&lt;/p&gt;

&lt;p&gt;对于spec文件中在%files段的某一个文件，我们要讨论三种情况：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;没有带%config指令。例如：%{_sbindir}/redis-server&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;带了%congfig指令。例如：%config %{_sysconfdir}/redis/redis.conf&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;带了%config(noreplace)指令。例如：%config(noreplace) %{_sysconfdir}/redis/redis.conf&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体一点，包含如下场景：&lt;/p&gt;

&lt;h3 id=&#34;1-一个文件没有被-config或-config-noreplace-指令配置&#34;&gt;1. 一个文件没有被%config或%config(noreplace)指令配置&lt;/h3&gt;

&lt;p&gt;此时，不管该文件在安装完成后，有没有在本地被修改过，当升级该rpm包时，该文件会被这个新的rpm包的里的同名文件替换,（旧文件被删除）。&lt;/p&gt;

&lt;h3 id=&#34;2-一个文件被-config指令配置&#34;&gt;2. 一个文件被%config指令配置&lt;/h3&gt;

&lt;p&gt;此时包含如下情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;该文件在新的rpm包里相对之前的rpm有变化，且在本地没有被修改过。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时执行rpm -Uvh xxxx时，新rpm包里的该文件会替换旧的文件。（旧文件被删除）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;该文件在新的rpm包里相对之前的rpm有变化，且在本地被修改过。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时执行rpm -Uvh xxxx时，新rpm包里的该文件会替换掉掉旧的文件，旧的文件会被保存为xx.rpmsave,如/etc/redis/redis.conf.rpmsave&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;该文件在新的rpm包里相对之前的rpm没有变化，且在本地没有被修改过。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时执行rpm -Uvh xxxx时，新rpm包里的该文件会替换掉旧的文件。（旧文件被删除）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;该文件在新的rpm包里相对之前的rpm没有变化，且在本地被修改过。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时执行rpm -Uvh xxxx时，新rpm包里的该文件不会覆盖旧的文件，旧文件保持不变。&lt;/p&gt;

&lt;h3 id=&#34;3-一个文件被-config-noreplace-指令配置&#34;&gt;3. 一个文件被%config(noreplace)指令配置&lt;/h3&gt;

&lt;p&gt;此时包含如下情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;该文件在新的rpm包里相对之前的rpm有变化，且在本地没有被修改过。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时执行rpm -Uvh xxxx时，新rpm包里的该文件会替换旧的文件。（旧文件被删除）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;该文件在新的rpm包里相对之前的rpm有变化，且在本地被修改过。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时执行rpm -Uvh xxxx时，旧文件保持不变，新rpm包里的该文件并重命名为xx.rpmnew,例如/etc/redis/redis.conf.rpmnew&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;该文件在新的rpm包里相对之前的rpm没有变化，且在本地没有被修改过。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时执行rpm -Uvh xxxx时，新rpm包里的该文件会替换旧的文件。（旧文件被删除）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;该文件在新的rpm包里相对之前的rpm没有变化，且在本地被修改过。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时执行rpm -Uvh xxxx时，新rpm包里的该文件不会覆盖旧的文件，旧文件保持不变。&lt;/p&gt;

&lt;h3 id=&#34;4-总结&#34;&gt;4.总结&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;如果一个文件在%files段没有被%config或%config(noreplace)指令配置;则执行rpm -Uvh时，该文件会无条件被新文件替换。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;无论一个文件有没有被%config或%config(noreplace)指令配置，只要改文件在本地没有被编辑过，则执行rpm -Uvh时，该文件会被新文件替换。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一个被%config或%config(noreplace)指令配置的文件，如果被编辑过，那么在rpm更新时，如果新的rpm包中该文件没有修改，则该文件不会被新rpm包中的文件替换，之前做的编辑依然有效。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一个被%config指令配置的文件，如果被编辑过，且新的rpm包中该文件有修改，则该文件会被重命名为xx.rpmsave, 新文件会替代原文件。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;一个被%config(noreplace)指令配置的文件，如果被编辑过，且新的rpm包中该文件有修改，则该文件不会被新的rpm包中的文件替换，之前做的编辑依然有效；但新rpm包中的同名文件会被重命名为xx.rpmnew.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考：&lt;br /&gt;
&lt;a href=&#34;http://www-uxsup.csx.cam.ac.uk/~jw35/docs/rpm_config.html&#34;&gt;http://www-uxsup.csx.cam.ac.uk/~jw35/docs/rpm_config.html&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>春哥关于Nginx踩坑记（一）的回复</title>
      <link>https://pureage.info/2014/04/30/answer-of-nginx-pitfall-1-by-agentzh.html</link>
      <pubDate>Wed, 30 Apr 2014 02:42:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/04/30/answer-of-nginx-pitfall-1-by-agentzh.html</guid>
      
        <description>&lt;p&gt;对于&lt;a href=&#34;http://pureage.info/2014/04/26/pitfall-of-nginx.html&#34;&gt;Nginx踩坑记（一）&lt;/a&gt;，在openresty的google group上提了个问题：&lt;a href=&#34;https://groups.google.com/forum/#!msg/OpenResty/BHFTTmN366Q/8XMn9UzXuCgJ&#34;&gt;ngx.exec是如何处理上层定义的变量的&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;春哥的回复&lt;strong&gt;摘录&lt;/strong&gt;如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;你这里使用了 rewrite 配置指令来发起内部跳转。其实 rewrite 指令发起的内部跳转非常特殊：它不会从&lt;br /&gt;
server-rewrite 阶段重新开始运行，而是从 find-config 阶段开始执行，所以你上例中写在server {}&lt;br /&gt;
块中的“set $hello hello”并不会在跳转后重新运行一遍，因为 server-rewrite 阶段在跳转后被直接跳过。&lt;/p&gt;

&lt;p&gt;注意，rewrite 配置指令的特殊行为也可以通过下面这一行 ngx_lua 配置来复现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; rewrite_by_lua &#39;ngx.req.set_uri(&amp;quot;/test2&amp;quot;, true)&#39;; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而ngx.exec() 调用（以及其他接口，比如 echo_exec 配置指令）发起的内部跳转的标准行为是从  server-rewrite&lt;br /&gt;
阶段重新开始执行，所以你的“set $hello hello”会被重新执行一遍，从而改写掉 $hello  变量原先的取值（即&amp;rdquo;bye&amp;rdquo;）。&lt;/p&gt;

&lt;p&gt;我或许应该在教程里强调一下这个重要细节 :)&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>Nginx踩坑记（一）</title>
      <link>https://pureage.info/2014/04/26/pitfall-of-nginx.html</link>
      <pubDate>Sat, 26 Apr 2014 13:18:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/04/26/pitfall-of-nginx.html</guid>
      
        <description>&lt;h2 id=&#34;1-预备知识&#34;&gt;1. 预备知识&lt;/h2&gt;

&lt;p&gt;Nginx有两种定义变量的方法，一种是在模块中定义，从而成为内建变量；另一种是在配置文件中通过set指令来定义。&lt;/p&gt;

&lt;p&gt;配置过Nginx的童鞋可能都知道这样一个事实：一个请求在其处理过程中，即使经历多个不同的 location 配置块，它使用的还是同一套 Nginx 变量的副本。&lt;/p&gt;

&lt;p&gt;例如，如果有如下的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location /test1 {  
        set $hello hello;  
        rewrite /test1 /test2 last;

}
  
location /test2 {  
        echo $hello;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虽然变量是定义在location /test1中，但Nginx 变量一旦创建，其变量名的可见范围就是整个 Nginx 配置，所以在/test2中直接使用该变量是不会报错的。另一方面，由于变量的生命周期是与请求相关的，所以如果直接访问/test2,得到的变量$hello是一个空值，而访问/test1,则会内部跳转到/test2,将/test1中赋值的hello打印出来。&lt;/p&gt;

&lt;p&gt;测试如下所示：&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/nginx-1.png&#34; alt=&#34;nginx-1.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-如果变量定义在server处&#34;&gt;2. 如果变量定义在server处&lt;/h2&gt;

&lt;p&gt;例如，如果有如下的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set $hello hello;  
location /test1 {  
        echo $hello;  
}  
  
location /test2 {  
        echo $hello;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么很容易想到，无论是访问/test1还是/test2，都会输出在上层定义的变量$hello的值，测试如下：&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/nginx-2.png&#34; alt=&#34;nginx-2.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;再进一步，假设配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set $hello hello;  
location /test1 {  
        set $hello bye;  
        rewrite /test1 /test2 last;  
}  
  
location /test2 {  
        echo $hello;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则同样很容易想到，如果直接访问/test1，则会先把在server段定义的$hello变量由“hello&amp;rdquo;改写为&amp;rdquo;bye&amp;rdquo;，再进行内部跳转到/test2后，则会输出新的修改过后的变量$hello；而如果直接访问/test2，则会输出在server段定义的变量。测试如下：&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/nginx-3.png&#34; alt=&#34;nginx-3.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-坑来了&#34;&gt;3. 坑来了&lt;/h2&gt;

&lt;p&gt;到现在为止，一切都很正常，上述的知识点也是Nginx配置中的基础知识。但当和ngx_lua模块结合起来时，就时常会碰到比较诡异的事情。&lt;br /&gt;
假设配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set $hello hello;  
  
location /test1 {  
        content_by_lua &#39;  
                ngx.var.hello = &amp;quot;bye&amp;quot;;  
                ngx.exec(&amp;quot;/test2&amp;quot;);  
        &#39;;  
}  
  
location /test2 {  
        echo &amp;quot;in test2&amp;quot;;  
        echo $hello;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们来猜猜分别访问/test1和/test2，会输出什么。首先,server段已经定义了变量$hello为字符串&amp;rdquo;hello&amp;rdquo;，直接访问/test1时，会将其修改为&amp;rdquo;bye&amp;rdquo;，然后执行ngx.exec跳转到/test2，输出变量$hello。但经过测试，分别访问/test1和/test2的时候，结果如下所示：&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/nginx-4.png&#34; alt=&#34;nginx-4.png&#34; /&gt;&lt;br /&gt;
是不是很奇怪？直接访问/test2输出hello是正常的，可是访问/test1居然也是输出hello，在/test1中对hello变量的更改似乎没起作用。&lt;/p&gt;

&lt;p&gt;到底/test1的content_by_lua段中，对变量$test的修改起作用没，我们可以测试一下，添加一行调试代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set $hello hello;  
  
location /test1 {  
        content_by_lua &#39;  
                ngx.var.hello = &amp;quot;bye&amp;quot;;  
                ngx.log(ngx.ERR, ngx.var.hello);  
                ngx.exec(&amp;quot;/test2&amp;quot;);  
        &#39;;  
}  
  
location /test2 {  
        echo &amp;quot;in test2&amp;quot;;  
        echo $hello;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再次访问/test1，我们会发现，在log中记录下来了此时的$hello变量为&amp;rdquo;bye&amp;rdquo;。可是为什么执行内部跳转到/test2后，输出的结果还是&amp;rdquo;hello&amp;rdquo;呢？&lt;/p&gt;

&lt;p&gt;我们再次改造一下配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location /test1 {  
        set $hello hello;  
        content_by_lua &#39;  
                ngx.var.hello = &amp;quot;bye&amp;quot;;  
                ngx.log(ngx.ERR, ngx.var.hello);  
                ngx.exec(&amp;quot;/test2&amp;quot;);  
        &#39;;  
}  
  
location /test2 {  
        echo &amp;quot;in test2&amp;quot;;  
        echo $hello;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和上面的区别在于，这次将变量的定义从server段迁到了location /test1中，在/test1中的content_by_lua段对其进行修改，再执行内部跳转到/test2。测试结果如下：&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/nginx-5.png&#34; alt=&#34;nginx-5.png&#34; /&gt;&lt;br /&gt;
这次的结果显然是符合我们的预期的。直接访问/test1，由于在content_by_lua中将$hello变量更改为&amp;rdquo;bye&amp;rdquo;了，所以当内部跳转到/test2时，输出$hello变量就会输出“bye&amp;rdquo;；如果直接访问/test2，则由于此时并没有对$hello变量赋值，所以$hello变量为空。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>svn log不显示当前提交</title>
      <link>https://pureage.info/2014/04/17/svn-log.html</link>
      <pubDate>Thu, 17 Apr 2014 03:56:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/04/17/svn-log.html</guid>
      
        <description>&lt;p&gt;关于svn log，我之前的工作方式一般都是这样：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;执行commit操作时，不限平台。一般提交代码，会在Linux工作环境下用svn commit命令，提交文档则是在Windows下用TortoiseSVN客户端提交。这主要是本着方便的原则，因为代码一般是在Linux下编辑和测试的，文档是在Windows下编辑的。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;执行log操作时，在Windows下。使用TortoiseSVN查看版本日志以及各版本提交内容变化实在太方便了。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最近由于办公环境网络的变化，在Windows下无法用TortoiseSVN连接到仓库了，只能在Linux下进行。这样就无法在Windows下看版本日志了，好在也就只是一个svn log命令，简单明了。但使用中还是有一个要注意的地方。&lt;/p&gt;

&lt;p&gt;在使用TortoiseSVN客户端查看日志时，即使当前工作目录版本是某个历史版本，也能看到最新的版本记录情况。&lt;/p&gt;

&lt;p&gt;而直接使用svn log命令时，默认只显示当前工作目录的log。&lt;/p&gt;

&lt;p&gt;假设当前工作目录已经是最新了，在此基础上，对一个文件A提交了commit，此时在当前目录下执行svn log -l 1 无法看到这次提交的log，如果想要看到，必须先执行svn update, 即使当前的工作目录下内容已经是最新的了；而执行svn log A -l 1则可以。&lt;/p&gt;

&lt;p&gt;原因在于svn对于文件及其父目录是分开管理版本号的。更新了一个文件，该文件的版本号是更新了，但该文件坐在的目录的版本号并没有更新。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>程序员中的标杆人物-章亦春</title>
      <link>https://pureage.info/2014/04/12/agentzh.html</link>
      <pubDate>Fri, 11 Apr 2014 16:02:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/04/12/agentzh.html</guid>
      
        <description>&lt;p&gt;这标题，怎么读着这么别扭。&lt;/p&gt;

&lt;p&gt;接触开源软件这几年，不知不觉形成了一种印象，大牛一般都是有性格有棱角的，传说中的神人如Linus就不用多说了，身边的同学和同事中，技术牛人性格也一般比较桀骜。桀骜的表现之一就是不会浪费时间去回答一些基本的问题，最著名的就是那篇流传已久的论坛发帖指南了吧。&lt;/p&gt;

&lt;p&gt;自己虽然算不上牛人，但在某些方面也会有同事来求助，碰到一些比较低端的问题，其实心里会有烦躁的。烦躁的程度与当时的心情、手里有多少活正在干等因素相关。&lt;/p&gt;

&lt;p&gt;直到有一天我接触到了章哥。&lt;/p&gt;

&lt;p&gt;章哥是同行对章亦春的尊称，我也无缘与章哥真正面对面接触，但文如其人，阅读他的博客，他写的文档，以及在论坛中对人的回复，就可以肯定他有着一般技术人难以企及的修养。&lt;/p&gt;

&lt;p&gt;在openresty的google group中，随手摘取一条，贴在下面，时时自省。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!searchin/openresty/dict/openresty/0dtgxIgCOPM/LXf2RXvaDh4J&#34;&gt;https://groups.google.com/forum/#!searchin/openresty/dict/openresty/0dtgxIgCOPM/LXf2RXvaDh4J&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A:&lt;br /&gt;
我这边有一个案例需要用到遍历字典操作，请问这个功能如何实现？修改源码？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;agentzh&lt;/strong&gt;:&lt;br /&gt;
Brian Akins 已经提供了一个补丁，可以看这里的相关讨论：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/chaoslawful/lua-nginx-module/pull/170&#34;&gt;https://github.com/chaoslawful/lua-nginx-module/pull/170&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这两天我会尝试将一个经过修订的版本合并到 ngx_lua 的主干。&lt;/p&gt;

&lt;p&gt;另：同时抄送给 openresty 中文邮件列表：&lt;a href=&#34;https://groups.google.com/group/openresty&#34;&gt;https://groups.google.com/group/openresty&lt;/a&gt;&lt;br /&gt;
（国内访问可能需要翻墙）也欢迎你加入该列表并在那里和我们讨论这样的问题 :) 多谢！&lt;/p&gt;

&lt;p&gt;Best regards,&lt;/p&gt;

&lt;p&gt;B:&lt;br /&gt;
我之前也写过所有keys的一个补丁，章老师看看？呵呵。&amp;gt;&lt;a href=&#34;https://gist.github.com/74439ea9fac084e43932&#34;&gt;https://gist.github.com/74439ea9fac084e43932&lt;/a&gt;&lt;br /&gt;
blog: &lt;a href=&#34;http://chenxiaoyu.org&#34;&gt;http://chenxiaoyu.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A:&lt;br /&gt;
Hi,B.验证了你的实现，可以通过。不过我有一个问题在于，做keys操作的时候，锁会不会阻塞整个worker?如果时间长了，其他的写入会不会受到影响。&lt;br /&gt;
毕竟对整个TREE，其他线程都阻塞了。&lt;br /&gt;
我想实现一个类似切换DUMP的功能，dump那一刻，切换入口到新的tree上，新tree是老的tree的复制，从入口开始遍历全部NODE即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;agentzh&lt;/strong&gt;:&lt;br /&gt;
Hello!&lt;br /&gt;
2012/10/19 铁轮:&lt;br /&gt;
共享内存字典是作为缓存来设计的，类似 memcached，而不是被设计成像 redis 那样的支持持久化的存储。&lt;/p&gt;

&lt;p&gt;所以一开始其实我也并不想添加 get_keys 这样的方法，因为对于元素非常多的字典，必然会锁比较长的时间。现在添加 get_keys&lt;br /&gt;
方法属于“make hard things possible”，但绝不应滥用 :)&lt;/p&gt;

&lt;p&gt;*我想实现一个类似切换DUMP的功能，dump那一刻，切换入口到新的tree上，新tree是老的tree的复制，从入口开始遍历全部NODE即可*。&lt;/p&gt;

&lt;p&gt;你说的这种做法的最大问题是，从老 tree 复制出新 tree 在 ngx_lua 共享内存字典现有的结构中代价会高于 get_keys()遍历本身。数据结构中的指针都需要重新设置，不能直接按块复制共享内存中的所有数据，同时整个复制的全过程还是需要锁定。&lt;/p&gt;

&lt;p&gt;值得一提的是，Redis 的 RDB 持久化方法 [1] 借用了 fork()系统调用来保证一致性，同时避免了对线上访问的直接干扰。另外，fork 可以利用到系统的 copy-on-write机制，所以也很省内存。Redis 服务器是单线程单进程的服务，所以 fork 很合适。但对于多 worker使用共享内存的场景，这种做法就不再适用了。&lt;/p&gt;

&lt;p&gt;Redis 的 AOF 持久化方法通过追加记录所有写操作的日志文件来在重构整个存储，倒是可以用于 ngx_lua的共享内存字典中，但在写入频繁的时候，其引入的额外开销还是不容忽视的。&lt;/p&gt;

&lt;p&gt;正如前面所提到的，ngx_lua 目前的共享内存字典实现是针对缓存场景设计的，所以我也不会把它实现得过于复杂。或许未来我们可以在ngx_lua 模块之外，通过专门的 Nginx C 模块实现可以供 Lua 使用的其他的更加 redis 的共享存储 :)&lt;/p&gt;

&lt;p&gt;Best regards,&lt;br /&gt;
-agentzh&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;http://redis.io/topics/persistence&#34;&gt;http://redis.io/topics/persistence&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>研发与销售的一些区别</title>
      <link>https://pureage.info/2014/03/31/difference-of-rd-and-sales.html</link>
      <pubDate>Mon, 31 Mar 2014 10:27:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/03/31/difference-of-rd-and-sales.html</guid>
      
        <description>&lt;p&gt;身为一名开发人员，因为一些机会接触过一些销售，其中有些是非常优秀的销售。在与他们打交道的过程之中，能明显感觉到研发与销售的区别。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;销售们通常是外向型的&lt;/strong&gt;。当然，并不一定是说他们的性格本身就外向的，而是他们的工作方式、工作态度会给人一种他们很外向的印象。例如，某位金牌销售，每周都会在社交网络上写一些文章，分享、感悟之类。而我接触到的包括我自己在内的研发，基本上都是埋头干自己的事情。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;销售们通常比研发要更成熟&lt;/strong&gt;。工作中接触到的印象深刻的销售们，现在都是接近或已经是90后了。但他们在为人处世上比同龄的研发要厉害很多。这也很正常，跟学习、工作经历密不可分。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;销售们通常比研发更敢于将自己的“野心”公布于众&lt;/strong&gt;。至少到目前为止，我碰见的销售们，都会直言不讳的说，自己以后肯定是要开公司的，而一个研发如果经常把这些话挂在嘴边，多少会给领导、同事一种不稳定的感觉，这家伙会不会马上就要跳槽了？这也是由研发与销售不同的工作性质决定的。众所周知，销售的薪水是和业绩直接挂钩的，因为他的业绩直接跟公司的收入相关。所以，销售是一个以结果论英雄的职业，事情办成了就好，至于你的野心，公司是不会怎么管的。&lt;/p&gt;

&lt;p&gt;所以，不同的性格、经历，以及工作性质，导致了研发与销售无论在外在气质，还是心胸抱负之间的差别。虽然说，这些差别不能说明哪种更优越，但多了解一下同龄人是一个什么状态，对于我们这些整天待在自己小圈子的程序员还是很有帮助的。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>从HTTP Range请求谈标准是如何被破坏的</title>
      <link>https://pureage.info/2014/02/26/how-standard-is-broken.html</link>
      <pubDate>Tue, 25 Feb 2014 16:14:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/02/26/how-standard-is-broken.html</guid>
      
        <description>&lt;p&gt;如今cdn已成为互联网上的基础设施，会与形形色色的公司打交道。其中既有一些拿着政府资金，结果只让你草草布一个Nginx代理就完事的；也有现在那些中国最强势的互联网公司。这里只说互联网公司，为什么它们强势呢？一方面，它们拥有着巨大的流量，中国的cdn市场竞争又如此激烈，一个不爽，把量切走，反正排队等着为我服务的cdn厂商多的很；另一方面，它们本身的技术积累都很强，所以提起需求来是毫不手软，底气十足。&lt;/p&gt;

&lt;p&gt;但这些有着深厚技术积累的公司，有时候提出来的需求只能让人苦笑。&lt;/p&gt;

&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;p&gt;A是中国目前最大的互联网公司之一，它的视频当然流量也很大。按照业内惯例，它会把内容同时让多家cdn厂商服务，然后定期进行打分，排名。参与打分的指标很多，最典型的就是一些4XX的错误请求。所以，cdn厂商的运维及管理人员，会很重视这些指标。&lt;/p&gt;

&lt;p&gt;最近，运维发现服务器上有很多416请求。416是Range错误的响应码，除去一些正常的416外，运维还发现有一类416请求的Range头是:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Range: byptes=XXXX-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;XXXX是个非0的数。很明显，这是一个错误的Range请求，之所以会出现这样的Range，是因为对方的播放器bug导致。但A公司要求，把XXX-0按照xxx-来处理。&lt;/p&gt;

&lt;p&gt;我们知道，在HTTP协议中规定的是，一个Range头可以有如下形式（假设文件大小为1000个字节）：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;bytes=0-499(前500个字节）&lt;br /&gt;
bytes=500-999（第二个500个字节）&lt;br /&gt;
bytes=-500（最后500个字节）&lt;br /&gt;
bytes=9500-（与上同，最后500个字节）&lt;br /&gt;
bytes=0-0,-1（第一个字节和最后一个字节）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么到底有没有bytes=500-0这样的range呢？我们从标准和实现两方面来考虑。&lt;/p&gt;

&lt;h3 id=&#34;标准&#34;&gt;标准&lt;/h3&gt;

&lt;p&gt;参考RFC2616 14.35.1节&lt;br /&gt;
&amp;gt;If the last-byte-pos value is present, it MUST be greater than or equal to the first-byte-pos in that byte-range-spec, or the byte-range-spec is syntactically invalid. The recipient of a byte-range-set that includes one or more syntactically invalid byte-range-spec values MUST ignore the header field that includes that byte-range-set.&lt;/p&gt;

&lt;p&gt;所以，理论上，bytes=500-0这样的range段，是错误的。&lt;/p&gt;

&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;

&lt;p&gt;以Nginx为例，我们来看看代码中是如何处理的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static ngx_int_t  
ngx_http_range_parse(ngx_http_request_t *r, ngx_http_range_filter_ctx_t *ctx,  
    ngx_uint_t ranges)  
{  
    u_char            *p;  
    off_t              start, end, size, content_length;  
    ngx_uint_t         suffix;  
    ngx_http_range_t  *range;  
  
    p = r-&amp;gt;headers_in.range-&amp;gt;value.data + 6;  
    size = 0;  
    content_length = r-&amp;gt;headers_out.content_length_n;  
  
    for ( ;; ) {  
        start = 0;  
        end = 0;  
        suffix = 0;  
  
        while (*p == &#39; &#39;) { p++; }  
  
        if (*p != &#39;-&#39;) {  
            if (*p &amp;lt; &#39;0&#39; || *p &amp;gt; &#39;9&#39;) {  
                return NGX_HTTP_RANGE_NOT_SATISFIABLE;  
            }  
  
            while (*p &amp;gt;= &#39;0&#39; &amp;amp;&amp;amp; *p &amp;lt;= &#39;9&#39;) {  
                start = start * 10 + *p++ - &#39;0&#39;;  
            }  
  
            while (*p == &#39; &#39;) { p++; }  
  
            if (*p++ != &#39;-&#39;) {  
                return NGX_HTTP_RANGE_NOT_SATISFIABLE;  
            }  
  
            while (*p == &#39; &#39;) { p++; }  
  
            if (*p == &#39;,&#39; || *p == &#39;\0&#39;) {  
                end = content_length;  
                goto found;  
            }  
  
        } else {  
            suffix = 1;  
            p++;  
        }  
  
        if (*p &amp;lt; &#39;0&#39; || *p &amp;gt; &#39;9&#39;) {  
            return NGX_HTTP_RANGE_NOT_SATISFIABLE;  
        }  
  
        while (*p &amp;gt;= &#39;0&#39; &amp;amp;&amp;amp; *p &amp;lt;= &#39;9&#39;) {  
            end = end * 10 + *p++ - &#39;0&#39;;  
        }  
  
        while (*p == &#39; &#39;) { p++; }  
  
        if (*p != &#39;,&#39; &amp;amp;&amp;amp; *p != &#39;\0&#39;) {  
            return NGX_HTTP_RANGE_NOT_SATISFIABLE;  
        }  
  
        if (suffix) {  
            start = content_length - end;  
            end = content_length - 1;  
        }  
  
        if (end &amp;gt;= content_length) {  
            end = content_length;  
  
        } else {  
            end++;  
        }  
  
    found:  
  
        if (start &amp;lt; end) {  
            range = ngx_array_push(&amp;amp;ctx-&amp;gt;ranges);  
            if (range == NULL) {  
                return NGX_ERROR;  
            }  
  
            range-&amp;gt;start = start;  
            range-&amp;gt;end = end;  
  
            size += end - start;  
  
            if (ranges-- == 0) {  
                return NGX_DECLINED;  
            }  
        }  
  
        if (*p++ != &#39;,&#39;) {  
            break;  
        }  
    }  
  
    if (ctx-&amp;gt;ranges.nelts == 0) {  
        return NGX_HTTP_RANGE_NOT_SATISFIABLE;  
    }  
  
    if (size &amp;gt; content_length) {  
        return NGX_DECLINED;  
    }  
  
    return NGX_OK;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; found:  
  
        if (start &amp;lt; end) {  
            range = ngx_array_push(&amp;amp;ctx-&amp;gt;ranges);  
            if (range == NULL) {  
                return NGX_ERROR;  
            }  
  
            range-&amp;gt;start = start;  
            range-&amp;gt;end = end;  
  
            size += end - start; 
  
            if (ranges-- == 0) {  
                return NGX_DECLINED;  
            }  
        }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表明，只有start&amp;lt;end的，才会后续进行range处理。这里的start，是指bytes=a-b中的a，end指的是b+1。&lt;/p&gt;

&lt;p&gt;所以，在HTTP服务器的典型实现上，Range: bytes=500-0也是错误的请求。&lt;/p&gt;

&lt;h3 id=&#34;现实世界&#34;&gt;现实世界&lt;/h3&gt;

&lt;p&gt;好了，从理论和典型实现上讨论了Range头之后，我们回到第三次元，现实世界。&lt;/p&gt;

&lt;p&gt;可以猜想，出现这个问题的原因是A公司的播放器开发人员代码的一处bug导致。但由于它们是甲方，所以我们应该予以配合。结果是我们在服务器端将&lt;code&gt;Range: bytes=500-0&lt;/code&gt;这类的请求与&lt;code&gt;Range: bytes=500-&lt;/code&gt;等同处理。&lt;/p&gt;

&lt;p&gt;解决起来很简单，非常简单。但是，好好的标准就这么被破坏了。可以想象，A是Top级的互联网大佬，某家cdn帮他们解决这种Range错误了，它肯定会对其他cdn商家说，这个很简单，那谁都是这么处理的。然后，中国所有的cdn商家都这么处理了。再然后，没人记的这东西是否遵循标准了，即使有人拿标准说起，也会被老人们这么教育：&amp;rdquo;标准只是理想情况，现实中的实现，是复杂多变的&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;更没人会记得，罪魁祸首是某个倒霉的播放器程序猿。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>送礼要抓紧</title>
      <link>https://pureage.info/2014/02/23/gift-not-sent-out.html</link>
      <pubDate>Sun, 23 Feb 2014 15:31:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/02/23/gift-not-sent-out.html</guid>
      
        <description>&lt;p&gt;标题是故意夸张了，送礼的对象不是领导、上级，而是朋友，同学等。有时候，会忽然想起给身边亲近的或关系好的人送个小礼物，但我发现自己在这方面的拖延症患的不轻。&lt;/p&gt;

&lt;p&gt;举两个例子。&lt;/p&gt;

&lt;h3 id=&#34;一-海盗&#34;&gt;一.海盗&lt;/h3&gt;

&lt;p&gt;我和女友在一个学校读研，我比她高一届，也就是说，我们一起在学校度过了两年的时光。我们经常在吃完晚饭后，去教研室之前，来到学校的超市里逛逛。有时候是一人一根冰激凌，有时候是一包薯片，然后坐在超市门口的长凳上消磨十几分钟的时光。长凳的一边是超市，另外一边是一家书店，名曰智博书店。其实除了去逛逛超市，我们更多会逛逛这个书店。但不管怎么样，我们总会在外面这个长凳上坐个十几分钟，当时能不能看到夕阳现在不记得了，但回忆起来总觉得有。&lt;/p&gt;

&lt;p&gt;有时候我们会面朝书店，有时候会面朝超市。当我们面朝超市时，我们面前是超市的玻璃墙，里面是位于超市里的一个迷你的礼品店，透过玻璃能看到陈列的礼物，有几个小猪，有一个骷髅头，有几个类似于猪八戒背媳妇风格的娃娃，还有一个裹着红色头巾的海盗。&lt;/p&gt;

&lt;p&gt;不知道哪一天，我突然想，我把这个海盗送给她吧，想起这茬的原因是可能我们都很喜欢《加勒比海盗》，喜欢杰克船长。然后会想，嗯，明天再一个人过来买了送给她吧。可我一个人来的时候，却要么没想起来，要么当时有别的理由，说下次再买吧。终于有一天，我们再次在长凳上望着那面玻璃墙时，我们发现那个海盗已经不在上面了。&lt;/p&gt;

&lt;h3 id=&#34;二-口琴&#34;&gt;二.口琴&lt;/h3&gt;

&lt;p&gt;毕业后，我来到深圳华为，大队培训一周后，来到部门报到，部门报到一周后，就和一起入职的另外六个新人在另一个老同事的带领下，去北京出差了四个半月。业内人士都知道，这个不叫出差，叫异地研发。&lt;/p&gt;

&lt;p&gt;这个老同事人称彪哥。虽然他在这里干了七年，但看上去一点都不老；虽然他的名字中有一个“彪”字，但他无论容貌还是性格，都跟“彪”字严重不符。于是我们一帮菜鸟，在他的带领下，在北京完成了跌跌撞撞的、忐忐忑忑的职业生涯最初几个月。&lt;/p&gt;

&lt;p&gt;北京几个月的生活是极其单调的，住在一家名为青年公寓的旅店。周一到周六，每天早上七点起床，七点半出发，走几分钟路程，路过一个公园，看几个大姐大妈跳健身操，拐个十字路口乘上公司的大巴，坐四十分钟到公司；晚上九点多，在公司门口乘上大巴，原方向返回，路过那个公园，看几个小孩跳鬼步舞，走几分钟路程，回到青年公寓。&lt;/p&gt;

&lt;p&gt;星期天是休息的。我们会一起中午起床，到附近一家饭店点上几个菜吃个午饭，然后散开各忙各事，晚上三三两两吃完晚饭后，我们会一起到路边一家烧烤店里一人拿一瓶啤酒，叫上几十根羊肉串。&lt;/p&gt;

&lt;p&gt;对于读者来说，这些文字和彪哥无关。对于我来说，这些文字是一幅一副或连续或断裂的画面，这些画面的每一帧里，几乎都有彪哥的影子。&lt;/p&gt;

&lt;p&gt;彪哥有一个刚出生几个月的儿子，和他老婆、爸妈一起在武汉。彪哥没带笔记本电脑出来，所以隔个三两天，就会借我的电脑用上个十来分钟，然后我就会缠着他要最新的他儿子的照片或视频。对我来说，所有的几个月大的小孩都很可爱，对彪哥来说当然不是如此。无论是在深圳，还是在北京，他公司用的电脑的桌面都是他的儿子。&lt;/p&gt;

&lt;p&gt;彪哥是个典型的技术男，与世无争，干事踏实低调。也正因为如此，他在这里干了七年但仍是个普通员工，部门里和他同一批的基本都是PL或是XXX专家头衔了。&lt;/p&gt;

&lt;p&gt;某一天，我想要给彪哥的儿子送个礼物。我自己喜欢吹口琴，走哪都带着，因此想到了送这么个能发声的小玩意也许不错，他家里会更添几分热闹。但跟上面的故事一样，在北京的四个多月，以及回到深圳后的几个月，我都没能送出这个小小的礼物。&lt;/p&gt;

&lt;p&gt;现在我已早已离开深圳近一年了。那些事情想起来既近又远，既清晰又模糊。如果问我那近一年里有什么遗憾吗？我首先想到的不是初入职场心态各种不积极，不会排解压力，不会推事情；而是这个没有送出去的口琴。&lt;/p&gt;

&lt;h3 id=&#34;三-最后&#34;&gt;三.最后&lt;/h3&gt;

&lt;p&gt;读书时，不止一次想起过要把《唐诗三百首》背完，也实践了不止一次。但几乎每次，都是在重复第一首和最后一首，大家都会懂得。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;感遇&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;《感遇》&lt;br /&gt;
张九龄&lt;/p&gt;

&lt;p&gt;　&lt;br /&gt;
兰叶春葳蕤，桂华秋皎洁。
欣欣此生意，自尔为佳节。
谁知林栖者，闻风坐相悦。
草木有本心，何求美人折？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;金缕衣&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;《金缕衣》&lt;br /&gt;
杜秋娘&lt;/p&gt;

&lt;p&gt;劝君莫惜金缕衣，劝君惜取少年时。
花开堪折直须折，莫待无花空折枝。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不管这两首诗本意是什么，我现在想起的是，感谢让我遇见你，那些憾事，现在开始，也并未晚。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>关于nginx中的host变量</title>
      <link>https://pureage.info/2014/02/22/host-variable-in-nginx.html</link>
      <pubDate>Fri, 21 Feb 2014 19:51:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/02/22/host-variable-in-nginx.html</guid>
      
        <description>&lt;p&gt;关于变量host，在Nginx的官网wiki中是如下说明的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$host：in this order of precedence: host name from the request line, or host name from the “Host” request header field, or the server name matching a request&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;直白的翻译一下:host变量的值按照如下优先级获得：
1. 请求行中的host.&lt;br /&gt;
2. 请求头中的Host头部.&lt;br /&gt;
3. 与一条请求匹配的server name.&lt;/p&gt;

&lt;p&gt;很清楚，有三点，取优先级最高的那个。仅从字面意思上来理解，这个选择的过程为：如果请求行中有host信息，则以请求行中的host作为host变量的值（host与host变量不是一个东西，很拗口）；如果请求行中没有host信息，则以请求头中的Host头的值作为host变量的值；如果前面两者都没有，那么host变量就是与该请求匹配所匹配的serve名。&lt;/p&gt;

&lt;p&gt;为了表示语气的加强，再重复一遍，这个规则包含了&lt;strong&gt;三个&lt;/strong&gt;步骤。&lt;/p&gt;

&lt;p&gt;但由于某种不知名的原因，网上能找到的大部分关于该变量的说明都只包含两点。&lt;/p&gt;

&lt;p&gt;例如这个：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$host&lt;/p&gt;

&lt;p&gt;请求中的Host字段，如果请求中的Host字段不可用，则为服务器处理请求的服务器名称。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再例如这个：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$host, 请求信息中的&amp;rdquo;Host&amp;rdquo;，如果请求中没有Host行，则等于设置的服务器名;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;这些说法都是错误的&lt;/strong&gt;。它们将一个本来很有内涵的东西向读者隐藏起来，如果你只是一扫而过，在心里默念，哦，这个变量原来是这样的，很简单嘛，那就会错过很多东西。下面就来详细的说明一下该变量。&lt;/p&gt;

&lt;h3 id=&#34;1-什么是请求行中的host&#34;&gt;1.什么是请求行中的host?&lt;/h3&gt;

&lt;p&gt;我们知道，HTTP是一个文本协议，建立在一个可靠的传输层协议之上。这个传输层协议要是可靠的，面向连接的。由于TCP的普及程度，让它成了HTTP下层协议事实上的标准。但我们要知道，HTTP并不仅限于建立在TCP之上。只要是可靠的，面向连接的传输层协议，都可以用来传输HTTP。下面所说的HTTP，都是指搭载在TCP之上的HTTP。&lt;/p&gt;

&lt;p&gt;一个HTTP请求过程是这样的，客户端先与服务器建立起TCP连接，然后再与服务器端进行请求和回复的收发。请求包含请求行、请求头和请求体，其中，根据请求方法的不同，请求体是可选的。&lt;/p&gt;

&lt;p&gt;下面开始说请求行。&lt;/p&gt;

&lt;p&gt;在发送请求行之前，客户端与服务器已经建立了连接。所以此时请求行中并不需要有服务器的信息。例如，可以如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GET /index.php HTTP/1.1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这就是一个完整的HTTP请求行。虽然请求行中不需要有服务器的信息，但仍然可以在请求行中包含服务器的信息。例如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GET www.pureage.info/index.php HTTP/1.1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;两者一比较，就很容易理解什么叫请求行中的host了。第一个请求行中，就没有host，第二种请求行中，就带了host，为wwww.pureage.info。&lt;/p&gt;

&lt;h3 id=&#34;2-host请求头与http-1-0-http-1-1&#34;&gt;2.Host请求头与HTTP/1.0、HTTP/1.1&lt;/h3&gt;

&lt;p&gt;一个请求，请求行下面就是一些列的请求头。这些请求头，在HTTP/1.0中，都是可选的，且HTTP/1.0不支持Host请求头；而&lt;strong&gt;在HTTP/1.1中，Host请求头部必须存在&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;除了阅读RFC2616来确认这一点外，我们来看看Nginx中的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngx_int_t  
ngx_http_process_request_header(ngx_http_request_t *r)  
...(略)...  
if (r-&amp;gt;headers_in.host == NULL &amp;amp;&amp;amp; r-&amp;gt;http_version &amp;gt; NGX_HTTP_VERSION_10) {  
        ngx_log_error(NGX_LOG_INFO, r-&amp;gt;connection-&amp;gt;log, 0,  
                   &amp;quot;client sent HTTP/1.1 request without \&amp;quot;Host\&amp;quot; header&amp;quot;);  
        ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);  
        return NGX_ERROR;  
...(略)...  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即，如果协议版本在HTTP/1.0之上，且请求头部没有Host的话，会直接返回一个Bad Request错误响应。&lt;/p&gt;

&lt;h3 id=&#34;3-什么是与请求匹配的server-name&#34;&gt;3.什么是与请求匹配的server name?&lt;/h3&gt;

&lt;p&gt;server name是指在Nginx配置文件中，在server块中，用server_name指令设置的值。一个server可以多次使用server_name指令，来实现俗称的“虚拟主机”。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {  
    listen      80;  
    server_name example.org www.example.org;  
    ...  
}  
  
server {  
    listen      80;  
    server_name example.net www.example.net;  
    ...  
}  
  
server {  
    listen      80;  
    server_name example.com www.example.com;  
    ...  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于虚拟主机的确定方法，还是引用Nginx的官方文档：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在这个配置中，nginx仅仅检查请求的“Host”头以决定该请求应由哪个虚拟主机来处理。如果Host头没有匹配任意一个虚拟主机，或者请求中根本没有包含Host头，那nginx会将请求分发到定义在此端口上的默认虚拟主机。在以上配置中，第一个被列出的虚拟主机即nginx的默认虚拟主机——这是nginx的默认行为。而且，可以显式地设置某个主机为默认虚拟主机，即在&amp;rdquo;listen&amp;rdquo;指令中设置&amp;rdquo;default_server&amp;rdquo;参数：&lt;/p&gt;

&lt;p&gt;server {&lt;br /&gt;
   listen      80 default_server;&lt;br /&gt;
   server_name example.net www.example.net;&lt;br /&gt;
   &amp;hellip;&lt;br /&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;4-整理一下&#34;&gt;4.整理一下&lt;/h3&gt;

&lt;p&gt;上面所有的说明，都仅仅是解释了Nginx官方文档中关于host变量选择的三个来源值。不过，知道了这三个值是什么，怎么来的，以及HTTP/1.0与HTTP/1.1的区别，我们就能彻底搞清楚这个host变量是怎么确定的了。&lt;/p&gt;

&lt;p&gt;首先，无论是HTTP/1.0还是HTTP/1.1请求，只要请求行中带了主机信息，那么host变量就是该请求行中所带的host。需要注意的是，host变量是不带端口号的。&lt;/p&gt;

&lt;p&gt;所以，下面两条请求的host变量都是www.pureage.info:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GET &lt;a href=&#34;http://www.pureage.info/index.php&#34;&gt;http://www.pureage.info/index.php&lt;/a&gt; HTTP/1.0&lt;br /&gt;
GET &lt;a href=&#34;http://www.pureage.info/index.php&#34;&gt;http://www.pureage.info/index.php&lt;/a&gt; HTTP/1.1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其次，假设请求行中不带主机信息，那么我们就来看请求头部中的Host头。此时HTTP/1.0请求和HTTP/1.1请求的表现就大不相同了。有如下几种情况：&lt;/p&gt;

&lt;p&gt;1.HTTP/1.0请求，不带Host头&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GET /index.php HTTP/1.0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此时，host变量为与该请求匹配的虚拟主机的主机名，及在nginx配置文件中与之匹配的server段中server_name指令设置的值。如果该server中没有使用&lt;code&gt;server_name&lt;/code&gt;指令，那么host变量就是一个空值，不存在。&lt;/p&gt;

&lt;p&gt;2.HTTP/1.0请求，带Host头&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GET /index.php HTTP/1.0&lt;br /&gt;
Host: www.pureage.info&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此时，host变量即为www.pureage.info&lt;/p&gt;

&lt;p&gt;3.HTTP/1.1请求，不带Host头&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GET /index.php HTTP/1.1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如前所述，HTTP/1.1请求必须携带Host头部。所以这种情况，请求会返回一个Bad Request错误响应。host变量当然就更不存在了。&lt;/p&gt;

&lt;p&gt;4.HTTP/1.1请求，带Host头&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GET /index.php HTTP/1.1&lt;br /&gt;
Host: www.pureage.info&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此时，host变量即为www.pureage.info&lt;/p&gt;

&lt;p&gt;通过上面的例子，可以看出，对于HTTP/1.1请求，host变量不会为空，它要么在请求行中指定，要么在Host头部指定，要么就是一条错误的请求；而对于HTTP/1.0请求，host变量有为空的情况，即请求行和请求头中没有指定host，且匹配的server也没有名称时。&lt;/p&gt;

&lt;h3 id=&#34;5-验证&#34;&gt;5.验证&lt;/h3&gt;

&lt;p&gt;可以搭建一台Nginx服务器，用telnet来验证上面的说法。此处略过，但这个操作很有必要。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>依赖一个RPM来制作新的RPM</title>
      <link>https://pureage.info/2014/01/27/176.html</link>
      <pubDate>Mon, 27 Jan 2014 03:41:46 +0000</pubDate>
      
      <guid>https://pureage.info/2014/01/27/176.html</guid>
      
        <description>&lt;p&gt;项目中有这样一个场景：A软件通过RPM包发布，B软件严重依赖A软件，但在它的基础上有一些业务逻辑的添加和修改。A软件是公司一个历史悠久的产品，且保持频繁的更新，B软件是我在维护。&lt;/p&gt;

&lt;p&gt;在开发的时候，很简单，先把某一个稳定版本的A软件安装到开发机上，然后直接进行业务逻辑的开发就可以了。但在发布的时候肯定就不能这么做了，你很难要求运维先去发布服务器上下载一个A软件的rpm包，安装或更新完后，再去发布服务器上下载一个B软件的业务逻辑包，再进行相关的配置。如果是一台机器就罢了，几十上百台服务器这样玩就是作死。所以，我需要做出一个B软件的独立的rpm包，用这个rpm包安装或更新后，直接能进行相关的配置。&lt;/p&gt;

&lt;p&gt;再来澄清一下需求：B软件既要严重依赖A软件，但要在A软件上添加很多业务逻辑。但要求在发布的时候脱离对A软件rpm包的依赖。&lt;/p&gt;

&lt;p&gt;最简单的方法，当然是先把A软件的代码库做一个分支，或者拷贝出一个新的代码库，在上面进行开发，将B软件与A软件独立开来。这样发布的时候当然就是一个独立的包了。但如前所属，A软件更新频繁，生命力旺盛，我可不想时时来在同步上花时间。&lt;/p&gt;

&lt;p&gt;第二个方法，制作一个子包。rpm包里有一个subpackage的概念，就是说可以同时生成一个main包和多个subpackage包。子包的制作也很简单，在A包原有的spec文件中，添加%subpackage foo的字样，同样将一下必要的标签，例如%file，都在其后加上foo即可。这个方法很不错，但有几个问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;但需要改动A软件的spec文件，我的原则是尽量不要动A原有的文件，最多在其源码路径SOURCE下添加一两个tar.gz包，而且这几个源码包在A的spec文件中是不会有所体现的。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;虽然大部分标签例如%files,%pre,%post等都可以为每个subpackage单独添加，但最重要的标签，%prep,%build和%install确是一个spec文件中只能存在一份。一个解决方法是把业务逻辑的添加放到%post阶段添加。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其实第二个方法已经可以解决我的问题了，但多少都会动A的spec文件，并且subpackage也加一个%files标签，与main package的%files重复，很占地方，导致以后每次main package更新%files标签的时候，subpackage部分的%files也要去更新。虽然查了一下，spec中可以有include命令，可以把公共部分提取到一个外部文件，再分别include进来，但如前所述，我希望尽可能少的去改A的spec文件。本来A只有一个spec文件，现在为了简洁要拆成两个，不能说没对其产生影响。&lt;/p&gt;

&lt;p&gt;最后只好采用了第三种方法。&lt;/p&gt;

&lt;p&gt;首先，将B的所有业务逻辑放到一个B.tar.gz包里，提交到A的SOURCE目录下，A的spec文件不会去操作这个源码包。注意，为了简便起见，在B.tar.gz中，要有一个Makefile文件，在里面完成install的操作。这样在spec文件中，只用一行语句调用该Makefile即可。&lt;/p&gt;

&lt;p&gt;其次，为B软件维护一个脚本。该脚本完成如下工作：将A的spec文件拷贝出来，用sed,awk等进行修改，主要是修改一些Release信息等。最主要的工作是在%install标签下，调用A.tar.gz中的Makefile。&lt;/p&gt;

&lt;p&gt;最后，该脚本会去用rpmbuild执行这个新生成的spec文件。在调用时将source目录定义到A的SOURCE目录，如前所属，B.tar.gz就放在这里。&lt;/p&gt;

&lt;p&gt;用这种方法，虽然需要维护一个脚本，但最少限度的动用A，又能完全自动的同步A软件包的更新，且生成的是一个B的独立rpm包。目前看来较好的满足的我的需求。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>给有道云笔记的分类自定义排序</title>
      <link>https://pureage.info/2014/01/22/youdaonotes-order.html</link>
      <pubDate>Wed, 22 Jan 2014 15:05:43 +0000</pubDate>
      
      <guid>https://pureage.info/2014/01/22/youdaonotes-order.html</guid>
      
        <description>&lt;p&gt;有时候换一个工具是很莫名其妙的，去年一直用的evernote，今年却习惯了使用有道云笔记。慢慢“我的笔记本”栏里笔记本的类别越来越多了。这些类别默认是按照类别的字母先后来排序的。这就导致有些你需要特别关注的类别不能处在一个显眼的位置。作为一个习惯了被黑，同时也慢慢习惯了自黑的处女座IT男，我硬是用鼠标在分类处拖动了很久，实在不行后，只好点开设置选项，期望能找到一个自定义排序的选项，又以失败告终。&lt;/p&gt;

&lt;p&gt;绝望后，我念叨了一声，有道云笔记这怎么回事，做的也太垃圾了吧。旁边一位小帅哥见我这么抓狂，凑过来问。我告诉他，我现在想把这个“每日工作安排”放到所有分类的最前面。小帅哥扶了扶眼镜，然后拿过我的鼠标，把“每日工作安排”重命名为“001-每日工作安排”，然后飘然回到他的座位，整个操作过程没有说一句话，大有事了拂衣去，深藏功与名的架势。&lt;/p&gt;

&lt;p&gt;唉，人民群众的智慧真是无尽的。可惜貌似不包括我.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>2014年的读书计划</title>
      <link>https://pureage.info/2014/01/21/reading-plan.html</link>
      <pubDate>Tue, 21 Jan 2014 15:33:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/01/21/reading-plan.html</guid>
      
        <description>&lt;p&gt;2013年我读了太多好书，主要原因有两点：&lt;br /&gt;
1. 作为一个宅男，看电影、看书本来就是我的爱好。
2. 两年前就养成了看电子书的习惯了，但2013年看的更多了。工具从Kindle，到手机和Web端，平台主要是多看和豆瓣，技术类电子书主要是买图灵社区的PDF。&lt;/p&gt;

&lt;p&gt;如果你也跟我一样算是个喜欢看书的宅男，那么一旦习惯了阅读电子书，就会发现阅读量比以前突飞猛进了。国内电子书市场刚刚起步，很多地方不尽如人意，比如多看，最近几个月出的新书的质量简直不忍直视。这也不能怪它，好书的版权难拿，只好多出一些杂七杂八的书了。换个角度想想，即使你走进购书中心，合你口味的书还是少数，所以能偶尔在上面找到一本好书就心满意足了，没什么好怨念的。&lt;/p&gt;

&lt;p&gt;过去的一年里看的书主要如下几类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文学类，以《王小波全集》为代表。王小波的书大部分在学校就看过，但由于多看推出了王小波全集，所以就一本一本的买着又看了。目前只看到第6本，一共10本。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;历史类，以《其实我们一直活在春秋战国》系列为代表，这套书已经出的五本都看完了，还有最后一本应该刚刚才出炉。春秋战国的历史我个人比较喜欢，在学校时专门把《资治通鉴》前面的战国部分挑出来看了两遍，当然《资治通鉴》是没有春秋时期的内容的。而《其实我们一直活在春秋战国》，主要以《左传》为蓝本，主要是春秋时期的内容。这套书的毛病是明显越写越糙，前后对比，可以明显看出作者在战国部分开始有些敷衍。看完这个系列后，买了一套中华书局出版的杨柏俊编写的《春秋作战注》，还是竖排繁体版的，很刺激。另外还有易中天的中华史中的几本。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;哲学类，还没有读经典名著，基本看的都是一些入门类读物。例如&lt;a href=&#34;http://read.douban.com/ebook/1113383/&#34;&gt;哲学家们都干了些什么？&lt;/a&gt;关于哲学类书籍的感受，是个比较大的话题，需要单独再写。可以肯定的是，哲学类的书我会深入啃下去。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;自我管理、励志类，以&lt;a href=&#34;http://read.douban.com/ebook/393187/&#34;&gt;《7天治愈拖延症》&lt;/a&gt;、&lt;a href=&#34;http://read.douban.com/ebook/912704/&#34;&gt;《30岁前的每一天》&lt;/a&gt;为代表。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;计算机类书籍，此类书就不细说了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自我感觉，2013年看的好书不少，但其实真正消化的有限。2014年我的读书计划是放慢节奏，以温故为先，好书要重读、多读。主要是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;仔细阅读《春秋左传注》，争取这一年能把春秋的脉络在大脑里梳理得更清楚，多写读后感。&lt;strong&gt;不要求一年内读完。&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;读完《王小波全集》。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以那几本哲学入门书为向导，再深入一点，选择一个派别来更深入的学习一下。目前比较感兴趣的是休谟和萨特。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;财务方面的几本书，如《财报就像一本故事书》等，了解价值投资。改变以前对投资、炒股等嗤之以鼻认为那就是赌博或者玩票做空等偏颇的印象。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后，就没有然后了，如果能达到预期的话，2014年在读书这方面，可以预见是个丰年。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>lua-nginx使用自定义变量中需要说明的一点</title>
      <link>https://pureage.info/2014/01/20/lua-nginx-variable.html</link>
      <pubDate>Mon, 20 Jan 2014 15:30:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/01/20/lua-nginx-variable.html</guid>
      
        <description>&lt;p&gt;在nginx中，有两种方式添加自定义的变量：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在配置文件中用set指定添加&lt;/li&gt;
&lt;li&gt;在自己编写的C模块中，调用&lt;code&gt;ngx_http_add_variable&lt;/code&gt;接口来添加变量&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一种方法较简单，第二种方法有一处需要说明一下。&lt;/p&gt;

&lt;p&gt;当调用&lt;code&gt;ngx_http_add_variable&lt;/code&gt;接口时，如果传入的flag参数中&lt;code&gt;NGX_HTTP_VAR_NOHASH&lt;/code&gt;位被设置了，那么在lua代码中使用ngx.var.XXX是不能访问到该变量的，得到的值是nil。&lt;/p&gt;

&lt;p&gt;在这种情况下，如果现在配置文件中通过set指定一个中间变量，则在lua代码中可以访问到。&lt;/p&gt;

&lt;p&gt;例如，某个C模块中用带有&lt;code&gt;NGX_HTTP_VAR_NOHASH&lt;/code&gt;位的flag参数调用了&lt;code&gt;ngx_http_add_variable&lt;/code&gt;，创建了变量A，则如果在lua代码中通过&lt;code&gt;ngx.var.A&lt;/code&gt;只能得到一个nil值。&lt;/p&gt;

&lt;p&gt;而如果在配置文件中，先调用set命令:&lt;code&gt;set $B $A;&lt;/code&gt;,那么在lua代码中，通过代码&lt;code&gt;local A2 = ngx.var.B&lt;/code&gt;则可以间接访问到该变量。&lt;/p&gt;

&lt;p&gt;翻了一下邮件列表，发现该问题agentzh早有解答：&lt;br /&gt;
&amp;gt;逆雪寒:&lt;br /&gt;
&amp;gt;通过 &lt;code&gt;ngx.var.fastcgi_script_name&lt;/code&gt; 是nil 。 但 &lt;code&gt;set $fsn $fastcgi_script_name&lt;/code&gt; 然后 &lt;code&gt;ngx.var.fsn&lt;/code&gt; 就能正常获取了。bug ? 还是我理解问题.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;agenzh:&lt;/p&gt;

&lt;p&gt;这是 Nginx 标准的 &lt;code&gt;ngx_fastcgi&lt;/code&gt; 模块的一个限制。&lt;code&gt;$fastcgi_script_name&lt;/code&gt; 这个内建变量是这个 &lt;code&gt;ngx_fastcgi&lt;/code&gt; 模块定义的，而且在定义时设置了 &lt;code&gt;NGX_HTTP_VAR_NOHASH&lt;/code&gt; 这个标志位，从而阻止了 Perl、Lua等各种脚本语言在请求时按变量名动态获取这个变量的值。&lt;/p&gt;

&lt;p&gt;之所以你使用 set 指令进行过渡就可以工作是因为 set 指令定位 &lt;code&gt;$fastcgi_script_name&lt;/code&gt; 这个变量是在配置加载时，而不是请求时。&lt;/p&gt;

&lt;p&gt;你可以自己修改 Nginx 源码树中的 &lt;code&gt;src/http/modules/ngx_http_fastcgi_module.c&lt;/code&gt; 这个文件，从&lt;code&gt;ngx_http_fastcgi_vars&lt;/code&gt; 这个全局数组的初始化定义中把 &lt;code&gt;NGX_HTTP_VAR_NOHASH&lt;/code&gt; 这个标志去除。&lt;/p&gt;

&lt;p&gt;从 ngx_lua 模块的角度，是没办法绕过 Nginx 核心中的这个限制的。关于类似这样的问题，可以参见下面这个讨论：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://forum.nginx.org/read.php?29,239402,239402,quote=1&#34;&gt;http://forum.nginx.org/read.php?29,239402,239402,quote=1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>朋友</title>
      <link>https://pureage.info/2014/01/19/callyourfriends.html</link>
      <pubDate>Sun, 19 Jan 2014 14:21:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/01/19/callyourfriends.html</guid>
      
        <description>&lt;p&gt;其实工作了挺没劲的，以前的朋友们、同学们都散落在各自的城市，为了生活而奔波着。从一开始偶尔会在QQ群里热闹一下，到现在是几乎有老死不相往来的趋势了。&lt;/p&gt;

&lt;p&gt;其实，说为了生活而奔波显得很诡异。大部分还是一休息就呆坐在电脑前，打游戏，看电影，死宅。互相不联系还是因为生活中没有交集。虽然谁都知道，真正需要倾诉的时候，还是得找这些个当年的铁哥们。&lt;/p&gt;

&lt;p&gt;今天跟两个朋友各自聊了很久。其中一个是我主动联系的，另一个是他打过来的。&lt;/p&gt;

&lt;p&gt;我主动联系的那个朋友叫XX伟，人称大伟，大学室友，形影不离的几个人之一。大学时我一个南方人，千里迢迢跑到哈尔滨读书，室友大部分都是东北人，最南的也是河北。可跟这几个家伙丝毫没有隔阂，每天在一起打游戏，上自习，看电视，骂娘，骂政府，当然，少不了一起看毛片。&lt;/p&gt;

&lt;p&gt;大伟的年龄是我们中最大的，因为当初高考失利，复读了两次。这家伙比我们其他人都显得成熟，无论是相貌上，还是行为举止上，很有老大哥的风范。可诡异的是，他却是个扎扎实实的死宅男。每天在床上一躺就能是一整天，看各种电子书。本科毕业后，我去读研，他直接到一个县城工作了。&lt;/p&gt;

&lt;p&gt;如果说要跟大学同学联系下，我第一个想到的就是他。大一的时候，在一个风雨交加且停电的夜里，我跑到另外一个寝室去喝酒，旧着花生米一个人喝完了三瓶小罐二锅头后。那时候刚到东北，觉得东北人对我脾气，喝酒真TM有感觉。回到寝室后就不行了。大伟的床头照例亮着，其实大家都没睡，但他从不参加卧谈会，只是静静看着自己的电子书，那个动作我怀疑一天都没变过。进门之后，他第一个感觉到了我的异样，从床上爬起来，架着我往厕所、寝室之间来回好多次。其实我真的没醉，但也到了变身为一个话唠的程度。我们之间的对话大概是我说，大伟，今天的月亮好圆啊。他说，是啊，好圆啊。我说，大伟，今天的月亮真的好圆，他说是啊，真的很圆。我说，大伟，这家伙是谁啊，在我们面前晃来晃去，是不是想打架啊。他说，你可别揍他，他是辅导员啊。&lt;/p&gt;

&lt;p&gt;就这样开始，跟大伟的感情最深厚了。&lt;/p&gt;

&lt;p&gt;回忆了一下这些趣事后，我保持嘴角微笑的姿势，拿出手机，糟糕，没有他的手机号。嗯，我苦笑一声，关系最好的室友，我居然没有他的电话号码。只好登上QQ，发了一句，大伟在吗？那头是黑的，不过我相信他肯定在，这世道就算是薄熙来从阶下囚再次变成人民英雄，我也不相信大伟改的了死宅男的本质。这个时候，死宅男不在电脑前，还能干什么呢。果然，不到三秒，那头亮了，而且直接来了一个语音邀请。于是就这么开聊了四十分钟，一直聊到实在没聊的为止。&lt;/p&gt;

&lt;p&gt;他说他一毕业就在这小县城，生活太平淡了。我劝他好好呆着吧，挺好的，别想着出来了，赶紧找个女的嫁了安安分分过日子才是正道。&lt;/p&gt;

&lt;p&gt;有的人就是没有野心，骨子里就是自在悠闲的人，只要自己心里不起太大的波澜，有个业余爱好，过着这样的日子简直就是理想中的生活。&lt;/p&gt;

&lt;p&gt;晚上，另一个朋友给我打来电话，这一打也是近一个小时。&lt;/p&gt;

&lt;p&gt;他是我在华为的同事，我们一起入职，一起刚入职就被派到北京异地研发四个月，回到深圳后又一起吐槽公司。我和他的工作岗位都是CMO，这个CMO不是Chief Marketing Officer.而是一个版本控制人员。&lt;/p&gt;

&lt;p&gt;华为的研发，以一个具体版本号的核心路由器为例，全国各地几百号人往里面合入代码，因此需要一个团队来专门做版本控制。这个版本控制是分级的，每个项目组的代码先往项目组分支合入，项目组CMO做好验证后，再合入到子系统分支，子系统CMO做好验证后，再往主线合入，主线那边还有一个CMO团队，负责保证主线的稳定。其中，项目组CMO和子系统CMO很累，因为一方面如果主线CMO验证出了问题，通过各种定位手段排查到是哪次合入引入的问题后，该子系统及子系统的PM就会被邮件通报。PM被邮件通报，后果当然是下面的CMO很惨，因为他们没有把控好自己系统内的合入质量。但另一方面，如果这些CMO严格把控合入质量和合入节奏时，PM又会怪你延误了合入时机，道理很简单，一个PM管一个子系统，全国各地各那么多子系统的PM都在那里明争暗斗呢，哪个子系统的特性交付的又快又好，下一年升个版本经理才有指望啊。&lt;/p&gt;

&lt;p&gt;而我，一度同时担担任着一个项目组CMO和子系统CMO。&lt;/p&gt;

&lt;p&gt;几乎每天，我的工作就是得罪同事和领导。同一项目组的兄弟急着想合入代码，因为研发的兄弟们辛辛苦苦堆砌的代码，只有合入到版本中，才算是真正有了保障，不会说哪一天突然不见了。他们越急，我就越告诉他们，你要验证好了才准许合入。同时作为子系统CMO，我还得再把自己同子系统内的各个项目组的代码再合入到子系统分支，统一验证，再合入主线。如果我验证出了问题，在合入主线之前，要负责组织各个项目组的人员进行排查。&lt;/p&gt;

&lt;p&gt;有的朋友会说，不就是管个SVN，然后编个包，传到路由器上跑跑测试脚本吗？是的，但是没人会告诉你编个包在一台八核的服务器上，要至少四十分钟，验证一个包，需要更长的时间，因为路由器数量有限，各个项目组都在抢着用。又有人说，不就是一个路由器吗，一个配一个也没多少钱啊。可那是核心路由器，能跑几个市甚至一个省的流量，上面的一块单板都是几十上百万一块的。&lt;/p&gt;

&lt;p&gt;于是，我每天的工作状态就是早上九点上班，晚上一两点下班。之所以这么晚，是因为领导每天都想每天多交付些特性，多合入些代码，那些写代码的加班加点到晚上十点半，把代码一合入，然后拍拍屁股就走了，我就得加班加点的编包，解决编译错误，出包上服务器验证&amp;hellip;等我拍拍屁股起身时，已经凌晨一点半了。&lt;/p&gt;

&lt;p&gt;絮絮叨叨说了这么多，其实我想说的是，我和这哥们是一起患过难的。他每隔几个月就会给我打个电话，说说近况，发发牢骚。&lt;/p&gt;

&lt;p&gt;我非常理解他的心情。回想我当时最苦闷的时候，每天晚上一两点回到住处后，不是马上洗澡睡觉，而是打开QQ空间，一个好友一个好友的看状态，然后评论，第二天再等他们的回复。我从不是一个喜欢逛QQ空间的人，但当时如果不这样，我恐怕会疯掉。&lt;/p&gt;

&lt;p&gt;在和他聊天的过程中，我努力回忆着当时工作的点点滴滴。努力想找到一种仿佛就在昨天的感觉，可事实上，这些感觉在我心里已经很久远了，虽然我辞职也只有大半年。&lt;/p&gt;

&lt;p&gt;挂完电话，突然想哭了。如果没有朋友，只有工作，在这个冰冷世界里，我们如何能知道自己会坚持到哪一天。朋友现在于我的概念，不是我能向他借多少钱，而是在彼此空虚寂寞挺不下去的时候，能想起对方，这就足矣。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Peaky Blinders（浴血黑帮）</title>
      <link>https://pureage.info/2014/01/18/peaky-blinders.html</link>
      <pubDate>Sat, 18 Jan 2014 03:49:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/01/18/peaky-blinders.html</guid>
      
        <description>&lt;p&gt;这是一部BBC出品的黑帮剧，第一季只有六集，每一集时间大概一个小时。我连续看了两遍。这部电视剧，有下面一些地方可以说道说道的。&lt;/p&gt;

&lt;p&gt;这首先是一部黑帮片，但其中并没有多少黑帮火并的场面。有且仅有的几场火并戏，与以往我们看惯了的黑帮剧，简直是小孩过家家。但美轮美奂的音乐和画面，让我们在观看的时候会忘了这一点。也许等每一集看完后，你会冒出一句，不就是几个人打架吗，有必要搞的这么文艺范吗？&lt;/p&gt;

&lt;p&gt;浴血黑帮讲述的是一个战后归来的年轻人，如何带领小小的家族势力在复杂的局势下生存与崛起的。虽然在他们的片区内，每个人都对他们噤若寒蝉，但客观的说，他们的势力确实很弱小。这些势力涉及到警察代表的政府、神秘的爱尔兰共和军、同样是家族势力的李家以及拥有合法身份的，更高层次的黑帮头目金波。&lt;/p&gt;

&lt;p&gt;他们的势力弱到什么程度呢，如果不是老二汤米当家，换做其他任何一个人，上面的任何一个势力都可以轻而易举的灭掉他们。毕竟就那么几个人而已，甚至连还是儿童的小弟弟也在跑腿。所以，他们虽然可以偏安一隅，只管自己的片区，但这样下去被警察灭掉或是被黑吃黑是分分钟的事情。&lt;/p&gt;

&lt;p&gt;那么汤米都有哪些过人之处呢？&lt;/p&gt;

&lt;p&gt;不外乎这么几点，心思缜密，够狠。但从方法论上来讲，我觉得最重要的一点是，不能把鸡蛋放到一个篮子里，或者说，不能让自己只有一根救命稻草。由于无意中获得了一批政府的武器，浴血黑帮受到了警察的严密关注。他既没有将其作为一个烫手山芋急于出手，也没有在上面孤注一掷，而是权衡利弊，将其作为筹码等着某天能排上用场。为了达到将自己的地盘扩大化，生意合法化的目的，他故意得罪李家，取得与金波合作的可能。一旦与金波联手后，又迅速再次与李家联合，绊倒金波。每一步都走的深思熟虑，都能将自己的利益最大化。这样的情节，是无需要大的动作场面来支撑的。&lt;/p&gt;

&lt;p&gt;最后再提一下，配乐实在是太赞了，光是听听音乐，都够让你把它看完。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>护主莫心急</title>
      <link>https://pureage.info/2014/01/08/do-not-kiss-the-ass-of-your-boss.html</link>
      <pubDate>Wed, 08 Jan 2014 12:38:00 +0000</pubDate>
      
      <guid>https://pureage.info/2014/01/08/do-not-kiss-the-ass-of-your-boss.html</guid>
      
        <description>&lt;p&gt;很早就关注了冯大辉，从他的微博、微信公共号里经常会看到他对阿里的评论。大概得出的印象是阿里系的员工更喜欢对外维护公司和老板的形象，如果有人骂了马云，会有一大批人出来给你骂回来。&lt;/p&gt;

&lt;p&gt;冯大辉是个有个性的人，有时候会直接回骂，旁敲侧击的也不少，例如下面几条。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;纯银发了个网易内部邮件出来，居然没被丁磊约架，没被网易员工在内网和微博上骂，顿时感觉不科学，好失落…唉&lt;/p&gt;

&lt;p&gt;网易之所以是一家有趣的公司，就是无论你是调侃还是喷网易，都不会有网易员工冒出来跟你对喷或是对骂；如果你不小心夸了网易，也不会有员工出来对你跪舔。简单一句话：这家公司的员工有独立的人格。&lt;/p&gt;

&lt;p&gt;几家大厂里面，我比较喜欢网易的员工，人格独立，三观端正。当然其他几家大公司这种标准的也很多，只是平均一下就不成了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天在一个Linux技术讨论群里，有幸见到了这样一位忠心护主的同学。他很兴奋的群里转了几条关于阿里的新闻：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;阿里数字娱乐事业群总裁刘春宁首次披露阿里手游平台战略：手机游戏是移动时代最核心的用户需求， 阿里手游平台战略，目标是打造更加健康、开放、共赢的游戏生态链！同时，我们将收入分成比例调整为2：8（阿里只占20%），全力支持创意产业！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后做出了如下评论:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;阿里做游戏 企鹅紧张了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;马上有人出来反驳了，说马云不是说饿死也不做游戏吗，怎么现在又开始做游戏了？&lt;/p&gt;

&lt;p&gt;这位兄台马上反唇相讥:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;你没看到健康、开放、共赢 三个词吗？我们肯定只做健康类游戏，比如益智类游戏就很适合你啊,补补智商&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;阿里做游戏，肯定是不需要拿起道德大棒来声讨的。但既然之前那么高调的把自己放在一个道德制高点的位置上，现在并没有做到，难道还不能允许别人说两句吗。&lt;/p&gt;

&lt;p&gt;商人有钱不赚你让他干什么,难道让他来写代码啊？商人说的话也肯定不能全当真，这是常识，用一句俗话说，认真你就输了。倒是那些急于护主的，嘴里口口声声的说着“我们做的是健康类游戏”、“我们做的是平台，不是游戏&amp;hellip;&amp;ldquo;的人，真的该去吃吃药了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>O_EXCL的作用</title>
      <link>https://pureage.info/2013/12/25/165.html</link>
      <pubDate>Wed, 25 Dec 2013 15:48:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/12/25/165.html</guid>
      
        <description>&lt;h2 id=&#34;1-原始语义&#34;&gt;1.原始语义&lt;/h2&gt;

&lt;p&gt;与O_CREATE标志组合起来调用open，确保指定的文件由open的调用者创建，否则返回错误。即，如果进程A用O_CREATE和O_EXCL标志来调用open，期望创建一个指定的文件file1,如果file1不存在，则open成功返回且创建file1，如果file1已经存在了（即不是由进程A创建的），那么open返回错误。&lt;/p&gt;

&lt;h2 id=&#34;2-使用场景&#34;&gt;2.使用场景&lt;/h2&gt;

&lt;p&gt;O_CREATE|O_EXCL多用于确保一个一个程序只能执行单个进程，不能执行多个进程。原理如下，假设进程A是某程序的一个实例，如果它用O_CREATE|O_EXCL标志能够成功创建指定的文件，说明它是该程序的唯一实例，可以继续执行；如果返回错误，说明该文件已经存在，进而说明系统中已经运行着一个该程序的其它实例，检测到错误的返回值后，该实例就可以退出了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;之所以能这么用的唯一理由是该操作是原子的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;之所以这么说，理由如下。假设同样语义的非原子的操作流程如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if( access(file, R_OK) == -1 )   /* 首先检查文件是否存在 */  
    open(file, O_RDWR | O_CREAT，0666);  /* 如果不存在，那我创建一个这样的文件 */  
...  /* 继续执行任务 */  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于判断文件是否存在与创建文件是两个步骤，就会存在临界竞争的问题。试想下面的场景：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;某程序的进程A判断文件不存在，因此A认为自己是此时系统中该程序唯一的实例，准备继续执行创建指定的文件。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;操作系统的调度策略恰好在此时起作用，进程A暂停执行。此时指定的文件还没有创建。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;该程序的另一个进程B开始执行，同样，由于指定的文件不存在，B也认为自己是此时系统中该程序的唯一实例，准备继续执行创建指定的文件。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;这样，进程A和进程B都能成功调用open并继续往下执行。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;此时系统中就同时运行着该程序的两个实例，与仅运行一个进程的期望不符。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以说，O_EXCL与O_CREATE联合使用的前提就是该操作是原子的。&lt;/p&gt;

&lt;h2 id=&#34;3-非原子操作如何达到同样目的&#34;&gt;3.非原子操作如何达到同样目的&lt;/h2&gt;

&lt;p&gt;假设现在不能使用O_EXCL|O_CREATE，或者假设用O_EXCL|O_CREATE调用open并不是原子的，该如何达到上面关于“一个程序只能运行一个实例”的要求呢？&lt;/p&gt;

&lt;p&gt;可以用系统调用link来实现。&lt;/p&gt;

&lt;p&gt;link的原型如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; #include &amp;lt;unistd.h&amp;gt;  
  
 int link(const char *oldpath, const char *newpath);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;link的作用是为oldpath指定的源文件创建一个newpath指定的链接文件(硬链接，hard link)。如果创建成功，则返回0，如果newpath路径指定的目标文件在调用link前已经存在，则link会错误返回。&lt;/p&gt;

&lt;p&gt;根据link的特点，可以达到上面的要求：&lt;br /&gt;
1. 首先确保文件系统中已经有一个源文件file1。&lt;br /&gt;
2. 某程序的一个进程A开始执行，调用link，试图创建一个file1的链接文件file2。&lt;br /&gt;
3. 如果A调用link成功，说明该程序此时只有进程A锁定了该文件，进程A可以继续往下执行。&lt;br /&gt;
4. 由于进程A为file1创建了一个链接文件file2,此时file1的链接数是2（用stat可获取链接数）。&lt;br /&gt;
5. 进程B调用link,同样试图创建file1的链接文件file2，但由于file2已经存在，link错误返回。可进一步调用stat系统调用，查看file1的链接数，确定该链接数是2。&lt;br /&gt;
6. 进程B退出。&lt;/p&gt;

&lt;h2 id=&#34;4-o-excl-o-create确实有可能是非原子的&#34;&gt;4.O_EXCL|O_CREATE确实有可能是非原子的&lt;/h2&gt;

&lt;p&gt;在NFS上，O_EXCL|O\CREATE确实有可能是非原子的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On NFS, O_EXCL is supported only when using NFSv3 or later on&lt;br /&gt;
              kernel 2.6 or later.  In NFS environments where O_EXCL support&lt;br /&gt;
              is not provided, programs that rely on it for performing&lt;br /&gt;
              locking tasks will contain a race condition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在这种情况下，上面讨论的使用link的方法就有了用武之地。如上引文所述，在最新的内核中，NFS中并不存在该问题，用O_EXCL|O_CREATE仍然能满足要求。&lt;/p&gt;

&lt;h2 id=&#34;5-其它&#34;&gt;5. 其它&lt;/h2&gt;

&lt;p&gt;O_EXCL一般只能和O_CREATE一起使用，不能单独使用，但有一个例外：在2.6即以后的内核中，如果open指定的文件是一个块设备文件，O_EXCL可以单独使用，此时，如果该块设备正在被使用（例如已经被挂在)，那么open将失败返回，错误码是EBUSY;除此之外，单独使用O_EXCL的后果无法预知：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In general, the behavior of O_EXCL is undefined if it is used&lt;br /&gt;
             without O_CREAT.  There is one exception: on Linux 2.6 and&lt;br /&gt;
             later, O_EXCL can be used without O_CREAT if pathname refers&lt;br /&gt;
             to a block device.  If the block device is in use by the&lt;br /&gt;
             system (e.g., mounted), open() fails with the error EBUSY.&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>从emlog换到typecho</title>
      <link>https://pureage.info/2013/12/23/161.html</link>
      <pubDate>Mon, 23 Dec 2013 13:04:44 +0000</pubDate>
      
      <guid>https://pureage.info/2013/12/23/161.html</guid>
      
        <description>&lt;p&gt;typecho终于迎来大的更新了，从2012年5月8号官网放出一篇名为&lt;a href=&#34;http://typecho.org/archives/65/&#34;&gt;《Its about time》&lt;/a&gt;的日志后，让各路淫民翘首以待，谁都没想到一翘就翘了一年多。&lt;/p&gt;

&lt;p&gt;从两年前买了域名+空间后，试过了各种博客程序，wordpress,typecho,emlog,textpattern等等，但最喜欢的还是emlog和typecho，后来一直用的是emlog。说实在话，对emlog很满意的，emlog的社区也做的不错，但这次typecho的更新太吸引人了，还是转了过来。更换程序是很彻底的，我丝毫没有考虑如何在url上做文章，对这个网站和搜索引擎而言，意味着N多死链，但幸好对我自己而言，不意味任何东西。&lt;/p&gt;

&lt;p&gt;这个博客一直放在一个虚拟空间里，除了用ftp上传网站代码外，几乎没有任何权限。虽然早已有一个vps，但仍然没有把它迁过来，让它安静的躺在这里吧。&lt;/p&gt;

&lt;p&gt;断断续续的写一些无病呻吟的文章已经两年了，而且在可预测的未来，这些无病呻吟的文章还会继续写下去。&lt;/p&gt;

&lt;p&gt;有一部电影里有这么一句台词，艺术是什么，艺术是人类在这个星球上存活过的痕迹。对我而言，这些乱七八糟的文字就是我生活的痕迹。只需要看到文章发表日期就行了，文章内容怎么样，其实并不重要。&lt;/p&gt;

&lt;p&gt;希望博客改头换面后，能多写点东西，质量上能稍微有些提高。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>誓要去,入刀山</title>
      <link>https://pureage.info/2013/12/09/158.html</link>
      <pubDate>Mon, 09 Dec 2013 14:17:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/12/09/158.html</guid>
      
        <description>&lt;p&gt;周末，成都的一个朋友陪他的一个哥们来广州玩，原因是他这个哥们跟女朋友闹别扭了心里难受，他陪他出来转转。中午把他们接到后，吃了顿饭，到我的住处坐坐，然后就去订了几张电影票，看了《扫毒》。&lt;/p&gt;

&lt;p&gt;《扫毒》是个怀旧的电影，但如何个怀旧法，每个人的感受不同。诚然，跟很多人一样，我也认为影片本身香港八九十年代兄弟情的主题确实是怀旧的一大因素，但对我而言，最能体现怀旧情绪的，是主题曲《誓要去，入刀山》。&lt;/p&gt;

&lt;p&gt;兄弟三人第一次哼起这首歌时，我就意识到，这歌词我肯定在哪里看过。终于，电影放完后，我想起来，这歌词取自《陆小凤传奇》之《凤舞九天》，初中时，把一套一共四册的《陆小凤传奇》看了七八遍（后来才知道，这套书缺了最后一部，《剑神一笑》），而这一段更是我非常喜欢，翻来覆去来回看的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;誓要去,入刀山;浩气壮，过干关。豪情无限，男儿傲气，地狱也独来独往返！&lt;br /&gt;
存心一闯虎豹灾，今朝去几时还？&lt;br /&gt;
奈何难尽欢干日醉，此刻相对恨晚。&lt;br /&gt;
愿与你，尽一杯」聚与散，记心间」毋忘情义，长存浩气，口后再相知未晚。“&lt;br /&gt;
歌已尽，酒已空。陆小凤放下碗筷，转身离去。&lt;br /&gt;
“慢着！西门吹雪随着大喝声站起，走向又转过身来的陆小凤。&lt;br /&gt;
西门吹雪没有说话，他只是伸出他的一双手。&lt;br /&gt;
他的手紧握着陆小凤的双腕，陆小凤的手也紧握着西门吹雪的腕。&lt;br /&gt;
西门吹雪激动的轻轻吟诵：“毋忘情义，长存浩气，日后再相知末晚。”&lt;br /&gt;
西门吹雪眼中已温热。陆小凤放开西门吹雪的手腕，大步走了出去。&lt;br /&gt;
只听陆小凤的豪放的歌声，犹自在黑夜中袅绕：“毋忘情义，长存浩气，口后再相知末晚。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这么多年过去了，竟然还能记起，记起一首歌，就是记起一段青春。有些东西，随着时间的流逝，慢慢被藏到内心深处，但它们并没有消失，只是放在那里，等着某一天忽然被想起。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>AF_INET与PF_INET的区别</title>
      <link>https://pureage.info/2013/12/06/157.html</link>
      <pubDate>Fri, 06 Dec 2013 08:24:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/12/06/157.html</guid>
      
        <description>&lt;p&gt;在一些开源项目的socket相关代码中，会同时看到AF_IENT和PF_INET，这两者有什么区别呢？&lt;/p&gt;

&lt;p&gt;其实这两个东西就是当年设计上的误差而已。AF=Adress Family;PF=Protocal Family，原来的设计是设想一个AF会支持多个PF，但是就没有然后了。现在为止，这两个东西就是一样的，Linux源代码为证：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Protocol families, same as address families. */  
#define PF_UNSPEC	AF_UNSPEC  
#define PF_UNIX	 AF_UNIX  
#define PF_LOCAL	AF_LOCAL  
#define PF_INET	 AF_INET  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;br /&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/6729366/what-is-the-difference-between-af-inet-and-pf-inet-in-socket-programming&#34;&gt;http://stackoverflow.com/questions/6729366/what-is-the-difference-between-af-inet-and-pf-inet-in-socket-programming&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>FastDFS中的tcprecvdata_ex与tcprecvdata_nb_ex</title>
      <link>https://pureage.info/2013/12/05/156.html</link>
      <pubDate>Thu, 05 Dec 2013 15:33:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/12/05/156.html</guid>
      
        <description>&lt;p&gt;FastDFS与socket相关的函数一般放在common/sockopt.c文件里，其中有两个函数，非别为tcprecvdata_ex和tcprecvdata_nb_ex。从名字上看，很明显后者是想表达nonblock的意思，那么看代码证实一下。它们的代码分别如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. tcprecvdata_ex&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int tcprecvdata_ex(int sock, void *data, const int size, \  
		const int timeout, int *count)  
{  
	int left_bytes;  
	int read_bytes;  
	int res;
	int ret_code;  
	unsigned char* p;  
#ifdef USE_SELECT  
	fd_set read_set;  
	struct timeval t;  
#else  
	struct pollfd pollfds;  
#endif  
  
#ifdef USE_SELECT  
	FD_ZERO(&amp;amp;read_set);  
	FD_SET(sock, &amp;amp;read_set);  
#else  
	pollfds.fd = sock;  
	pollfds.events = POLLIN;  
#endif  
  
	read_bytes = 0;  
	ret_code = 0;  
	p = (unsigned char*)data;  
	left_bytes = size;  
	while (left_bytes &amp;gt; 0)  
	{  
  
#ifdef USE_SELECT  
		if (timeout &amp;lt;= 0)  
		{  
			res = select(sock+1, &amp;amp;read_set, NULL, NULL, NULL);  
		}  
		else  
		{  
			t.tv_usec = 0;  
			t.tv_sec = timeout;  
			res = select(sock+1, &amp;amp;read_set, NULL, NULL, &amp;amp;t);  
		}  
#else  
		res = poll(&amp;amp;pollfds, 1, 1000 * timeout);  
		if (pollfds.revents &amp;amp; POLLHUP)  
		{  
			ret_code = ENOTCONN;  
			break;  
		}  
#endif  
  
		if (res &amp;lt; 0)  
		{  
			ret_code = errno != 0 ? errno : EINTR;  
			break;  
		}  
		else if (res == 0)  
		{  
			ret_code = ETIMEDOUT;  
			break;  
		}  
	  
		read_bytes = recv(sock, p, left_bytes, 0);  
		if (read_bytes &amp;lt; 0)  
		{  
			ret_code = errno != 0 ? errno : EINTR;  
			break;  
		}  
		if (read_bytes == 0)  
		{  
			ret_code = ENOTCONN;  
			break;  
		}  
  
		left_bytes -= read_bytes;  
		p += read_bytes;  
	}  
  
	if (count != NULL)  
	{  
		*count = size - left_bytes;  
	}  
  
	return ret_code;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.tcprecvdata_nb_ex&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int tcprecvdata_nb_ex(int sock, void *data, const int size, \  
		const int timeout, int *count)  
{  
	int left_bytes;  
	int read_bytes;  
	int res;  
	int ret_code;  
	unsigned char* p;  
#ifdef USE_SELECT  
	fd_set read_set;  
	struct timeval t;  
#else  
	struct pollfd pollfds;  
#endif  
  
#ifdef USE_SELECT  
	FD_ZERO(&amp;amp;read_set);  
	FD_SET(sock, &amp;amp;read_set);  
#else  
	pollfds.fd = sock;  
	pollfds.events = POLLIN;  
#endif  
  
	read_bytes = 0;  
	ret_code = 0;  
	p = (unsigned char*)data;  
	left_bytes = size;  
	while (left_bytes &amp;gt; 0)  
	{  
		read_bytes = recv(sock, p, left_bytes, 0);  
		if (read_bytes &amp;gt; 0)  
		{  
			left_bytes -= read_bytes;  
			p += read_bytes;  
			continue;  
		}  
  
		if (read_bytes &amp;lt; 0)  
		{  
  
			if (!(errno == EAGAIN || errno == EWOULDBLOCK))  
			{  
				ret_code = errno != 0 ? errno : EINTR;  
				break;  
			}  
		}  
		else  
		{  
			ret_code = ENOTCONN;  
			break;  
		}  
  
#ifdef USE_SELECT  
		if (timeout &amp;lt;= 0)  
		{  
			res = select(sock+1, &amp;amp;read_set, NULL, NULL, NULL);  
		}  
		else  
		{  
			t.tv_usec = 0;  
			t.tv_sec = timeout;  
			res = select(sock+1, &amp;amp;read_set, NULL, NULL, &amp;amp;t);  
		}  
#else  
		res = poll(&amp;amp;pollfds, 1, 1000 * timeout);  
		if (pollfds.revents &amp;amp; POLLHUP)  
		{  
			ret_code = ENOTCONN;  
			break;  
		}  
#endif  
  
		if (res &amp;lt; 0)  
		{  
			ret_code = errno != 0 ? errno : EINTR;  
			break;  
		}  
		else if (res == 0)  
		{  
			ret_code = ETIMEDOUT;  
			break;  
		}  
	}  
  
	if (count != NULL)  
	{  
		*count = size - left_bytes;  
	}  
  
	return ret_code;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;乍一眼看上去，这两个不是一样吗？仔细看下就会发现区别所在：nonblock版本在循环里把recv操作放在了select/poll之前，而block版本在循环里把recv操作放在了select/poll之后。其他地方几乎都是一模一样的。&lt;/p&gt;

&lt;p&gt;其实，这两个函数处理的socket在调用他们之前，都已经被设置为nonblock了，这是一个前提条件。也就是说，我们这两个函数是对一个nonblock的socket在细分为block和nonblock，有点拗口，既然这个socket都已经是nonblock的了，为什么这里还会有block和nonblock的区别呢?&lt;/p&gt;

&lt;p&gt;他们的区别在于，tcprecvdata_nb_ex会调用select/poll从而阻塞的唯一场合就是在一个recv返回EAGAIN错误或 EWOULDBLOCK时，而tcprecvdata_nb在每一次recv调用钱都会调用可能引起阻塞的select/poll。&lt;/p&gt;

&lt;p&gt;在这两个函数中学到了一个技巧，该技巧与这两个函数的区别无关。就是如何在一个nonblock的socket连接中获取希望获取的字节数。由于socket是nonblock的，调用recv马上返回，如果出错且错误是EAGAIN或EWOULDBLOCK，那么我们希望能再重试一下。但如果只是用一个while循环来主动一遍一遍的重试的话，超时该如何处理呢？其实这才是这两个函数中用到select/poll的真正意义所在。即，在一个非阻塞的套接字连接里，达到阻塞接收指定大小的数据的效果，但同时又有超时机制来保证并不会真正的阻塞。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>linux下获取本地ip的几种方法</title>
      <link>https://pureage.info/2013/12/04/155.html</link>
      <pubDate>Wed, 04 Dec 2013 08:06:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/12/04/155.html</guid>
      
        <description>&lt;h2 id=&#34;1-调用getifaddrs&#34;&gt;1.调用getifaddrs&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The getifaddrs() function first appeared in glibc 2.3, but before glibc 2.3.3, the implementation supported only IPv4 addresses; IPv6 support was added in glibc 2.3.3.  Support of address families other than IPv4 is available only on kernels that support netlink.&lt;/p&gt;
&lt;/blockquote&gt;

e&gt;

&lt;h2 id=&#34;2-调用ioctl&#34;&gt;2.调用ioctl&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;int getlocaladdrs(char ip_addrs[][IP_ADDRESS_SIZE], \  
	const int max_count, int *count)  
{  
	int s;  
	struct ifconf ifconf;  
	struct ifreq ifr[32];  
	int if_count;  
	int i;  
	int result;  
  
	*count = 0;  
	s = socket(AF_INET, SOCK_STREAM, 0);  
	if (s &amp;lt; 0)  
	{  
		logError(&amp;quot;file: &amp;quot;__FILE__&amp;quot;, line: %d, &amp;quot; \  
			&amp;quot;socket create fail, errno: %d, error info: %s&amp;quot;, \  
			__LINE__, errno, STRERROR(errno));  
		return errno != 0 ? errno : EMFILE;  
	}  
  
	ifconf.ifc_buf = (char *) ifr;  
	ifconf.ifc_len = sizeof(ifr);  
	if (ioctl(s, SIOCGIFCONF, &amp;amp;ifconf) &amp;lt; 0)  
	{  
		result = errno != 0 ? errno : EMFILE;  
		logError(&amp;quot;file: &amp;quot;__FILE__&amp;quot;, line: %d, &amp;quot; \  
			&amp;quot;call ioctl fail, errno: %d, error info: %s&amp;quot;, \  
			__LINE__, result, STRERROR(result));  
 		close(s);  
		return result;  
	}  
  
	if_count = ifconf.ifc_len / sizeof(ifr[0]);  
	if (max_count &amp;lt; if_count)  
	{  
		logError(&amp;quot;file: &amp;quot;__FILE__&amp;quot;, line: %d, &amp;quot; \  
			&amp;quot;max_count: %d &amp;lt; iterface count: %d&amp;quot;, \  
			__LINE__, max_count, if_count);  
 		close(s);  
		return ENOSPC;  
	}  
  
	for (i = 0; i &amp;lt; if_count; i++)  
	{  
		struct sockaddr_in *s_in;  
    		s_in = (struct sockaddr_in *) &amp;amp;ifr[i].ifr_addr;  
    		if (!inet_ntop(AF_INET, &amp;amp;s_in-&amp;gt;sin_addr, \  
			ip_addrs[*count], IP_ADDRESS_SIZE))  
		{  
			result = errno != 0 ? errno : EMFILE;  
			logError(&amp;quot;file: &amp;quot;__FILE__&amp;quot;, line: %d, &amp;quot; \  
				&amp;quot;call inet_ntop fail, &amp;quot; \  
				&amp;quot;errno: %d, error info: %s&amp;quot;, \  
				__LINE__, result, STRERROR(result));  
 			close(s);  
			return result;  
    		}  
		(*count)++;  
	}  
  
	close(s);  
	return *count &amp;gt; 0 ? 0 : ENOENT;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-判断一个ip是否是本地ip的几种方法&#34;&gt;3.判断一个ip是否是本地ip的几种方法：&lt;/h2&gt;

&lt;p&gt;（1）用该ip和指定一个端口号，执行bind操作，成功则说明是本地IP，否则不是。&lt;/p&gt;

&lt;p&gt;（2）上一种方法的问题在于，如果指定的端口被占用了，那么及时是本地Ip，bind也会出错。可以做如下修改：bind时指定0端口，让系统给分配一个可用的端口。&lt;/p&gt;

&lt;p&gt;（3）先用上面提到的获取本地Ip的两种方法把本地ip列表获取到，然后看目标ip是否在其中即可。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>梦境</title>
      <link>https://pureage.info/2013/12/02/154.html</link>
      <pubDate>Mon, 02 Dec 2013 15:29:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/12/02/154.html</guid>
      
        <description>&lt;p&gt;很奇怪的一个梦。&lt;/p&gt;

&lt;p&gt;开始我似乎在一个黑暗的监狱里，浑身发抖，抱着膝盖蜷在墙角，像一条瑟瑟发抖的狗。忽然一道月光照下来，我慢慢站起来，展开双臂，发现臂下连着一双乌黑的翅膀。迎着月光，纵身一跃，化身为蝙蝠侠，滑翔在城市的夜空。滑翔了几分钟之后，猛然振翅向更高更亮处飞去，突然发现自己已经不是蝙蝠侠了，这次变成了阿凡达。&lt;/p&gt;

&lt;p&gt;梦是什么时候醒的不知道了，这段时间，特别是午休时，经常从噩梦中惊醒，或是在噩梦中挣扎着想醒来却动弹不得。能做一下美梦，挺好的，而且梦里几个镜头的衔接简直太漂亮了，闭上眼睛依然能有强烈的画面感在脑中回想。&lt;/p&gt;

&lt;p&gt;其实，原因很简单，就是近来经常看一些极限运动，特别是穿滑翔衣从直升机或山顶纵身而下的视频。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>strider教你巧记五度圈</title>
      <link>https://pureage.info/2013/12/01/153.html</link>
      <pubDate>Sun, 01 Dec 2013 09:32:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/12/01/153.html</guid>
      
        <description>&lt;p&gt;五度圈在乐理中有很重要的地位，在布鲁斯口琴而言，最直接的用处就是确定不同把位之间调性的转换关系。在这篇文章里不会设计五度圈的来历、作用，仅仅是教您如何牢固的记忆五度圈，这样可以在调性转换的时候直接用到。&lt;/p&gt;

&lt;p&gt;如果你已经能够很顺利的将五度圈画下来，不管是通过什么方法，哪怕是死记硬背来的，这篇文章就不适合您。&lt;/p&gt;

&lt;p&gt;我假设您已经知道十二平均律是怎么回事，其实，只需要知道3,4和7,1之间是半音，其他各音之间是全音就可以了。一个八度内的音程被分成了12个半音，所以称为十二平均律。&lt;/p&gt;

&lt;p&gt;我们来看看五度圈是个什么样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/wuduquan-1.jpg&#34; alt=&#34;wuduquan-1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们知道，那些带有升降符号的半音都有几种表示方法，这里统一用如图所示的记法，即以降号为主。&lt;/p&gt;

&lt;p&gt;想不通过死记硬背来画出这个圈，有三种方法，下面将一一道来。唯一需要你牢记的就是，五度圈上每相邻的两个音之间间隔了7个半音。没错，你只需要记住7这个数字就行了。&lt;/p&gt;

&lt;p&gt;第一种方法：&lt;/p&gt;

&lt;p&gt;我们把十二平均律的十二个记号用数字1到12一一对应，即&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C      1&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Db     2&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;D  3&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Eb     4&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;E  5&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;F  6&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Gb     7&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;G  8&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Ab     9&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;A  10&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Bb     11&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;B  12&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以C为起点，他在五度圈上的下一个音是这么算出来的：1+7x1=8,由十二平均律的顺序，第8个音是G（最简单的是直接查上表），所以C的下一个音就是G。&lt;/p&gt;

&lt;p&gt;C之后的第二个音，即G后面的一个音：1+7x2=15,15除以12，余3。由十二平均律，第3个音是D，所以G后的音是D。&lt;/p&gt;

&lt;p&gt;依次类推：&lt;/p&gt;

&lt;p&gt;1+7x3=22,22除以12，余10。由十二平均律，紧接着是A。&lt;br /&gt;
1+7x4=29,29除以12，余5，即E。&lt;br /&gt;
1+7x5=36,26除以12，余0，由于上面标示12平均律的范围是1到12，不包括0，所以把0按12算，即B。&lt;br /&gt;
1+7x6=43,43除以12，余7，即Gb。&lt;br /&gt;
1+7x7=50,50除以12，余2，即Db。&lt;br /&gt;
1+7x8=57,50除以12，余9，即Ab。&lt;br /&gt;
1+7x9=64,64除以12，余4，即Eb。&lt;br /&gt;
1+7x10=71,71除以12，余11，即Bb。&lt;br /&gt;
1+7x11=78，78除以12，余6，即F。&lt;/p&gt;

&lt;p&gt;将上面推导出来的音按顺序排列出来，即是五度圈上标注的顺序。大功告成。&lt;/p&gt;

&lt;p&gt;第二种方法:&lt;/p&gt;

&lt;p&gt;第二种方法来自于晓松老师的网站，链接为：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.soharp.com/index.php/lession/show/id/103。转述如下：&#34;&gt;http://www.soharp.com/index.php/lession/show/id/103。转述如下：&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;先分析一下上面的标准五度圈，如果把五度圈比作一个钟表盘的话，那么，C在12点的位置；顺时针由F到B，包括七个自然音；由#F到bB，又包括五个变化音，一共十二个音。&lt;br /&gt;
现在我们把F和B连成一条直线&amp;ndash;蓝色点划线&amp;ndash;我们姑且把它称作音区分隔线（乐理上没这叫法，别当真，只是为了方便说明问题），右上绿色部分是自然音区，左下红色部分是变化音区，如下图：&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/wuduquan-2.jpg&#34; alt=&#34;wuduquan-2.jpg&#34; /&gt;&lt;br /&gt;
单独把自然音&amp;mdash;-绿色部分提出来，如下图：&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/wuduquan-3.jpg&#34; alt=&#34;wuduquan-3.jpg&#34; /&gt;&lt;br /&gt;
 貌似非常地杂乱无章啊，NO，是有规律的：&lt;br /&gt;
 首先，CDEFGAB，这个C大调音阶对大家来说，应该是已经烂熟于心了，就按照这个顺序，再加一点小方法一路写下去。方法如下：&lt;br /&gt;
1、确定C的位置，钟表盘的12点位置，顺时针开始，隔一个点写D，再隔一个点写E，再隔着五点钟的那个点写F，然后好像写不下去了，没关系，既然只是 研究自然音区，那么隔个B位置的那个点，直接转上去写F就好了，再隔一个已知的C写上G，再隔已经写出来的D点，写A，最后，隔着已经写的E，把五点钟的 B补上，于是，五度圈自然音部分就写完整了。书写顺序如下图：&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/wuduquan-4.jpg&#34; alt=&#34;wuduquan-4.jpg&#34; /&gt;&lt;br /&gt;
2、既然自然音区众大神儿们已经归位，那么开始研究一下变化音区的音符都应该是哪几位，如下图：&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/wuduquan-5.jpg&#34; alt=&#34;wuduquan-5.jpg&#34; /&gt;&lt;br /&gt;
当把自然区的七个音符都写出来的时候，那么，我们用区别于写自然音的另外一种方法，来排列变化区的音符：&lt;br /&gt;
仍然看已经写出来的自然区，从F开始，沿着我们所谓的那个分隔线看到B，再逆时针的看EADG，整个序列应该是 BEADG。&lt;br /&gt;
 那从，从B开始，把BEADG依次从F开始按逆时针顺序（不再像自然音那样隔着点来写了，依次写就OK。）写到变化音区里，如下图：&lt;br /&gt;
 &lt;img src=&#34;https://pureage.info/img/wuduquan-6.jpg&#34; alt=&#34;wuduquan-6.jpg&#34; /&gt;&lt;br /&gt;
不伦不类啊，这都啥呀，怎么么成了自然音，这里明明应该是变化音的啊，那些升、降记号哪去了？？？&lt;br /&gt;
您别急啊，试着，把这哥五个都添上降记号看看是什么？如下图：&lt;br /&gt;
 &lt;img src=&#34;https://pureage.info/img/wuduquan-7.jpg&#34; alt=&#34;wuduquan-7.jpg&#34; /&gt;&lt;br /&gt;
关于为什么都添上降记号，我是这样记忆的，因为是逆时针方向书写的BEADG，就写降记号咯，“逆”与“降”在汉字逻辑中还有一定关联性的吧？（您 可以试试，如果顺时针比照自然音部分，顺时针书写变化音部分，再加上升记号（#），也是这几个小东西&amp;mdash;&amp;ndash;如果括号内的话会把您看迷糊的话，请立刻忘 记！）&lt;br /&gt;
 如果再把刚才已经写出来的自然音部分合在一起，一个完全的五度圈就热乎乎、香喷喷滴新鲜出炉了：&lt;br /&gt;
 &lt;img src=&#34;https://pureage.info/img/wuduquan-8.jpg&#34; alt=&#34;wuduquan-8.jpg&#34; /&gt;&lt;br /&gt;
吼吼，现在是不是已经能够默画下五度圈了呢？&lt;br /&gt;
其实变化音用降记号写出来，用升记号表示不难了吧、bB=#A   bE=#D    bA=#G    bD=#C    bG=#F      &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-这您是知道的！&lt;br /&gt;
PS:来个动画，每五秒钟翻一页，共十一页。&lt;br /&gt;
 &lt;img src=&#34;https://pureage.info/img/wuduquan-9.gif&#34; alt=&#34;wuduquan-9.gif&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第三种方法：&lt;/p&gt;

&lt;p&gt;第三种方法和第一种方法都是strider原创，如有雷同，纯属巧合。&lt;/p&gt;

&lt;p&gt;（1）首先，画一个圆，将其12等分，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/wuduquan-10.jpg&#34; alt=&#34;wuduquan-10.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（2）将其按时钟终顺序标注次序，注意，该次序仅为画图过程的中间产物，与最终五度圈的顺序无关。如下图所示，仅仅是画一个时钟，很简单：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/wuduquan-11.jpg&#34; alt=&#34;wuduquan-11.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（3）把12点标为第一个点（注意，从现在起，在时钟上标注的数字即为最终五度圈上各音的次序），12点与6点在一条直径上，连接12点与6点左边的一个点，将其标为2，以2为起点，连接其对应直径另一端的相邻的那个点，标为3：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/wuduquan-12.jpg&#34; alt=&#34;wuduquan-12.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（4）以3为起点，连接其对应直径的另一端的旁边相邻的那个点，标为4点，以4为起点，连接其对应直径的另一端的旁边相邻的那个点，标为5点：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/wuduquan-13.jpg&#34; alt=&#34;wuduquan-13.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（5）以5为起点，连接其对应直径的另一端的旁边相邻的那个点，标为6点，以6为起点，连接其对应直径的另一端的旁边相邻的那个点，标为7点：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/wuduquan-14.jpg&#34; alt=&#34;wuduquan-14.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（6）以7为起点，连接其对应直径的另一端的旁边相邻的那个点，标为8点，以8为起点，连接其对应直径的另一端的旁边相邻的那个点，标为9点：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/wuduquan-15.jpg&#34; alt=&#34;wuduquan-15.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（4）以9为起点，连接其对应直径的另一端的旁边相邻的那个点，标为10点，以10为起点，连接其对应直径的另一端的旁边相邻的那个点，标为11点：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/wuduquan-16.jpg&#34; alt=&#34;wuduquan-16.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;（4）以11为起点，连接其对应直径的另一端的旁边相邻的那个点，标为12点，至此，1到12全部标记完成。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/wuduquan-17.jpg&#34; alt=&#34;wuduquan-17.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;按上面那张十二平均律对应顺序的表格，将1到12对应的音按顺序标上去，就完成了五度圈的绘制：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/wuduquan-18.jpg&#34; alt=&#34;wuduquan-18.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上介绍了三种推导五度圈的方法，随便掌握一种即可让你在忘记五度圈的情况下，从头画出完整的一份。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>关于布鲁斯口琴</title>
      <link>https://pureage.info/2013/11/16/134.html</link>
      <pubDate>Sat, 16 Nov 2013 07:12:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/11/16/134.html</guid>
      
        <description>&lt;p&gt;大概四年前迷上了布鲁斯口琴这个小玩意，一发不可收拾，从最初的Huang103，到horhner,suzuki等，手上的琴也有了几把；从最最初钟情于一些爱尔兰民谣和动漫音乐，到后来乃至现在热爱布鲁斯音乐。这几年身边发生了很多事情，但每次只要拿起这大概10公分长的小乐器，就会暂时忘掉各种烦恼。曾经有一段时间迷恋到每天看视频网站必须看看Bluesimon，张晓松等大神，嗜血安尔乐、晓月等后起之秀有没有更新，每天翻墙到Youtube上看看关注的各路大神的最新动态，不亦乐乎。&lt;/p&gt;

&lt;p&gt;喜欢一个乐器一般是从喜欢某首它演奏的曲子开始的，在国内，很多布鲁斯口琴爱好者都是从《星之所在》、《天空之城》、《爱尔兰画眉》、《素敌》等曲子开始的，我也一样。&lt;/p&gt;

&lt;p&gt;但你总会开始接触到布鲁斯风格，让布鲁斯口琴焕发生命光彩的风格。其实布鲁斯口琴最初并不是用来演奏布鲁斯音乐的，而是欧洲的一些民谣。但随着布鲁斯口琴传入到了美国，开始发生了一些变化。那时的美国，是牛仔的美国。口琴的轻便让它可以随时放在口袋里，那时候它仍然不是布鲁斯的。直到有一天，美国的黑人，赋予了口琴第二次生命。压音、超吹、把位变换等等，他们不断的压榨着它的性能，用它尽情的演奏布鲁斯音乐。&lt;/p&gt;

&lt;p&gt;每一种乐器，都有自己的历史和文化。学习布鲁斯口琴，理解布布鲁斯音乐，是一道迈不过去的坎。&lt;br /&gt;
布鲁斯音乐是一种很神奇的音乐。刚接触到时，觉得很难听，太喧闹，这哪里是音乐。但慢慢的，你会随着它的节奏开始晃动你的脑袋或身体，感受它的时而轻快，时而沉重，时而悲泣，时而低吟。闭上眼睛，仿佛你已置身密西西比，置身芝加哥。&lt;/p&gt;

&lt;p&gt;有一部电影叫《蓝调传奇》，用平铺直叙的方式讲述了几位大师们的一生。那样的年代，充斥着种族，暴力。生活太多苦难。Little Walter拿着口琴说，它才是我的妈妈，然后演出了《My Babe》。Chuck Berry一面接受滚石乐队朝圣般的膜拜，一面接受警察的痛打。电影的最后，没有辉煌，没有灯光。Little Walter死在了公寓里，伊塔·詹姆斯望着切斯的背影，唱出了《I’d Rather Go Blind》，肆意冲击你的泪腺。&lt;/p&gt;

&lt;p&gt;无论什么年代，生活中总是会有痛苦。越长大越明白，痛苦是无法战胜的。你只有经历它，活下去。口琴见证着，音乐见证着。&lt;/p&gt;

&lt;p&gt;很久没有更新关于口琴的文章了。事实上，通过搜索引擎找到这个小小的blog的访客，绝大部分是与口琴相关。很惭愧，没有写出有多少价值的文章。曾经做的一个翻译，也仅仅是为了加深自己的理解，而非供认阅读。有的朋友留言探讨翻译中的一些问题，有的朋友问我怎么不更新，希望steve baker的教程能继续。这些留言中有些还没来得及回，有一次却因为我不堪spam骚扰，清空了所有留言。这些朋友的留言再也找不回来了。想到这里，更是非常惭愧和抱歉。&lt;/p&gt;

&lt;p&gt;以后会继续写一些口琴方面的文章，虽然我技术很菜，但如果能帮到一点其他人，也就有它的价值。再加上现在手上有多余的硬件，再次讲口琴的内部构造时，可能会拿起螺丝刀拆开用图片说话。&lt;/p&gt;

&lt;p&gt;附上《蓝调传奇》片段：&lt;br /&gt;
&lt;embed src=&#34;http://player.youku.com/player.php/sid/XMzExNTU1MjA4/v.swf&#34; quality=&#34;high&#34; width=&#34;480&#34; height=&#34;400&#34; align=&#34;middle&#34; allowscriptaccess=&#34;always&#34; type=&#34;application/x-shockwave-flash&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>由《金蝉脱壳》到《习惯的力量》</title>
      <link>https://pureage.info/2013/11/16/133.html</link>
      <pubDate>Sat, 16 Nov 2013 04:09:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/11/16/133.html</guid>
      
        <description>&lt;p&gt;最近看了施瓦辛格的两部电影，《背水一战》和《金蝉脱壳》。&lt;/p&gt;

&lt;p&gt;施瓦辛格的电影之前能叫的上名字的，只有《终结者》系列，和一部想不起剧情和名字，关于大力神的电影。一直以来对他的印象就是肌肉男+前州长。但看完《背水一战》却让我眼前一亮，因为年老的施瓦辛格脸上竟然有些许伊斯特伍德的影子。爱屋及乌，也对这个虽然年轻十七岁，但也有六十六高龄的老头子忽然心生好感和敬意。&lt;/p&gt;

&lt;p&gt;说了这么多施瓦辛格，但史泰龙才是这部电影的男一号，论年龄，他还比州长大了一岁。史泰龙在电影里扮演的是一个越狱专家，他无时无刻不在观察着周围的环境，寻找哪怕是最隐蔽的薄弱点，然后用各种技能逃生。在他所有的技能中，最出色的的一项是对人的观察，就像一架机器一样不偏不倚的从周围人们的行为中找出他们的习惯，找到了这些习惯，也就意味着找到了逃出生天的法门了。&lt;/p&gt;

&lt;p&gt;习惯的力量有这么大吗？电影毕竟只是电影，很多地方经不起推敲。&lt;/p&gt;

&lt;p&gt;很巧的是，我刚好在昨天看完了一本书，叫《习惯的力量》，这是一本值得一看的书。并没有类似习惯决定性格，性格决定命运的老套警句，而是以大量的科学实验为依据，讲述了习惯的产生的原理，习惯对人的影响，以及怎么养成或破坏一个习惯。&lt;/p&gt;

&lt;p&gt;概括一下习惯的原理：&lt;/p&gt;

&lt;p&gt;一个习惯由三个部分构成，暗示、惯常行为和奖赏。暗示是指触发惯常行为的一系列因素，例如：地点、时间、情绪状态、其他人以及之前的动作等等。惯常行为就是我们常说的习惯本身。奖赏则是隐藏在这个惯常行为背后的某种渴求感。养成或破坏一个习惯的关键在于找到暗示和奖赏，把中间的惯常动作用新的动作替换掉。&lt;/p&gt;

&lt;p&gt;例如，小张同学有在每天下午三点吃甜食的习惯，这个毛病让他一直无法减肥成功。每天下午一到三点，他会起身到公司门口的商店买点吃的，再绕到办公室和身边的同事聊会天，在这个过程中把这些食物干掉。然后回到座位上继续工作。而其实他真正的渴求是他在专心工作到下午时，需要进行一些社交活动，吃东西的同时，和同事聊会天才是真正的奖赏。所以，只要他意识到了这一点，他就可以把吃甜食这个步骤给替换掉。&lt;/p&gt;

&lt;p&gt;当然，道理如果用不到自己身上，那就永远只是道理。下面一段时间，找一个我自己认为是不好的习惯，看看能否用书中的理论来改掉。例如，我有蹲坑拖延症，从小就有。每次蹲坑，手里不那本书是不会去的，这个时候书就很重要了，如果竟然我选了一本武侠小说，我肯定会在厕所里耗上很久。有一次我真的就在厕所里把某一本借来的《皮皮鲁和鲁西西》看完了。现在，阅读的载体又多了个手机、kindle等，这个坏毛病当然也还在延续。&lt;/p&gt;

&lt;p&gt;那么首先得找到蹲坑看书的爽点在哪里，当然不是一时半会能找到的，试试看吧。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>在CentOS6.2下用virtualenv分别创建python2.7.6和python3.3.2的应用</title>
      <link>https://pureage.info/2013/11/14/132.html</link>
      <pubDate>Thu, 14 Nov 2013 11:20:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/11/14/132.html</guid>
      
        <description>&lt;p&gt;本文主要内容参考自：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://toomuchdata.com/2012/06/25/how-to-install-python-2-7-3-on-centos-6-2/#comment-5691&#34;&gt;http://toomuchdata.com/2012/06/25/how-to-install-python-2-7-3-on-centos-6-2/#comment-5691&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用Python，一个绕不过去的问题，就是其版本繁多的问题。首先是版本选择问题，这个不在我们讨论的范围之内，官网上在显眼的位置做了一些说明和建议：Python2 or Python3。&lt;/p&gt;

&lt;p&gt;这里我们假设知道自己该选哪个或哪几个版本了。这里就会遇到第二个问题，python在linux中属于基础组件，各发行版会默认安装一个python，例如CentOS5.5中的是2.4.3，而CentOS6.2中是2.6.6.&lt;/p&gt;

&lt;p&gt;以CentOS6.2为例，在/usr/bin目录下有一个python和一个python2.6.这两者有什么区别呢：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[root@vps1 ~]# ls   -l /usr/bin/python&lt;br /&gt;
-rwxr-xr-x 2 root root 3592 Dec  7  2011 /usr/bin/python
[root@vps1 ~]# ls   -l /usr/bin/python2.6
-rwxr-xr-x 2 root root 3592 Dec  7  2011 /usr/bin/python2.6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以看到两个都不是软链接。通过计算一下md5值，可以发现这两者一模一样：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;958a320a8c3f4d352d398bb0ebc46ed8  /usr/bin/python&lt;br /&gt;
[root@vps1 ~]# md5sum  /usr/bin/python2.6
958a320a8c3f4d352d398bb0ebc46ed8  /usr/bin/python2.6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此，/usr/bin/python实际上是/usr/bin/python2.6的一个拷贝。如果我们此时想安装一个python3.3，应该怎么做呢？首先绝对不要想着先去卸载已有的python，曾经apt-get remove python或者yum remove python的人肯定会会心一笑。最通常的做法，下载到python3.3的源码来编译。&lt;/p&gt;

&lt;p&gt;在CentOS下，通过./configure&amp;amp;&amp;amp;make&amp;amp;&amp;amp;make install安装后，python会被安装到/usr/local/bin目录下，可能同时有python,python3,python3.3。其中python3.3和python是两个一模一样h的可执行文件，而python3则是一个指向/usr/local/bin/python的软链接。这样带来的问题是，在/usr/bin和/usr/local/bin目录下，都有一个名为python的可执行文件。虽然通过环境变量的可以确定在shell中执行python时到底是执行了哪个目录下的python，但总归显的很麻烦，时间长了更容易引起混乱。&lt;/p&gt;

&lt;p&gt;这个仅仅是安装一个python时遇到的问题，现实情况下，你可能同时跑着两个版本的django，每个版本的django依赖的python又不同，通过分别指定路径、建立软连接等方式虽然能解决，但还是一个字，乱。不知什么时候，就会互相影响了。&lt;/p&gt;

&lt;p&gt;自从有了virtualenv，pythoner的生活就好起来了。&lt;/p&gt;

&lt;p&gt;virtualenv的目的就是让每个python应用程序和自己依赖的python解释器及python库，各自隔离开来，互相不影响，更不会破坏系统自带的python环境。&lt;/p&gt;

&lt;p&gt;下面就来详细的演示virtualenv的操作过程：&lt;/p&gt;

&lt;p&gt;1.系统环境说明：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;操作系统：CentOS6.2&lt;br /&gt;
# cat /etc/issue&lt;br /&gt;
CentOS release 6.2 (Final)&lt;br /&gt;
Kernel \r on an \m&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;系统自带python环境：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;# python -V&lt;br /&gt;
Python 2.6.6&lt;br /&gt;
|# whereis python&lt;br /&gt;
python: /usr/bin/python /usr/bin/python2.6 /usr/lib/python2.6 /usr/include/python2.6 /usr/share/man/man1/python.1.gz&lt;br /&gt;
# ls -l /usr/bin/python*&lt;br /&gt;
-rwxr-xr-x 2 root root 3592 Dec  7  2011 /usr/bin/python&lt;br /&gt;
lrwxrwxrwx 1 root root    6 Nov 12 06:29 /usr/bin/python2 -&amp;gt; python&lt;br /&gt;
-rwxr-xr-x 2 root root 3592 Dec  7  2011 /usr/bin/python2.6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.操作预期：&lt;/p&gt;

&lt;p&gt;分别安装最新版的python2.7和python3.3，并各自安装一个flask框架，互相隔离。&lt;/p&gt;

&lt;p&gt;3.操作过程：&lt;/p&gt;

&lt;p&gt;（1）方便起见，首先安装一些其它常用的组件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum groupinstall &amp;quot;Development tools&amp;quot;  
yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（2）下载和安装python2.7.6&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkdir -p /home/fangpeng/sources  
# cd /home/fangpeng/sources/  
# wget http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz  
#tar xvfz Python-2.7.6.tgz  
#cd Python-2.7.6  
# ./configure --prefix=/usr/local  
# make &amp;amp;&amp;amp; make altinstall  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，是make altinstall，而不是make install。这样可以避免造成系统存在多个名为python，实际版本却各异的文件。&lt;/p&gt;

&lt;p&gt;安装完毕后，/usr/bin下系统自带的几个python文件都没有任何影响。在/usr/local/bin目录下，则多了一个python2.7和python2.7-config。&lt;/p&gt;

&lt;p&gt;（3）下载和安装Python3.3.2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /home/fangpeng/sources  
# wget http://www.python.org/ftp/python/3.3.2/Python-3.3.2.tgz  
#tar xvfz Python-3.3.2.tgz  
# cd Python-3.3.2  
# ./configure --prefix=/usr/local  
# make &amp;amp;&amp;amp; make altinstall  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样注意，是make altinstall，而非make install。安装完成后，在/usr/local/bin目录下，多出三个文件，分别是python3.3m,python3.3和python3.3-config,其中python3.3和python3.3m是同一个文件的两份拷贝。对系统自带的python2.6.6和上一步安装的python2.7.6无影响。&lt;/p&gt;

&lt;p&gt;（4）下载distribute&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /home/fangpeng/sources  
# wget --no-check-certificate https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（5）为python2.7.6安装easy_install&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# tar xvfz distribute-0.6.49.tar.gz  
# cd distribute-0.6.49  
# python2.7 setup.py  install  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（6）为python3.3.2安装easy_install&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /home/fangpeng/sources/  
# rm -rf distribute-0.6.49  
# tar xvfz distribute-0.6.49.tar.gz  
# cd distribute-0.6.49  
# python3.3 setup.py install  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行完（5）和（6）后，在/usr/local/bin目录下，会多出三个文件，分别是easy_install，easy_install-2.7和easy_install-3.3。其中，easy_install在两次安装时都会生成，因此会存在覆盖。我们直接使用easy_install-2.7和easy_install-3.3即可。&lt;/p&gt;

&lt;p&gt;（7）为python2.7安装virtualenv&lt;br /&gt;
终于到了virtualenv了，这才是我们今天的主角。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;easy_install-2.7 virtualenv  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（8）为python3.3安装virtualenv&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# easy_install-3.3  virtualenv  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，我们分别为python2.7.6和python3.3.2安装了virtualenv。同样在/usr/local/bin目录下多出了三个文件，分别是virtualenv，virtualenv-2.7和virtualenv-3.3。其中，virtualenv在两次安装时都会生成，因此会存在覆盖。我们直接使用virtualenv-2.7和virtualenv-3.3即可。&lt;/p&gt;

&lt;p&gt;下面用web框架flask的安装，来演示virtualenv的使用。创建两个flask的沙盒，其中一个依赖的是python2.7.6,另一个依赖python3.3.2。&lt;/p&gt;

&lt;p&gt;（1）创建相应的工程目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkdir -p /home/fangpeng/project/hello_flask  
# cd /home/fangpeng/project/hello_flask/  
# mkdir python2.7 python3.3  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（2）创建基于python2.7的flask工程&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /home/fangpeng/project/hello_flask/python2.7/  
# virtualenv-2.7 --distribute env  
Using base prefix &#39;/usr/local&#39;  
New python executable in env/bin/python3.3  
Also creating executable in env/bin/python  
Installing Setuptools..................................................................................................................................done.  
Installing Pip.............................................................................................................................................done.  
# source env/bin/activate  
(env)# 
(env)# python -V  
Python 2.7.6  
# pip install flask  
(env)# vim hello.py  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hello.py内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import Flask  
app=Flask(__name__)  
  
@app.route(&#39;/hello&#39;)  
def hello():  
        return &amp;quot;Hello,Flask!&amp;quot;  
if __name__==&#39;__main__&#39;:  
        app.run(host=&#39;0.0.0.0&#39;,debug=True)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行hello.py:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(env)# python hello.py 
 * Running on http://0.0.0.0:5000/  
 * Restarting with reloader  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用浏览器或在另一个终端用curl访问该hello接口，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# curl 192.168.1.101:5000/hello  
Hello,Flask!#  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（3）退出python2.7的virtualenv环境&lt;/p&gt;

&lt;p&gt;继续上一步，按ctr+c退出hello.py的执行。如下所示，此时还处于python2.7的virtualenv中，执行deactivate退出。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(env)# deactivate  
# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（4）创建基于python3.3的flask工程&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#cd /home/fangpeng/project/hello_flask/python3.3/  
# virtualenv-3.3 --distribute env  
Using base prefix &#39;/usr/local&#39;  
New python executable in env/bin/python3.3  
Also creating executable in env/bin/python  
Installing Setuptools.........................................................................................done.  
Installing Pip....................................................................................................done.  
# source env/bin/activate  
(env)# 
#（env) python -V  
Python 3.3.2  
(env)# pip  install flask  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hello.py的内容和上面完全一致，此处略去。&lt;br /&gt;
执行hello.py:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(env)# python hello.py 
 * Running on http://0.0.0.0:5000/  
 * Restarting with reloader  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用浏览器或在另一个终端用curl访问该hello接口，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# curl 192.168.1.101:5000/hello  
Hello,Flask!#  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此演示完毕。&lt;/p&gt;

&lt;p&gt;与上面的例子类似，以后如果要python2.7.6,则在创建应用程序前，先用virtualenv-2.7创建一个沙盘，要用python3.3.2,则用virtualenv-3.3创建一个沙盘。这样，依赖不同版本python的应用程序彼此完全隔离开来。在各自的virtualenv中，执行python命令就不用管版本问题了，更重要的是，系统自带的python环境也完全被隔离开来。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>推倒重做</title>
      <link>https://pureage.info/2013/11/13/131.html</link>
      <pubDate>Wed, 13 Nov 2013 13:21:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/11/13/131.html</guid>
      
        <description>&lt;p&gt;这几个月一直在做一个基于FastDFS的分布式存储系统，从前期调研、测试到后面的设计、编码、测试等。其中设计部分，每个环节都和当时带我的一位哥们讨论过，时而愁眉不展，百思不得其解；时而一拍脑袋，找到一个很巧妙的设计方法。已经有两个月没有什么大的改动了，上周实在无聊，就把我当时赶工写的，现在看来不堪入目的代码进行了重构。&lt;/p&gt;

&lt;p&gt;一切看起来很美好的样子，只是看起来。&lt;/p&gt;

&lt;p&gt;部门的开发主要分为后台组和系统组，我属于系统组，主要职责是做底层linux c方面，譬如nginx模块开发，存储系统开发等；后台组的职责就是要能从web上和我们的系统对接，在更高层面上进行管理，一方面是为了便于公司内部系统的部署和监控，另一方面也是为了和客户对接。&lt;/p&gt;

&lt;p&gt;问题就出在和后台对接上，昨天把我们组以及后台组的几个同事拉过来review我的代码时，发现现有的redis中设计的存储结构存在一定的缺陷。而这种设计的缺陷在公司现在一个主要的视频cdn产品中也有，所以后台组的同事们强烈要求在这个分布式存储系统中避免这个问题。&lt;/p&gt;

&lt;p&gt;意识到了问题后，昨天下午几个人就在一起把解决方案给讨论出来了。&lt;/p&gt;

&lt;p&gt;一切看起来还是很美好。&lt;/p&gt;

&lt;p&gt;经过多次血淋淋的教训，我知道肯定不能开始写代码，于是今天我又把这个新的设计拿出来，在纸上画了画，在大脑里细细的想了想。一个让我心惊的问题突然冒出来了，而以昨天讨论的方案，根本无法解决这个问题，吃一堑长一智，这次赶紧把几个主要人员叫到一块反映了这个问题。大家板着小板凳，围坐在小黑板前写写画画，一个小时后终于讨论出一种解决办法。与昨天的方案不同，这次的修改是大规模的，整个redis中的数据结构要完全重新设计。&lt;/p&gt;

&lt;p&gt;想起以前在华为时的开发场景，软件的架构都是架构师们设计好了，一般情况是没什么问题的，因为架构确定前会经过无数次的大大小小的会议评审。一旦架构、方案确定下来，下面的兄弟们就在各自从属的模块里垒着代码。你不用考虑任何架构方面的问题，你的代码对其他模块的影响也已经降到了最低，一方面是由低耦合的架构决定的，另一方面华为的软件质量体系也予以了保证，例如，可能外面的公司很难理解，华为的一个产品的开发周期内，会专门有一个从上到下的团队，负责版本的构建，通俗点说，就是操作svn，监控、测试着每一笔代码合入。这也是我离开华为的原因之一，螺丝钉感过于强烈。&lt;/p&gt;

&lt;p&gt;记得当时主管挽留我的时候，说华为的软件流程在外面是很难找到第二家的，而且这个流程已经深入到制度里了。不管项目多大，涉及到多少团队多少人，正是因为这个流程，这个制度，保证着都能在规定的时间内把东西做出来。&lt;/p&gt;

&lt;p&gt;当时我嘴上不说，心里嗤之以鼻，您继续忽悠，我都不想当螺丝钉了，您还给我讲论螺丝钉的光荣伟大。&lt;/p&gt;

&lt;p&gt;现在到了一个新的公司，做一个新的产品，写了些代码，对软件流程、大公司和小公司的区别有了一些思考。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;积淀、传承。这一点上大、小公司的差别太大。在华为，如果前一个项目的设计有缺陷，在下一个版本时，必然会将其当做重中之重，而不会出现我今天发现的问题。其实只要一个软件的质量够稳定，那么其架构肯定经过千锤百炼才设计出来的。而很可惜的是，再大的公司也不会把这个架构的历史变迁列出来给你看，只能靠自己慢慢深入体会。所以，如果有还在类似于华为的公司工作的同学，对现状不满，但是又不能决定离开时，可以从这一点入手，改变自己的心态，在华为能学到的东西不是没有，而是太多。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;灵活性。这一点大公司当然完全不如小公司了。我今天发现了这个问题，毕竟只是一个小项目，即使完全重做，也没多少难度，但在大公司则很难如此轻松应对了。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;主观能动性。如前所述，在华为做一个小兵其实不用操多少心，但在小公司，如果在你的同事或上级给你一个架构或方案，你当时发现了问题，一定要尽快如实的反馈，和稀泥的方式不会对你有任何帮助。那我今天的事情举例，当时这个redis的结构设计，是由那个带我入门的同事设计的，当时我也想到了这个问题，后来不知怎么就自己说服自己没问题了。大公司由于历史积淀深，新员工一般会对老员工带有一种学生膜拜老师的感觉，胆怯，不敢指出问题，而小公司相对而言，很可能里面的资深员工也只比你多工作一两年，年龄相似，发现问题嘻嘻哈哈把问题沟通下就行了。&lt;br /&gt;
想的不多，暂时写到这里吧。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>关于proxy_pass的参数路径问题</title>
      <link>https://pureage.info/2013/10/31/130.html</link>
      <pubDate>Thu, 31 Oct 2013 04:16:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/10/31/130.html</guid>
      
        <description>&lt;p&gt;由于工作需要，开始分析nginx的proxy模块，在分析之前，当然要先会用了。于是开始熟悉该模块的一些指令，其中最基本的指令要属proxy_pass了。nginx的英文文档总是看着感觉有些别扭，于是按惯例先google了一些文章。&lt;/p&gt;

&lt;p&gt;这一搜，就掉进坑里了。&lt;/p&gt;

&lt;p&gt;这些文章里都把proxy_pass的目标地址是形如“127.0.0.1:8090”和“127.0.0.1:8090/”分开讨论，认为后者“/&amp;ldquo;的作用是删除url中匹配的部分，然后再讨论目标地址中带了uri的情况。&lt;/p&gt;

&lt;p&gt;其实根本没这么复杂，只有两种情况：&lt;/p&gt;

&lt;p&gt;（1）目标地址中不带uri。即proxy_pass的参数形如&amp;rdquo;&lt;a href=&#34;http://127.0.0.1:8090&amp;quot;。&#34;&gt;http://127.0.0.1:8090&amp;quot;。&lt;/a&gt;
此时新的目标url中，匹配的uri部分不做修改，原来是什么样就是什么样。&lt;/p&gt;

&lt;p&gt;（2）目标地址中带uri。即proxy_pass的参数形如“&lt;a href=&#34;http://127.0.0.1:8090/dir1/dir2&amp;quot;&#34;&gt;http://127.0.0.1:8090/dir1/dir2&amp;quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;此时新的目标url中，匹配的uri部分将会被修改为该参数中的uri，如&amp;rdquo;&lt;a href=&#34;http://127.0.0.1:8888/dir1/dir2.&amp;quot;&#34;&gt;http://127.0.0.1:8888/dir1/dir2.&amp;quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有人说，你没有讨论ip和端口后带不带”/“的区别。其实是不需要的，因为&amp;rdquo;/&amp;ldquo;本身就是一种uri，很明显属于上面的第二种情况，只不过是把原来的uri修改为了现在的uri（”/&amp;rdquo;)，看上去，像是删除了原url中匹配的部分。如果不理解这一点，就会总想着去牢记、区分结尾带不带&amp;rdquo;/&amp;ldquo;的情况。&lt;br /&gt;
官方文档也是这么叙述的，根本没有提及半句“/&amp;ldquo;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A request URI is passed to the server as follows:&lt;/p&gt;

&lt;p&gt;If the proxy_pass directive is specified with a URI, then when a request is passed to the server, the part of a normalized request URI matching the location is replaced by a URI specified in the directive:&lt;br /&gt;
location /name/ {&lt;br /&gt;
    proxy_pass &lt;a href=&#34;http://127.0.0.1/remote/&#34;&gt;http://127.0.0.1/remote/&lt;/a&gt;;&lt;br /&gt;
}&lt;br /&gt;
If proxy_pass is specified without a URI, the request URI is passed to the server in the same form as sent by a client when the original request is processed, or the full normalized request URI is passed when processing the changed URI:&lt;br /&gt;
location /some/path/ {&lt;br /&gt;
    proxy_pass &lt;a href=&#34;http://127.0.0.1&#34;&gt;http://127.0.0.1&lt;/a&gt;;&lt;br /&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;测试部分如下。&lt;/p&gt;

&lt;p&gt;如果配置为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;server {&lt;br /&gt;
                listen 9090;&lt;br /&gt;
                access_log /home/strider/project/nginx/nginx-1.4.2/log/access_9090.log;&lt;br /&gt;
                location /test1/test2/{&lt;br /&gt;
                proxy_pass &lt;a href=&#34;http://127.0.0.1:8090&#34;&gt;http://127.0.0.1:8090&lt;/a&gt;;&lt;br /&gt;
                }&lt;br /&gt;
            }&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;则有如下对应关系：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:9090/test1/test2/echo1-----&amp;gt;127.0.0.1:8090/test1/test2/echo1  
127.0.0.1:9090/test1/test2/----&amp;gt;127.0.0.1:8090/test1/test2  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果配置为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;server {&lt;br /&gt;
                listen 9090;&lt;br /&gt;
                access_log /home/strider/project/nginx/nginx-1.4.2/log/access_9090.log;&lt;br /&gt;
                location /test1/test2/{&lt;br /&gt;
                proxy_pass &lt;a href=&#34;http://127.0.0.1:8090/&#34;&gt;http://127.0.0.1:8090/&lt;/a&gt;;&lt;br /&gt;
                }&lt;br /&gt;
            }&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;则有如下对应关系：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:9090/test1/test2/echo1-----&amp;gt;127.0.0.1:8090/echo1  
127.0.0.1:9090/test1/test2/----&amp;gt;127.0.0.1:8090/  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果配置为：&lt;br /&gt;
&amp;gt;server {&lt;br /&gt;
                listen 9090;&lt;br /&gt;
                access_log /home/strider/project/nginx/nginx-1.4.2/log/access_9090.log;&lt;br /&gt;
                location /test1/test2/{&lt;br /&gt;
                        proxy_pass &lt;a href=&#34;http://127.0.0.1:8090/test1&#34;&gt;http://127.0.0.1:8090/test1&lt;/a&gt;;&lt;br /&gt;
                        }&lt;br /&gt;
            }&lt;/p&gt;

&lt;p&gt;则有如下对应关系：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:9090/test1/test2/echo1-----&amp;gt;127.0.0.1:8090/test1echo1  
127.0.0.1:9090/test1/test2/----&amp;gt;127.0.0.1:8090/test1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果配置为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;server {&lt;br /&gt;
                listen 9090;&lt;br /&gt;
                access_log /home/strider/project/nginx/nginx-1.4.2/log/access_9090.log;&lt;br /&gt;
                location /test1/test2/{&lt;br /&gt;
                        proxy_pass &lt;a href=&#34;http://127.0.0.1:8090/test3/test4/test5&#34;&gt;http://127.0.0.1:8090/test3/test4/test5&lt;/a&gt;;&lt;br /&gt;
                        }&lt;br /&gt;
            }&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;则有如下对应关系：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:9090/test1/test2/echo1-----&amp;gt;127.0.0.1:8090/test3/test4/test5echo1  
127.0.0.1:9090/test1/test2/----&amp;gt;127.0.0.1:80990/test3/test4/test5  
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>利用here document携带c代码</title>
      <link>https://pureage.info/2013/10/08/129.html</link>
      <pubDate>Tue, 08 Oct 2013 03:23:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/10/08/129.html</guid>
      
        <description>&lt;p&gt;假设你想通过一段脚本调用make来编译代码，并且在脚本中将一些编译需要的系统信息传递给makefile，可以通过bash的here document来实现。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tmp_src_filename=fdfs_check_bits.c  
cat &amp;lt;&amp;lt;EOF &amp;gt; $tmp_src_filename  
#include &amp;lt;stdio.h&amp;gt;  
#include &amp;lt;unistd.h&amp;gt;  
#include &amp;lt;fcntl.h&amp;gt;  
int main()  
{  
        printf(&amp;quot;%d\n&amp;quot;, (int)sizeof(long));  
        printf(&amp;quot;%d\n&amp;quot;, (int)sizeof(off_t));  
        return 0;  
}  
EOF  
  
gcc -D_FILE_OFFSET_BITS=64 -o a.out $tmp_src_filename  
output=$(./a.out)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码摘自FastDFS的make.sh。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>emlog的一键备份</title>
      <link>https://pureage.info/2013/10/01/128.html</link>
      <pubDate>Tue, 01 Oct 2013 03:31:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/10/01/128.html</guid>
      
        <description>&lt;p&gt;不知道大家平时备份是不是和我一样这么操作的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;登陆到后台，备份sql（当然，或者是用插件定期备份发送到邮箱）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;用ftp备份content目录
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果你想简化操作，并且和我一样苦逼的用着虚拟主机，下面的脚本也许可以帮到你。脚本很丑陋，能完成功能即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（1） 将下面脚本中config标记部分需要自己配置，意义如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;backup_path：content目录和sql文件要存放的目录&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;emlog_domain:你的博客域名，例如：&lt;a href=&#34;http://www.pureage.info&#34;&gt;http://www.pureage.info&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;emlog_user:你博客的登录名&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;emlog_password：你博客的登陆密码&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;remotecontent：你ftp上content目录的完整url，带上你的ftp账号和密码信息，例如：     &lt;a href=&#34;ftp://admin:password@127.0.0.1/domains/xxxx.com/public_html/content&#34;&gt;ftp://admin:password@127.0.0.1/domains/xxxx.com/public_html/content&lt;/a&gt; 将admin,password改成你自己的ftp账号、密码，把127.0.0.1改成你ftp的IP（通常就是主机IP）,domains/xxxx.com/public_html/contentg改成你自己的content在ftp上的目录即可。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（2）假设将该脚本命名为emlog_backup.sh，执行chmod +x emlog_backup.sh，赋予可执行属性。&lt;/p&gt;

&lt;p&gt;（3）执行./emlog_backup.sh:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果不带参数，或执行./emlog_backup.sh all 则先备份数据库，再备份content目录&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果是执行./emlog_backup.sh sql，则只备份数据库&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果是执行./emlog_backup.sh content，则只备份content目录&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash  
  
#-----config------------  
backup_path=&amp;quot;/home/strider/blog/backup&amp;quot;  
emlog_domain=&amp;quot;http://www.pureage.info&amp;quot;  
emlog_user=&amp;quot;aaaaa&amp;quot;  
emlog_password=123456  
remote_content=&amp;quot;ftp://admin:123456@127.0.0.1/domains/pureage.info/public_html/content&amp;quot;  
#----------------------  
  
  
#-----  
mkdir -p &amp;quot;$backup_path&amp;quot;  
  
if [ -d &amp;quot;$backup_path/content&amp;quot; ];then  
mv &amp;quot;$backup_path/content&amp;quot; &amp;quot;$backup_path/content_old&amp;quot;  
fi  
  
  
  
backup_database()  
{  
        #----get the cookie----  
        curl -d &amp;quot;user=$emlog_user&amp;amp;pw=$emlog_password&amp;quot;  &amp;quot;$emlog_domain&amp;quot;/admin/index.php?action=login -c &amp;quot;$backup_path/cookie&amp;quot;  
  
  
        #----back up database----  
        table_backup=(  
        &amp;quot;emlog_attachment&amp;quot;  
        &amp;quot;emlog_blog&amp;quot;  
        &amp;quot;emlog_comment&amp;quot;  
        &amp;quot;emlog_options&amp;quot;  
        &amp;quot;emlog_navi&amp;quot;  
        &amp;quot;emlog_reply&amp;quot;  
        &amp;quot;emlog_sort&amp;quot;  
        &amp;quot;emlog_link&amp;quot;  
        &amp;quot;emlog_tag&amp;quot;  
        &amp;quot;emlog_trackback&amp;quot;  
        &amp;quot;emlog_twitter&amp;quot;  
        &amp;quot;emlog_user&amp;quot;  
        )  
        table_box=$(  
        let i=0;  
        for((i=0;i&amp;lt;${#table_backup[@]}-1;i=i+1))  
        do  
        echo -n &amp;quot;table_box[$i]=${table_backup[$i]}&amp;amp;&amp;quot;  
        done  
        echo -n &amp;quot;table_box[$i]=${table_backup[$i]}&amp;quot;  
        )  
        echo $table_box  
  
        sql_file=&amp;quot;$(date &amp;quot;+%Y_%m_%d_%H_%M_%S&amp;quot;).sql&amp;quot;  
  
        curl  -b &amp;quot;$backup_path/cookie&amp;quot; -L    -d &amp;quot;$table_box&amp;quot;  &amp;quot;$emlog_domain&amp;quot;/admin/data.php?action=bakstart&amp;gt;&amp;quot;$backup_path/$sql_file&amp;quot;  
  
        #----delete the cookie----  
        rm -rf &amp;quot;$backup_path/cookie&amp;quot;  
}  
  
backup_content()  
{  
        wget  -r  -nH --cut-dirs=3  -nv &amp;quot;$remote_content&amp;quot; -P &amp;quot;$backup_path&amp;quot;  
  
        #----delete old content  
        if  [ -d &amp;quot;$backup__path/content&amp;quot; ];then  
                rm -rf &amp;quot;$backup_path/content&amp;quot;  
        fi  
}  
  
  
if [ $# -eq 0 ];then  
        backup_database  
        backup_content  
        exit 0  
  
elif [ $# -eq 1 ];then  
        if [ &amp;quot;$1&amp;quot; == &amp;quot;all&amp;quot; ];then  
                backup_database  
                backup_content  
                exit 0  
  
        elif [ &amp;quot;$1&amp;quot; == &amp;quot;sql&amp;quot; ];then  
                backup_database  
                exit 0  
  
        elif [ &amp;quot;$1&amp;quot; == &amp;quot;content&amp;quot; ];then  
                backup_content  
                exit 0  
        else  
                echo &amp;quot;operation not supported!&amp;quot;  
                exit 1  
        fi  
  
else  
        echo &amp;quot;operation not supported!&amp;quot;  
        exit 1  
fi  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.windows&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于对bat不熟，所以没有写成上面那种比较详细的脚本。但其实上面真正有用的只有三句：两个curl语句和一个wget语句。而curl和wget都有windows版本的。也很好写，最简单的例子，把下面的内容复制到一个文本里，将其改名为emlog_backup.bat，也可以工作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -d &amp;quot;user=xxxx&amp;amp;pw=123456&amp;quot;  http://www.pureage.info/admin/index.php?action=login -c cookie  
  
curl  -b cookie -L -d &amp;quot;table_box[0]=emlog_attachment&amp;amp;table_box[1]=emlog_blog&amp;amp;table_box[2]=emlog_comment&amp;amp;table_box[3]=emlog_options&amp;amp;table_box[4]=emlog_navi&amp;amp;table_box[5]=emlog_reply&amp;amp;table_box[6]=emlog_sort&amp;amp;table_box[7]=emlog_link&amp;amp;table_box[8]=emlog_tag&amp;amp;table_box[9]=emlog_trackback&amp;amp;table_box[10]=emlog_twitter&amp;amp;table_box[11]=emlog_user&amp;quot;  www.pureage.info/admin/data.php?action=bakstart&amp;gt;myemlog.sql  
  
wget  -r  -nH --cut-dirs=3 -nv  ftp://admin:123456@127.0.0.1/domains/pureage.info/public_html/content  
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>漫谈logrotate与crond</title>
      <link>https://pureage.info/2013/09/10/127.html</link>
      <pubDate>Tue, 10 Sep 2013 15:11:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/09/10/127.html</guid>
      
        <description>&lt;h1 id=&#34;什么是logrotate&#34;&gt;什么是logrotate&lt;/h1&gt;

&lt;p&gt;logrotate是一款用来切割日志的工具，更确切的说，是切割文本的工具，但通常用在软件日志切割上。为什么要进行日志切割呢？原因可以有很多，最明显的一个就是防止日志文件变得太大。&lt;/p&gt;

&lt;h1 id=&#34;lorotate的切割方式&#34;&gt;lorotate的切割方式&lt;/h1&gt;

&lt;p&gt;以nginx为例，假设其错误日志放在/data/proclog/log/nginx/下，名为nginx_error.log,当logrotate运行时，如果满足切割要求了，则会将nginx_error.log改名为nginx_error.log.1,并重新创建一个新的空文件nginx_error.log作为新的错误日志。&lt;/p&gt;

&lt;p&gt;当进行其二次切割时，nginx_error.log.1被改名为nginx_error.log.2,刚才创建的nginx_error.log被改名为新的nginx_error.log.1,然后再次重新创建一个新的空文件nginx_error.log作为新的错误日志投入使用。&lt;/p&gt;

&lt;p&gt;当进行第三次切割时，nginx_error.log.2变为nginx_error.log.3,nginx_error.log.1变为nginx_error.log.2,nginx_error.log变为nginx_error.log.1,一个新的nginx_error.log被再次创建。&lt;/p&gt;

&lt;p&gt;依次类推。&lt;/p&gt;

&lt;p&gt;至于到底会保留多少份nginx_error.log.N(N代表数字)，则是在logrotate的配置文件一个参数rotate设置的。例如，当rotate设置为3时，则只会保留nginx_error.log.1、nginx_error.log.2和nginx_error.log.3，老的文件会被删除。&lt;/p&gt;

&lt;h1 id=&#34;logrotate与crond&#34;&gt;logrotate与crond&lt;/h1&gt;

&lt;p&gt;logrotate默认会放在cron.daily目录下，每天自动运行。 执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim /etc/cron.daily/logrotate  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到该文件内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh  
  
/usr/sbin/logrotate /etc/logrotate.conf  
EXITVALUE=$?  
if [ $EXITVALUE != 0 ]; then  
    /usr/bin/logger -t logrotate &amp;quot;ALERT exited abnormally with [$EXITVALUE]&amp;quot;  
fi  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的shell脚本主要是执行/usr/sbin/logrotate程序，并检查执行状态，如果执行出错，则通过logger程序向系统日志中发送一条错误消息。&lt;/p&gt;

&lt;p&gt;注意，现在说道的logrotate有两个，一个是shell脚本，位于/etc/cron.daily下，一个是可执行文件，位于/usr/sbin目录下。&lt;/p&gt;

&lt;p&gt;继续看上面的logrotate脚本，其中错误处理语句中，logger程序是怎么运行的呢？我们可以做个小测试。 执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/logger -t strider &amp;quot;Good Morning&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;屏幕没有任何打印信息，但我们可以查看/var/log/message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tail /var/log/messages  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;观察最后一条信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sep 10 06:53:55 localhost strider: Good Morning  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见logrotate脚本的错误信息通过通过logger程序送到系统日志中去了。&lt;/p&gt;

&lt;h1 id=&#34;etc-cron-daily-etc-crontab&#34;&gt;/etc/cron.daily、/etc/crontab&lt;/h1&gt;

&lt;p&gt;上面我们说到，logrotate脚本放在/etc/cron.daily目录下，所以它会每天定期执行一次。为什么放在cron.daily目录下就会有此效果呢？而且，到底是在每天的什么时候执行呢？&lt;br /&gt;
linux下的定时任务是由系统服务crond来管理的。crond的配置文件是/etc/crontab,可以打开观察一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim /etc/crontab  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会看到如下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SHELL=/bin/bash  
PATH=/sbin:/bin:/usr/sbin:/usr/bin  
MAILTO=root  
HOME=/  
  
### run-parts  
01 * * * * root run-parts /etc/cron.hourly  
02 4 * * * root run-parts /etc/cron.daily  
22 4 * * 0 root run-parts /etc/cron.weekly  
42 4 1 * * root run-parts /etc/cron.monthly  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，SHELL字段、PATH字段等内容不用多说，重点看下下面的字段。如果你用crontab -e指令来写过crontab定时任务的话，一定会觉得跟crontab中的格式一模一样。其实这是错觉，/etc/crontab的配置中，每一行都多了一个root，表示以什么用户来执行，而crontab -e配置中，则没有这一个用户名字段。&lt;/p&gt;

&lt;p&gt;虽然有这一点区别，其他地方意义还是一样的，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;02 4 * * * root run-parts /etc/cron.daily  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就表明，每天凌晨的4:02时刻，以root身份执行run-parts /etc/cron.daily命令。我们大概也能猜出来了，run-parts的作用就是执行后面目录下的所有脚本，所以放在cron.daily目录下的脚本，会每天被执行一次。cron.hourly、cron.weekly、cron.monthly等也是如此。&lt;/p&gt;

&lt;h1 id=&#34;run-parts&#34;&gt;run-parts&lt;/h1&gt;

&lt;p&gt;那么run-parts到底是怎么做的呢？我们可以确定一下，执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;whereis run-parts  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;run-parts: /usr/bin/run-parts  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看run-parts类型，执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file /usr/bin/run-parts  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/run-parts: Bourne-Again shell script text executable  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见run-parts是一个bash脚本，其内容及注释如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash  
  
# run-parts - concept taken from Debian  
  
# keep going when something fails  
#当shell中某些命令或子shell执行错误时，该脚本让然能够执行下去。  
set +e  
  
#如果参数小于1，则打印用法信息，并退出  
if [ $# -lt 1 ]; then  
        echo &amp;quot;Usage: run-parts &amp;lt;dir&amp;gt;&amp;quot;  
        exit 1  
fi  
  
#如果所带参数不是一个目录，则报错，并退出  
if [ ! -d $1 ]; then  
        echo &amp;quot;Not a directory: $1&amp;quot;  
        exit 1  
fi  
  
# Ignore *~ and *, scripts  
#忽略该目录下，文件名中带有~和,的脚本  
for i in $1/*[^~,] ; do  
        #忽略子目录  
        [ -d $i ] &amp;amp;&amp;amp; continue  
  
        #忽略rpmsave、rpmorig、rpmnew、swp、v格式的文件  
        # Don&#39;t run *.{rpmsave,rpmorig,rpmnew,swp} scripts  
        [ &amp;quot;${i%.rpmsave}&amp;quot; != &amp;quot;${i}&amp;quot; ] &amp;amp;&amp;amp; continue  
        [ &amp;quot;${i%.rpmorig}&amp;quot; != &amp;quot;${i}&amp;quot; ] &amp;amp;&amp;amp; continue  
        [ &amp;quot;${i%.rpmnew}&amp;quot; != &amp;quot;${i}&amp;quot; ] &amp;amp;&amp;amp; continue  
        [ &amp;quot;${i%.swp}&amp;quot; != &amp;quot;${i}&amp;quot; ] &amp;amp;&amp;amp; continue  
        [ &amp;quot;${i%,v}&amp;quot; != &amp;quot;${i}&amp;quot; ] &amp;amp;&amp;amp; continue  
  
        #如果该文件可执行，则执行之  
        if [ -x $i ]; then  
                $i 2&amp;gt;&amp;amp;1 | awk -v &amp;quot;progname=$i&amp;quot; \  
                              &#39;progname {  
                                   print progname &amp;quot;:\n&amp;quot;  
                                   progname=&amp;quot;&amp;quot;;  
                               }  
                               { print; }&#39;  
        fi  
done  
  
exit 0  
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;etc-crontab和crontab-e&#34;&gt;/etc/crontab和crontab -e&lt;/h1&gt;

&lt;p&gt;与前面所说的logrotate一样，也有两个都叫crontab的文件，一个是/etc/crontab，是crond的配置文件，另一个是一个程序，是用户与crond交互的外部接口。&lt;/p&gt;

&lt;p&gt;一面已经提到,/etc/crontab与 crontab的配置格式是不一样的，例如：&lt;/p&gt;

&lt;p&gt;/etc/crontab中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...(略）  
02 4 * * * root run-parts /etc/cron.daily  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与程序crontab对比一下，执行crontab -u root -l，可得到：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* * * * * /home/strider/project/worker/fdfs-v4.07/script/fdfs_worker_demeon.sh  
* * * * * /bin/bash /home/strider/project/worker/fdfs-v4.07/script/fdfs_add_task.sh 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，通过crontab程序设置crond时，是不需要添加用户的。原因很简单，crontab必须在执行时指定用户名（如果不指定，则默认为当前登录的用户），执行crontab -u username -e设置完规则后，这些规则会保存在/var/spool/cron/username文件中,每个用户的crontab配置都会保存在属于该用户的文件中。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim /var/spool/cron/root  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* * * * * /home/strider/project/worker/fdfs-v4.07/script/fdfs_worker_demeon.sh  
* * * * * /bin/bash /home/strider/project/worker/fdfs-v4.07/script/fdfs_add_task.sh 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与cront -u root -l回显一致。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>uniq、sort不得不注意的尾部空格（trailing whitespaces)</title>
      <link>https://pureage.info/2013/09/09/126.html</link>
      <pubDate>Mon, 09 Sep 2013 13:38:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/09/09/126.html</guid>
      
        <description>&lt;h1 id=&#34;问题产生背景&#34;&gt;问题产生背景&lt;/h1&gt;

&lt;p&gt;自己写的一个基于FastDFS的客户端软件的日志格式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2013-09-06 08:57:01] 1884096 group6/M00/00/2D/Kj4ZKlIpKL6Actm8ABy_wPYwpa8782.mp3 ;fuckgfw.com/mp3k18/a2/1375_8767.mp3  
[2013-09-06 08:57:01] 1932032 group6/M00/00/2D/Kj4ZKlIpKL6APMlMAB17AFl-Zaw344.mp3 ;fuckgfw.com/mp3k18/a2/1390_20402.mp3
[2013-09-06 08:57:01] 2115392 group6/M00/00/28/Kj4ZK1IpKL6AUW6WACBHQHAveu0805.mp3 ;fuckgfw.com/mp3k18/a2/1381_8842.mp3  
[2013-09-06 08:57:01] 2340800 group6/M00/00/28/Kj4ZK1IpKL-ABGh8ACO3wLWZNXA955.mp3 ;fuckgfw.com/mp3k18/a2/1395_9009.mp3  
[2013-09-06 08:57:01] 1734272 group6/M00/00/28/Kj4ZK1IpKL-AZF8OABp2gDqh-sA949.mp3 ;fuckgfw.com/mp3k18/a2/1429_9466.mp3  
[2013-09-06 08:57:01] 2453888 group6/M00/00/2D/Kj4ZKlIpKL6AOkQ-ACVxgMD1aRE474.mp3 ;fuckgfw.com/mp3k18/a2/1429_9460.mp3  
[2013-09-06 08:58:00] 1375232 group14/M00/00/0C/Kj4ZLVIpKPqAFmmkABT8AAoz9lU552.mp3 ;fuckgfw.com/mp3k18/a2/1487_10243.mp3  
[2013-09-06 08:58:01] 3095808 group14/M00/00/0F/Kj4ZLFIpKPqAC73LAC89ACy9iyo432.mp3 ;fuckgfw.com/mp3k18/a2/1470_10017.mp3  
[2013-09-06 08:58:01] 2378240 group14/M00/00/0F/Kj4ZLFIpKPqADabyACRKANFt20E358.mp3 ;fuckgfw.com/mp3k18/a2/1471_10021.mp3  
[2013-09-06 08:58:01] 2102144 group14/M00/00/0C/Kj4ZLVIpKPqAOF32ACATgJsIdR0090.mp3 ;fuckgfw.com/mp3k18/a2/1465_9961.mp3  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每一行中用分号开始的域是url,且有可能会存在该url域相同的行，现在要做的是在一个有13635条记录的日志中找出这些重复的url。&lt;/p&gt;

&lt;h1 id=&#34;awk&#34;&gt;awk&lt;/h1&gt;

&lt;p&gt;接触过shell的童鞋可能都会马上想到用一条awk语句即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awk &#39;{print $5}&#39; sum_stat.log | sort | uniq  -d  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果在意料之中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;fuckgfw.com/mp3k18/b0/18013_209637.mp3  
;fuckgfw.com/mp3k18/b4/20059_233023.mp3  
;fuckgfw.com/mp3k18/b4/20421_237374.mp3  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想算出对url去重后的行数，则是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awk &#39;{print $5}&#39; sum_stat.log | sort | uniq | wc -l  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;13632  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;问题本身到这里其实就解决了，找到那些重复的url。但如果仅仅这样，也没必要写篇文章记录一下了。 从上面的结果可知，虽然url域重复的行找出来了，但仅仅只是打印出了该域部分，而无法把整条记录打印出来。如果需要的话，该怎么做呢？&lt;/p&gt;

&lt;h1 id=&#34;sort-uniq&#34;&gt;sort、uniq&lt;/h1&gt;

&lt;p&gt;上面的需求用几个纯粹的awk语句就可以实现，可惜对于awk我只会简单的print以及利用几个常见的内置变量如NR，NF来做下最基本的处理，因此暂时考虑用sort和uniq来完成。&lt;/p&gt;

&lt;p&gt;由于平时这两个命令用的比较多，马上写出下面的语句来打印出url域重复的行的完整内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sort  -k 5,5 sum_stat.log | uniq -f 4  -d  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是执行后，结果却是为空，没有任何东西打印出来。也就是说，用上面的语句无法找出url域重复的那些行。 为了再次确认，试着用下面的语句打印出sort和uniq处理后的行数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sort  -k 5,5 sum_stat.log | uniq -f 4 | wc -l  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;13635  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如前所属，本文件一共有13635行，url域重复的域一共有3行。显然，确实上面的sort和uniq语句没能找出url重复的行。&lt;/p&gt;

&lt;h1 id=&#34;罪魁祸首&#34;&gt;罪魁祸首&lt;/h1&gt;

&lt;p&gt;反复确认脚本没有问题后，我猜可能是这些行中，有某些行的结尾有空格或tab。&lt;br /&gt;
用万能的awk找出结尾有whtespace的行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awk &#39;/[[:space:]]$/  {print NR, $0}&#39; sum_stat.log  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1538 [2013-09-05 16:36:47] 2810048 group2/M00/00/0F/Kj4ZKlIos0uAfUd1ACrgwBB0ryQ704.mp3 ;fuckgfw.com/mp3k18/b0/18013_209637.mp3 
1600 [2013-09-05 16:41:47] 2119808 group24/M00/00/25/Kj4ZLVIostOAXgGtACBYgFLrM6U318.mp3 ;fuckgfw.com/mp3k18/b4/20059_233023.mp3 
1633 [2013-09-05 16:43:47] 2368640 group15/M00/00/2E/Kj4ZLFIostOAFvbKACQkgN9CyHU818.mp3 ;fuckgfw.com/mp3k18/b4/20421_237374.mp3  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可见，第1538、1600、1633这三行的结尾有多余的空白符。其实也可以猜出，这三行中的url就是那三个重复的url。&lt;/p&gt;

&lt;p&gt;把这三行的行末空白去掉后，再次运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sort  -k 5,5 sum_stat.log | uniq -f 4  -d -c  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2 [2013-09-05 16:36:47] 2810048 group2/M00/00/0F/Kj4ZKlIos0uAfUd1ACrgwBB0ryQ704.mp3 ;fuckgfw.com/mp3k18/b0/18013_209637.mp3  
2 [2013-09-05 16:41:47] 2119808 group24/M00/00/25/Kj4ZLVIostOAXgGtACBYgFLrM6U318.mp3 ;fuckgfw.com/mp3k18/b4/20059_233023.mp3  
2 [2013-09-05 16:43:47] 2368640 group15/M00/00/2E/Kj4ZLFIostOAFvbKACQkgN9CyHU818.mp3 ;fuckgfw.com/mp3k18/b4/20421_237374.mp3  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就顺利完成任务了。 如果打印出url域重复，且没去重的所有行，只需把uniq参数的-d改成-D即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sort  -k 5,5 sum_stat.log | uniq -f 4  -D  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;产生如下输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2013-09-05 16:36:47] 2810048 group2/M00/00/0F/Kj4ZKlIos0uAfUd1ACrgwBB0ryQ704.mp3 ;fuckgfw.com/mp3k18/b0/18013_209637.mp3  
[2013-09-06 00:35:54] 2810048 group2/M00/00/0F/Kj4ZKlIos0uAfUd1ACrgwBB0ryQ704.mp3 ;fuckgfw.com/mp3k18/b0/18013_209637.mp3  
[2013-09-05 16:41:47] 2119808 group24/M00/00/25/Kj4ZLVIostOAXgGtACBYgFLrM6U318.mp3 ;fuckgfw.com/mp3k18/b4/20059_233023.mp3  
[2013-09-06 00:33:54] 2119808 group24/M00/00/25/Kj4ZLVIostOAXgGtACBYgFLrM6U318.mp3 ;fuckgfw.com/mp3k18/b4/20059_233023.mp3  
[2013-09-05 16:43:47] 2368640 group15/M00/00/2E/Kj4ZLFIostOAFvbKACQkgN9CyHU818.mp3 ;fuckgfw.com/mp3k18/b4/20421_237374.mp3  
[2013-09-06 00:33:54] 2368640 group15/M00/00/2E/Kj4ZLFIostOAFvbKACQkgN9CyHU818.mp3 ;fuckgfw.com/mp3k18/b4/20421_237374.mp3  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以实现原来打算的功能了。&lt;/p&gt;

&lt;h1 id=&#34;原因&#34;&gt;原因&lt;/h1&gt;

&lt;p&gt;为什么有行尾空格不行呢？&lt;/p&gt;

&lt;p&gt;因为sort不会去除行尾空格，即使你指定了-k选项，而行中间的空格则不会有此问题。而uniq用了-f选项来跳过前面的不许考虑的域，同样也只能把行中间的空格略过，不会处理行尾的空格，这样导致了行尾的空格参与了比较，因而uniq不会把与之内容除行尾空格外均相同的行视为相同的行来去重了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>nil、null与ngx.null</title>
      <link>https://pureage.info/2013/09/02/125.html</link>
      <pubDate>Mon, 02 Sep 2013 14:06:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/09/02/125.html</guid>
      
        <description>&lt;h1 id=&#34;问题概述&#34;&gt;问题概述&lt;/h1&gt;

&lt;p&gt;今天第一次在nginx+lua架构下，写了个需要操作Redis的后台接口，该接口的功能主要是接受客户端的json格式的post请求，实现对保存在redis中的任务插入、删除、查询等。虽然nginx，lua等都是刚接触，但这几个接口还是顺风顺水的坐下来了，不能忘了感谢春哥章亦春。&lt;/p&gt;

&lt;p&gt;在Redis中记录的任务其实很简单，每插入一个任务，就在redis中增加一个HASH结构，每次查询返回该SET的各个Field和对应的Value值，例如md5，filesize等。由于任务类型的不同，有的Field可能在该任务中不存在，此时在以json格式将查询结果返回时不应显示该Field。&lt;/p&gt;

&lt;p&gt;以md5域为例，在对当前任务以md5域执行hget后，应该对返回结果做一个判断，如果该HASH结构并没有设置md5这个域，则跳过，继续执行后面的逻辑，如果设置了md5域，则把该域的Value取出来，插入到结果table中，后续再作为json格式返回结果的一部分，返回给后台。&lt;/p&gt;

&lt;p&gt;测试时，却发现在某些域未设置时，查询结果中却仍然会把该域返回给查询调用者，但其Value部分是null。例如,执行下面的测试用例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -d &amp;quot;{\&amp;quot;queryfile\&amp;quot;:[{\&amp;quot;url\&amp;quot;:\&amp;quot;/www.baidu.com/img/bdlogo.gif\&amp;quot; }]}&amp;quot; &amp;quot;127.0.0.1/cjson&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;尽管对该任务而言，在插入时并没有设置md5域，但返回结果包含了md5域：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;result&amp;quot;:[{&amp;quot;url&amp;quot;:&amp;quot;\/www.baidu.com\/img\/bdlogo.gif&amp;quot;,&amp;quot;result&amp;quot;:0,&amp;quot;md5&amp;quot;:null,&amp;quot;putflag&amp;quot;:&amp;quot;remote&amp;quot;}]}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;问题分析&#34;&gt;问题分析&lt;/h1&gt;

&lt;p&gt;看到这个现象，首先想到的当然是lua脚本中对执行hget md5操作的返回值判断失效了，我第一次是这么写的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local md5,err=red:hget(tasklist,&amp;quot;md5&amp;quot;)  
if md5 and  md5 ~= &amp;quot;&amp;quot;  then  
    tb.md5=md5  
end  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从后面的结果看，当md5值为空时，该判断条件并没有将其过滤掉，依然执行了tb.md5=md5。由于redis模块也是调用春哥的lua-resty-redis，因此猜测是否春哥把redis查询结果中的空值用“null”字符串返回了，于是将上面的几行代码改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local md5,err=red:hget(tasklist,&amp;quot;md5&amp;quot;)  
if md5 and  md5 ~= “null”  then  
    tb.md5=md5  
end  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仍然过滤失败，忽然眼前一亮，发现查询结果中显示的是&amp;rdquo;md5&amp;rdquo;:null,而非&amp;rdquo;md5&amp;rdquo;:&amp;ldquo;null&amp;rdquo;，上面这种猜测不攻自破。&lt;/p&gt;

&lt;p&gt;red:hget(tasklist,&amp;ldquo;md5&amp;rdquo;)肯定是返回了一个跟null相关的结果，但这个结果既不是nil，又不是空字符串，也不是&amp;rdquo;null&amp;rdquo;。再次猜测，该值类型可能不是string,虽然这个猜测看上去很奇怪，因为在设置了md5的情况下，其类型的确是string。于是在判断语句前面加了一句打印信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngx.say(&amp;quot;type of null is &amp;quot;..type(md5))  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;果然，这个”空值“并不是string类型，而是userdata类型，userdata类型当然跟字符串类型不会相等，所以上面的过滤条件不管设置成什么样子，都不会生效，永远会执行tb.md5=md5。&lt;/p&gt;

&lt;p&gt;这样是找到原因了，但还未最终解决。既然当hget操作返回一个空值时，lua-resty-redis将其设置为一个userdata类型，那我们在代码里该如何过滤这种情况呢?本质问题就是，red:hget当查询resdis结果为空时，到底返回了什么？（不为空时，是string)&lt;/p&gt;

&lt;p&gt;这时候开源的好处就体现出来了，在&lt;a href=&#34;https://github.com/agentzh/lua-resty-redis里扫了下redis.lua文件，发现返回的是ngx.null。&#34;&gt;https://github.com/agentzh/lua-resty-redis里扫了下redis.lua文件，发现返回的是ngx.null。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;恩，问题到这就解决了，将上面的过滤代码改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local md5,err=red:hget(tasklist,&amp;quot;md5&amp;quot;)  
if md5 and md5 ~= null and md5 ~= ngx.null  then  
    tb.md5=md5  
end  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就能保证返回结果里不会包含值为null的域了。&lt;/p&gt;

&lt;h1 id=&#34;眼高手低&#34;&gt;眼高手低&lt;/h1&gt;

&lt;p&gt;回头看了一下lua-resty-redis的文档，发现关于上面的内容，在Readme里已经写的清清楚楚了，在&lt;a href=&#34;https://github.com/agentzh/lua-resty-redis/blob/master/README.markdown中，有这么一句：&#34;&gt;https://github.com/agentzh/lua-resty-redis/blob/master/README.markdown中，有这么一句：&lt;/a&gt;&lt;br /&gt;
A non-nil Redis &amp;ldquo;bulk reply&amp;rdquo; results in a Lua string as the return value. A nil bulk reply results in a ngx.null return value.&lt;/p&gt;

&lt;p&gt;首先不应该是自责，而是再次赞一下agentzh的态度，业界标杆。&lt;/p&gt;

&lt;h1 id=&#34;ngx-null是什么&#34;&gt;ngx.null是什么？&lt;/h1&gt;

&lt;p&gt;那么ngx.null到底是什么东西呢？ 在&lt;a href=&#34;http://wiki.nginx.org/HttpLuaModule有如下说明：&#34;&gt;http://wiki.nginx.org/HttpLuaModule有如下说明：&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The ngx.null constant is a NULL light userdata usually used to represent nil values in Lua tables etc and is similar to the lua-cjson library&amp;rsquo;s cjson.null constant. This constant was first introduced in the v0.5.0rc5 release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ngx.null在print、ngx.print、ngx.log、ngx.say等函数中，有如下特点：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lua nil arguments are accepted and result in literal &amp;ldquo;nil&amp;rdquo; strings while Lua booleans result in literal &amp;ldquo;true&amp;rdquo; or &amp;ldquo;false&amp;rdquo; strings. And the ngx.null constant will yield the &amp;ldquo;null&amp;rdquo; string output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;为什么要这么设计&#34;&gt;为什么要这么设计？&lt;/h1&gt;

&lt;p&gt;lua-resty-redis中，为什么要把redis查询为空的情况返回一个userdata类型的ngx.null？直接返回nil不行吗？&lt;/p&gt;

&lt;p&gt;答案是不行，因为nil在lua中有其特殊意义，如果一个变量被设置为nil，就等于说该变量未定义，与无穷无尽的其他未定义的变量一样。那么，如果把redis查询为空的结果设置为nil，就无法把&amp;rdquo;查询为空”和“未定义”区分开来了，例如在一个table中，一个key对应一个value，如果将该value设置为nil，则相当让key凭空消失，这显然是不合理的。所以必须用一个userdata类型的独特的值来表示这种查询为空，但又不等同于未定义的变量，例如ngx.null。同样的情况想必在sql的lua模块中也会出现，用来处理记录中键值查询为空的情况。&lt;/p&gt;

&lt;h1 id=&#34;幽灵般的nil&#34;&gt;幽灵般的nil&lt;/h1&gt;

&lt;p&gt;这就要说道lua中神奇的nil了。nil是一种类型，该类型只有一个值，这个值也叫nil。改值的作用只有一个，表示一个变量不存在。跟C\C++等常规语言不同，”不存在“跟空、0完全是两个概念。在C语言中，一个字符串如果为空，那么它就只有一个为0的\nul结束符，如果对齐进行逻辑判断，则是假。&lt;br /&gt;
但lua中，只要一个变量不是nil类型或者是boolean类型中的false,则对它进行逻辑判断，结果是真，即使该值是一个数字0，或者是一个空字符串。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>无题</title>
      <link>https://pureage.info/2013/08/30/124.html</link>
      <pubDate>Thu, 29 Aug 2013 16:14:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/08/30/124.html</guid>
      
        <description>&lt;p&gt;躺在水底&lt;/p&gt;

&lt;p&gt;仰望&lt;/p&gt;

&lt;p&gt;光影摇曳&lt;/p&gt;

&lt;p&gt;扑朔迷离&lt;/p&gt;

&lt;p&gt;就像&lt;/p&gt;

&lt;p&gt;俯瞰众生&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>怎样可以连续做一百个俯卧撑</title>
      <link>https://pureage.info/2013/08/23/123.html</link>
      <pubDate>Fri, 23 Aug 2013 11:27:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/08/23/123.html</guid>
      
        <description>&lt;p&gt;我一直有一个目标：连续做俯卧撑一百个。&lt;/p&gt;

&lt;p&gt;我最早开始接触俯卧撑是在初中，那时在校外借宿，每天中午拿着饭盒到宿舍后，做的第一件事情就是做三十个俯卧撑再吃饭，最多的时候能连续做七十个。也就是从那个时候起，我的胸肌一直处于比一般同龄人大一圈的状态，但到了高中之后，就没有再坚持下去了。到了大学，偶尔心血来潮会试一下，快速的能做个三四十个，慢速的做十个都很费劲。这个状态，虽然与自己巅峰状态相去甚远，但跟身边的人比，也差不到哪里去。毕竟大家基本上都是死宅男，除了真三（那时候dota还没那么流行），就是武藤兰，剩下几个搞电子设计、算法竞赛的，一天到晚在实验室呆着。&lt;/p&gt;

&lt;p&gt;但也有例外，正是在大学里，我才知道有人真的能连续慢速俯卧撑一百下，而且还是自己的同班同学。很多事情，其实你很早就知道不是什么稀奇的事，而一旦在你身边发生了，那感觉还是不一样的。但很遗憾，没有在大学里向他看齐，只是在心里埋下了一粒种子：其实我也可以做一百个，这东西并没有想象中那么遥远。&lt;/p&gt;

&lt;p&gt;工作后，身体越来越差，突然在某天意识到，要开始锻炼身体了，于是又开始了我荒废多年的俯卧撑。这次的目标很明确，早日可以做到一百个。&lt;/p&gt;

&lt;p&gt;目标定了之后，就是方法的问题了。&lt;/p&gt;

&lt;p&gt;回想一下我初中时候的经历，基本就是凭借蛮力，每次尽量做到做不下去就停止，这样一天一天下去，数量自然越来越多了。现在，我想随便一个对健身稍微有点了解的，都知道其实健身里面讲究很多，比如每个动作要分组多次进行，比如不能每天都锻炼，要给肌肉恢复期等等。&lt;/p&gt;

&lt;p&gt;就像学一门编程语言之前，先在google里搜一下前人的学习经验一样，我搜了下&amp;rdquo;100 push up&amp;rdquo;,居然还发现有这么一个网站www.hundredpushups.com ,专门教你怎么能用六周的时间做到100个俯卧撑。&lt;/p&gt;

&lt;p&gt;好吧，开始按它指定的计划来，首先做一下初始测试，我现在标准慢速能做20个，于是找到属于这一档的六周锻炼计划开始执行，每周做3次，每次分成五个组，每组有不同的数量。我甚至还找到了一个专门根据这套计划制作的手机App。&lt;/p&gt;

&lt;p&gt;好吧，万事具备，只欠开做了，100个俯卧撑的目标似乎在不远处向我招手。&lt;/p&gt;

&lt;p&gt;但是真正实施起来，我发现一个问题。&lt;/p&gt;

&lt;p&gt;首先，我的初始测试绝对是诚实的，标准的、慢速的20个。可是，我发现我无法完成第一周第一天的训练量。每次到最后一组，我都要剩下四五个。&lt;/p&gt;

&lt;p&gt;于是，我决定放弃这个计划，但又不是完全放弃。我每天，而不是一周只三天，都去去按照这个计划里第一周第一天的任务量来进行。这样坚持了一周后，到第二周，直接按照这个计划里的第二周第一天的量来进行，然后我惊喜的发现，我可以完成了。&lt;/p&gt;

&lt;p&gt;因此，跟很多事情一样，健身这种事也并没有放之四海而皆准的准则，重要的是要找到适合自己的节奏和方法。适合我自己的方法就是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;无论如何，每天都要练。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;那套锻炼一天，然后让肌肉休息一天的方法并不适合我，而且更重要的是，我并不是为了增肌，让肌肉更好看。我的目标很简单，就是做到标准慢速100个。而现在我有理由相信，这个目标肯定会达到。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>bash中while循环的一个大坑</title>
      <link>https://pureage.info/2013/08/22/122.html</link>
      <pubDate>Thu, 22 Aug 2013 03:06:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/08/22/122.html</guid>
      
        <description>&lt;p&gt;起因是这样的，在一个常规的日志处理脚本中，最普通不过的while read line;do XXXX;done&amp;lt;file的应用场景。可是发现文件处理完后，该脚本并没有停止，仍在不停执行，准确点说，是死循环了。第一反应是想到是不是文件格式问题，导致在判断文件结束上出现了问题？但所有的文件都是在服务器上直接生成或创建的，不会存在这个问题。脚本通读了几遍，未果；无奈之下，只好祭出bash -x来。才发现，原来是在敲脚本时，不知怎么手抖了一下，在while和do语句之间，打上了个echo语句。这个就是罪魁祸首了，删掉后，脚本就恢复正常了。&lt;/p&gt;

&lt;p&gt;如果就这么过去了，多没意思，我觉得有必要深究一下while的运行机制。&lt;/p&gt;

&lt;p&gt;假设while_test.sh脚本内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash  
  
let sum=0
while((sum&amp;lt;10))  
do  
echo $sum  
let sum++  
done  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行后，很正常，在屏幕上打印：&lt;br /&gt;
0&lt;br /&gt;
1&lt;br /&gt;
2&lt;br /&gt;
3&lt;br /&gt;
4&lt;br /&gt;
5&lt;br /&gt;
6&lt;br /&gt;
7&lt;br /&gt;
8&lt;br /&gt;
9&lt;/p&gt;

&lt;p&gt;下面对脚本进行下修改，在while和do之间加上一个echo语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash  
  
let sum=0  
while((sum&amp;lt;10))  
echo &amp;quot;nima&amp;quot;  
do  
echo $sum  
let sum++  
done  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行之，死循环如约而至，屏幕上翻滚着：&lt;/p&gt;

&lt;p&gt;&amp;hellip;..(略）&amp;hellip;&amp;hellip;&lt;br /&gt;
nima&lt;br /&gt;
1779&lt;br /&gt;
nima&lt;br /&gt;
1780&lt;br /&gt;
nima&lt;br /&gt;
1781&lt;br /&gt;
nima&lt;br /&gt;
1782&lt;br /&gt;
nima&lt;br /&gt;
1783&lt;br /&gt;
nima&lt;br /&gt;
1784&lt;br /&gt;
nima&lt;br /&gt;
1785&lt;br /&gt;
nima&lt;br /&gt;
1786&lt;br /&gt;
nima&lt;br /&gt;
1787&lt;br /&gt;
nima&lt;br /&gt;
1788&lt;br /&gt;
&amp;hellip;&amp;hellip;(略）&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;到这里，答案已经浮出水面了，问题不在bash，而在于受C语言的影响，我们习惯性的认为while应该把sum&amp;lt;10作为循环进行的条件。但bash里,碰到while后，它会把while到do之间的所有语句的执行结果作为循环进行的条件，而所谓“所有语句的执行结果”，就是这所有语句中，最后一个语句的执行结果。如果这最后一个语句执行成功，则继续执行do到done之间的内容，循环继续；如果执行失败，则退出循环。按照shell的惯例，执行成功与否，可以根据返回码来判断，返回码为0，则成功，非0则失败。&lt;/p&gt;

&lt;p&gt;验证一下，将脚本改为如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash  
  
let sum=0  
while((sum&amp;lt;5))  
echo &amp;quot;nima&amp;quot;  
echo &amp;quot;niba&amp;quot;  
[ $sum -le 10 ]  
do  
echo $sum  
let sum++  
done  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行之，在屏幕上打印：&lt;/p&gt;

&lt;p&gt;nima&lt;br /&gt;
niba&lt;br /&gt;
0&lt;br /&gt;
nima&lt;br /&gt;
niba&lt;br /&gt;
1&lt;br /&gt;
nima&lt;br /&gt;
niba&lt;br /&gt;
2&lt;br /&gt;
nima&lt;br /&gt;
niba&lt;br /&gt;
3&lt;br /&gt;
nima&lt;br /&gt;
niba&lt;br /&gt;
4&lt;br /&gt;
nima&lt;br /&gt;
niba&lt;br /&gt;
5&lt;br /&gt;
nima&lt;br /&gt;
niba&lt;br /&gt;
6&lt;br /&gt;
nima&lt;br /&gt;
niba&lt;br /&gt;
7&lt;br /&gt;
nima&lt;br /&gt;
niba&lt;br /&gt;
8&lt;br /&gt;
nima&lt;br /&gt;
niba&lt;br /&gt;
9&lt;br /&gt;
nima&lt;br /&gt;
niba&lt;br /&gt;
10&lt;br /&gt;
nima&lt;br /&gt;
niba&lt;/p&gt;

&lt;p&gt;当在循环中，sum增加到10后，再次执行while后面的语句，打印nima和niba，但执行[ $sum -le 10 ]时，返回码为非0.所以循环退出。而((sum&amp;lt;5))，完全是个摆设。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>久旱逢甘雨----读《国家》有感</title>
      <link>https://pureage.info/2013/08/13/121.html</link>
      <pubDate>Tue, 13 Aug 2013 12:53:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/08/13/121.html</guid>
      
        <description>&lt;p&gt;读完《易中天中华史之国家》，真有一种久旱逢甘雨的畅快之感。&lt;/p&gt;

&lt;p&gt;历史书本来可以用三类来概括的，正史、野史和人教版课本。前两者历史久远，最后一个实在臭名昭著，从小学、初中、高中、大学、研究生，都只在说一件事情：没我哪有你。&lt;/p&gt;

&lt;p&gt;但是现在，又有一类历史类书籍异常火爆，就是借历史上的一些故事来讲如何混社会。这种书我是绝不敢在公共场合下看的，怕我憨厚木讷的脸上突然多了四个字：老奸巨猾。&lt;/p&gt;

&lt;p&gt;正儿八斤的历史类著作，读过吕思勉先生的《中国通史》和斯塔夫里阿诺斯的《全球通史》等。但这些书在读的时候总有一种中国与世界割裂开来的感觉，单纯的中国历史书籍自然不说，世界史类书籍也是如此。&lt;/p&gt;

&lt;p&gt;我看书一直有两个习惯：对比和代入。前者多体现在阅读专业类书籍时，后者多体现在阅读文学类作品时。在读历史类书籍时，对比则表现为喜欢在读到某个历史事件时喜欢去想同一时期其他地方发生了什么。但这样很累。但《国家》让我读起来很轻松，刚好打到我的痛点。它是在讲中国史，但又努力把中华文明跟世界文明的发展进行同时期对比。&lt;/p&gt;

&lt;p&gt;不禁很好奇，这种书应该是需求量一直很大的，但为什么之前一直没看到。我们毕竟不是专业历史学者，看一本书的时候，在放一堆书在旁边反复对比、查阅是不现实的。从这一方面来说，易中天先生真是做了件大好事。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>sort命令中-k、-t选项的用法</title>
      <link>https://pureage.info/2013/08/05/120.html</link>
      <pubDate>Mon, 05 Aug 2013 12:56:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/08/05/120.html</guid>
      
        <description>&lt;h1 id=&#34;需求&#34;&gt;需求：&lt;/h1&gt;

&lt;p&gt;假设有个result_test_upload.log的文件，里面存放着一些FastDFS系统中的fileid。文本内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;group1/M00/04/08/wKhwglHq1rqAYO2oAAAoAChSBpE0502682  
group2/M00/05/06/wKhwglHq2CGAIs8AAAAoAChSBpE9287977  
......(略）......  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如何统计出分配到每个group的文件的总和并将其按group1，group2，group3的顺序列出来，以方便观察是否所有的fileid均匀的分配到FastDFS的group中？&lt;/p&gt;

&lt;h1 id=&#34;方法&#34;&gt;方法：&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;cat result_test_upload.log  | grep -o group[0-9][0-9]*  | sort -n -t p -k 2| uniq -c  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，grep -o group-0-9][0-9].*已经把每个group名截取出来了，sort -t p 表示以p为分隔，-k 2 表示按以p为分隔的第二个域来排序，也就是group1,group2,group3&amp;hellip;中的1,2,3.   sort -n很简单，表示按照group1,group2,group3&amp;hellip;groupn的顺序排列。&lt;/p&gt;

&lt;p&gt;通过这一行命令，就能得到类似于：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;999 group1  
998 group2  
998 group3  
997 group4  
.......  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;的统计结果了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>bash下如何实现perl中seek的功能？</title>
      <link>https://pureage.info/2013/07/21/119.html</link>
      <pubDate>Sun, 21 Jul 2013 15:23:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/07/21/119.html</guid>
      
        <description>&lt;p&gt;因为日志处理需要，接触到perl,虽然还未入门，但通过几个函数就可以发现其在文本处理上的威力确实名不虚传，更不用提正则表达式了。&lt;/p&gt;

&lt;p&gt;假设有这样的应用场景：客户通过ftp客户端上传文件到接入端ftp服务器，接入端ftp服务器作为分布式存储系统的客户端，再将这些文件存入到后面的分布式存储服务器中。这个接入端ftp服务器要做的工作就是定时分析ftp server（假设是vsftpd,则日志为xferlog)的日志来获取客户上传的文件，再对这些文件做后续处理。客户上传时随时进行的，xferlog的记录条数也随之增长。&lt;/p&gt;

&lt;p&gt;perl中通过seek函数可以很方便的做到，每一次脚本执行时，都将上一次脚本执行时xferlog的大小作为本次读操作的偏移量，用这个偏移量来调用seek，本次处理完后再将该偏移量更新后存入到一个文件供下次脚本执行时读取。&lt;/p&gt;

&lt;p&gt;如果是bash该如何实现呢？shell内置的文件操作的命令很少，只好借助外部程序。我只想到了通过dd来实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;touch file_size  
  
#读偏移量  
a=`cat readfile`  
echo $a  
  
#把偏移量作为dd的参数  
skip=$a  
  
#从上一次读取的地方开始复制到file2，（跳过上一次的字节，就是这次的开始）  
dd if=file1 of=file2 bs=1 skip=$skip  
#获得新增内容的大小（字节）  
size1=`wc -c file2 | awk &#39;{print $1}&#39;`  
#获取下次需要skip 的字节数  
sum=`expr $a + $size1`  
#记录偏移量  
echo $sum&amp;gt;file_size  
#进行本次处理  
while read line  
do  
    #do something  
done&amp;lt;file2  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;perl一个函数seek就可以搞定的事情，用这种方法却需要这么拐弯抹角。不光调用了dd，而且还新增了一个临时文件。当然，这些只是从应用上看，效率上的差异暂时不是我要考虑的问题。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>再不判断异常分支就剁手</title>
      <link>https://pureage.info/2013/07/13/117.html</link>
      <pubDate>Sat, 13 Jul 2013 06:02:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/07/13/117.html</guid>
      
        <description>&lt;p&gt;一两个月前刚进新公司时，正逢部门内部搞技术交流，每人轮流给部门其他人做一次自己擅长的技术培训。部门内几个老员工，有讲nginx模块开发的，有讲视频编解码的，也有讲分布式存储系统的。由于我刚入行，对公司业务完全不熟，无奈之下，索性说我就讲讲shell编程吧。于是花了一天时间写了个十几页的PPT，其中强调了脚本中对异常分支判断的重要性。脚本不是命令行的堆积，在交互模式下，一个命令的执行成功与否一目了然，根据这个结果我们会很自然的执行相应的命令；可是在脚本中，就不能这么想当然了，最简单的就是，cd到一个目录，该目录是否存在？&lt;/p&gt;

&lt;p&gt;可是今天还是犯了一个这样的错误。&lt;/p&gt;

&lt;p&gt;由于对全球通的扣费方式有些疑惑，于是在网上下载了上个月的话费详单，用脚本统计了下每笔话费的累加和。很自然的用while read读文件的每一行，在循环里对每一行awk取出话费字段，然后累加。由于话费是浮点数，用bc来执行加法：sum=$(echo $sum + $huafei | bc )。多么简单的思路，脚本写好，一执行却冒出一堆“(standard_in) 1: parse error”。很明显，这个是传给bc的参数格式错误，可对着sum=$(echo $sum + $huafei | bc )怎么看都没看出问题。不得已只好使出bash -x，才发现，前部门执行是没有问题的，但从中间某一行开始就出现上面的错误，原来是保存话费信息的文本中间有写空行。那么用awk对改行执行获取单笔费用的时候就会获得一个空字符串，传到bc时就会报格式错误了。So easy!&lt;/p&gt;

&lt;p&gt;So easy!可是为什么会一直犯这样的错误呢？因为思维没有固化。程序员在外行人眼里是一个技术活，可我们自己知道，其实日常绝大部分的工作与高神的算法设计、架构设计是没有关系的，在这种环境下，判断一个程序员是否专业的最基本的方法就是基本功了，例如本文提到的异常判断。&lt;/p&gt;

&lt;p&gt;看过一个雷阿伦练习三分球的视频，感慨颇深，在绝大多数情况下，他每一次的动作看不出任何差异。虽然我们自己狗屎运来了也会连中几个三分，可是稍微一喘气，动作就变形，动作一变形能不能进就全靠运气了。有人说，雷阿伦也有很多场比赛投不进三分，可他毕竟是NBA当之无愧的三分王不是吗？他也不是真的投篮机器，只不过通过训练，可以让自己离投篮机器更近一点，再近一点。&lt;/p&gt;

&lt;p&gt;曾问过一个健身教练，真的有必要去健身馆吗？我自己每天就做做俯卧撑，你看我的肌肉不也还行吗？健身教练回到道，你眼里只有胸肌，我们看到的是XXX肌、XXX肌、XXX肌&amp;hellip;.对这些肌肉群的练习一个人的健身运动是专业的还是野路子的区别所在。&lt;/p&gt;

&lt;p&gt;希望自己能真的吃一堑长一智。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>好的设计真是一念之间吗？</title>
      <link>https://pureage.info/2013/06/27/116.html</link>
      <pubDate>Thu, 27 Jun 2013 14:45:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/06/27/116.html</guid>
      
        <description>&lt;h2 id=&#34;背景描述&#34;&gt;背景描述&lt;/h2&gt;

&lt;p&gt;近几年redis应用的越来越多，正好现在手上的一个项目就用到了。简化一下需求，就是要实现一个worker程序，该程序所有的工作就是去redis中的一个任务链表tasklist里面去取任务，执行一些处理操作。&lt;/p&gt;

&lt;h2 id=&#34;分工明确化&#34;&gt;分工明确化&lt;/h2&gt;

&lt;p&gt;从始至终我们持有的一个观点就是，这个worker的功能要极度简化，就是去从tasklist中取任务，执行操作，并根据任务执行成功与否进行相关的结果记录。至于这个tasklist怎么来的，里面的任务是由谁来插入，worker一概不管。这样的话，有几个好处：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;worker的角色明确，目标清晰。直接的好处就是代码容易编写。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;设计思想比较通用&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;tasklist的插入在不同的场景下有不同的方式，最常见的是根据某个不断增长的log中取任务，插入任务。而这个工作很灵活，通过脚本语言更方便实现。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;关于重试&#34;&gt;关于重试&lt;/h2&gt;

&lt;p&gt;worker从tasklist中领取到一个任务来后，就开始执行相关的操作。如果一切顺利，就万事大吉。但在软件设计中，考虑异常情况几乎已经是广大码农们本能的反应了。不是我们天生心思缜密，而是这些都是通过一些惨痛的教训得来的。关于这个异常处理，在这里多说两句，讲一个亲身经历的例子：&lt;/p&gt;

&lt;p&gt;我在上一家公司工作时，工作内容主要是版本发布。每天有几十个分布在全国各地的程序猿要把它们的工作成果&amp;ndash;代码，合入到我这里来，我给编译一个版本，自己进行基本的验证，如果有问题，则解决问题或者回退，如果没有问题则版本迭代向前，并把这个版本发布出来给专职的测试人员进行进一步测试。这个工作是枯燥无味的，因此在那段时间就琢磨着怎么把编译、发布版本用脚本来完成。随手翻了几页shell脚本的书，于是我就堆砌了一堆命令行。其中有一个操作是这样的，执行编译后，cd到一个release目录，再用ftp上传到另一台发布版本的机器上。问题在于，以前每次都是手动操作，所以能确保release目录下有结果（如果没结果就是编译、打包错误了，早就去联系人解决了），而事实是当编译、打包失败时，这个release目录根本就不会生成。因此，在脚本执行cd时会出错，但是出错了由于我没有进行相关的处理，脚本并不会退出，而是在当前工作目录，继续欢快的执行ftp上传。于是终于有一次（事实是就是第二天），我把当前工作目录下的所有的源文件给当做版本发布出去了。结果很惨烈，一堆测试的兄弟们电话过来责问，领导也把我一顿批评。这就是想当然的认为cd不会发生错误的结果。&lt;/p&gt;

&lt;p&gt;同样，在这个tasklist设计中，如果worker执行当前任务失败后，该怎么处理？很自然的想到了重试，给每个任务三次重试的机会。我一拍脑袋，把执行失败的任务放入到一个失败者队列，当worker遍历完tasklist队列后，则再把失败者队列的任务全部重新插入到tasklist里面。worker继续执行遍历操作，这样来三次为止。想到这一点，我还是挺沾沾自喜的，因为通过自豪的使用redis的RPOPLPUSH操作，是如此容易的将一个队列的任务全部插到另一个队列里面。而且这样，worker的核心处理过程，仍然是在处理tasklist链表，不用再去处理失败者链表。&lt;/p&gt;

&lt;p&gt;这么想着，也这么干着，撸起袖子就把代码写了。拿到公网测试，是要写一个crontab脚本，该脚本每分钟执行一次，确保系统中有五个worker进程在劳动。在测试的一刹那，我想到出问题了。当把执行失败的任务放入到失败者队列，并在tasklist队列遍历完后，再把失败者队列插入到tasklist里面，每一次重试过程都这么重复，直到重试三次仍然失败后，worker进程退出。而此时这些失败的任务仍然是在失败者队列里面。当下一个worker进程继续来扫完tasklist后，又会再次对失败者队列执行相同的操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们的目标是给失败的任务三次重新来过的机会，而不是无数次的复活再死去&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;之所以会出现这样的问题，在于，起初并没有想到我们的worker会被用一种什么样的方式来调用。对于一个worker进程而言，确实能保证只给予失败者三次重试的机会，因为让你执行三次后，我完成任务后就主动身亡了，你当然不会再继续复活了。可是，不管你进程什么时候死去，怎样死去，redis都在那里，每一个worker进程都会去处理同样的tasklist队列和失败者队列。同样的一个任务，如果它就是没救了该死了，第一个worker进程让它复活三次后又让它死去，第二个进程又让它复活三次，再让它死去。而我们每分钟都要确保系统中同时运行着五个worker进程。&lt;/p&gt;

&lt;p&gt;想了想怎么解决这个问题。我又一拍脑袋，跟同事说，我们再搞一个永久死亡队列，一个任务死了三次后就放到这个永久死亡队列里面，以后再也不管它了。同事汗了一下，一拍脑袋说，在任务执行失败后，就把任务继续放到tasklist队列里面，而不是放到失败者队列，执行三次失败后，再放入到失败者队列，这个失败者队列就是永久死亡队列。里面的任务不会再被执行。&lt;/p&gt;

&lt;p&gt;我愣了半天，这么简单啊，我怎么没想到。&lt;/p&gt;

&lt;h2 id=&#34;联想&#34;&gt;联想&lt;/h2&gt;

&lt;p&gt;这个例子拿医生救人来类比最合适了。假设最开始一个医院只有一个医生，而病人很多，排着队等着抢救。他医术高超，可总有病入膏肓的病人他无能为力。这个时候，他把这些奄奄一息的人放到另外一个屋子里，因为只有他一个医生，他要去继续抢救其他更有希望生还的人。他抢救完了所有人后，他在来到那个屋子抢救那些基本没救的可怜的人。把那些人再弄到手术室里排着队，一个一个抢救，直到三遍以后，如果仍然有人治愈不了，他也无力回天了。&lt;/p&gt;

&lt;p&gt;后来，医院规模扩大了，现在可以有五个医生同时看病了。如果还是按照以前的制度，每个医生碰到无法救治的病人，就把他们放到另一个队伍里， 直到第一个队伍的病人看完了之后，再把第二个队伍的没有治愈的病人放到第一个队伍里面，来把这个队伍处理三遍。如果医生们一辈子只上一天班，其实也没多大问题。可是，每天都有新的病人进来，无论是出于职业道德还是相关规定，医生们每天都要去处理正常的队列和无法治愈的队列。这样那些奄奄一息的人们每天都会被五个医生轮流看很多遍。&lt;/p&gt;

&lt;p&gt;正确的做法是，用一个本子记录下来每个治愈失败的病人重复治愈了多少次，如果这个病人此次治愈无效，则让他回到队尾继续排队，给他的重试次数加一，每个医生在治疗每个病人之前，都会先查看这个本子，看这个病人的重试记录。到了三次，则宣布救治无效。关键在于，这个本子是所有的医生都可以看到的，有据可查，而不是都只在心里记下自己给病人重复治疗了多少次。&lt;br /&gt;
通过这个例子可以看到啊，好的设计之所以好，很可能是因为它简单明了。而如何要达到简单明了，则是功力所在了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>记一个here document的坑</title>
      <link>https://pureage.info/2013/05/24/115.html</link>
      <pubDate>Thu, 23 May 2013 16:49:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/05/24/115.html</guid>
      
        <description>&lt;h1 id=&#34;1-here-document&#34;&gt;1.here document&lt;/h1&gt;

&lt;p&gt;here document经常用于一些需要交互性输入指令的程序中，例如登陆ftp。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ftp -n $HOST &amp;lt;&amp;lt;EOF
quote USER $USER  
quote PASS $PASS  
binary  
put $FileName  
quit  
EOF  
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-踩到的坑&#34;&gt;2.踩到的坑&lt;/h1&gt;

&lt;p&gt;在工作中，涉及到很多对redis的操作，先简单的用shell脚本实现了一下。大概流程是这样的：shell脚本调用C语言程序，根据C程序的输出，来操作redis。因此主要涉及两件事：shell脚本获取C程序输出，shell脚本用here document操作redis。&lt;/p&gt;

&lt;p&gt;（1）shell脚本获取C程序输出&lt;/p&gt;

&lt;p&gt;我需要从C程序中获取的是一个固定格式的字符串，通过在C程序中将该字符串printf出来，在shell中采用a=$(program)的形式即可获取这个字符串输出。&lt;/p&gt;

&lt;p&gt;（2）获取这个字符串后，用here document方式，操作redis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;redis-cli -h $host_ip -p $host_port&amp;lt;&amp;lt;EOF  
set A $a  
quit  
EOF  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个C程序和这个shell脚本运行一段时间都没出问题，直到有一天，我发现了这个C程序的bug，动手修改，在调试过程中加了一些打印语句，例如printf(&amp;ldquo;XXXX&amp;rdquo;);修改后，与脚本联合调试。发现对redis操作不成功。操作redis的here document代码块，整体返回值$?都是等于0的，无法判断其正确与否。单独调试了下C程序，也没发现问题。那么问题在哪里呢？&lt;/p&gt;

&lt;p&gt;其实上面两步都有问题：&lt;/p&gt;

&lt;p&gt;（1）在shell脚本中调用a=$(program)后，其实a的值就是program程序运行时所有的输出。如果能保证该程序只输出一个正确的字符串，当然不会发现任何问题。可是在改代码的过程中，，加了其他的printf语句，例如printf(&amp;ldquo;XXXX&amp;rdquo;),那么赋值后，a的值就变成了“XXXX YYYY”，（假设YYYY是正常需要的字符串）。原因就是在调用a=$(program）后，shell会把所有program程序执行过程中的输出都合并成一个字符串传递给a。这种情况不光发生在添加调试用的printf语句时，假设程序在某个条件判断分支出错，进入erro处理，如果要执行Printf，那么这个错误信息也会作为字符串传递给a.&lt;/p&gt;

&lt;p&gt;(2)  在用here document操作redis时，如果上一步执行正确，例如a为“hello&amp;rdquo;,那么在here document中，执行set A &amp;ldquo;hello&amp;rdquo;,当然是不会有问题的。&lt;/p&gt;

&lt;p&gt;可是，如果第（1）步出现问题，不管是由于加入了多余printf语句，还是输出了错误信息，都会把合并后的字符串传递给a,在展开到set A $a中。假设a为”hello  haha&amp;rdquo;,那么就会对redis执行 set A hello haha,很明显，格式不符合redis set命令的要求，会设置失败。如果是在redis的交互界面中，会显示出这一错误，但在here document中，并不会显示任何错误，而且在here document块执行完后，用$?来查看返回值，都会是0.因为shell认为这个代码块是正确执行的。&lt;/p&gt;

&lt;p&gt;发现这个问题是由于改了代码后，突然发现对redis的设置不成功了。进而一步步分析，才体会到这两个操作都后患无穷啊！&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>一张居住证的诞生</title>
      <link>https://pureage.info/2013/05/06/114.html</link>
      <pubDate>Mon, 06 May 2013 08:06:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/05/06/114.html</guid>
      
        <description>&lt;p&gt;4月19日从前一家公司离职，下一家公司的报道日期是5月7号。报到时需要带的材料中，有一项是“居住证”。&lt;/p&gt;

&lt;p&gt;在网上找了广州市办理居住证的流程，发现各种说法不一，没有找到一个官方的说法。于是拉着一个在广州打工多年的亲戚带着我办。从亲戚口中得知，正常的流程应该是房东出具一份证明，拿着这份证明到居住地的社区继续弄齐材料，然后再到更高一级的机构去办理居住证。&lt;/p&gt;

&lt;p&gt;我问那亲戚，是不是需要先把房子租了才能去办呢，他说他和他房东关系不错，跟房东说一声，直接先开到他的住处就可以了，房子慢慢再找，现在先去社区摸清楚到底什么流程，毕竟每年政策可能不一样。我们在城中村里综合交错的小巷子里找了很久，才找到社区工作站A的位置。&lt;/p&gt;

&lt;p&gt;可是社区工作站的大门是紧锁着的。那天是5月3号，星期五，五一假期刚过，属于正常工作日。&lt;/p&gt;

&lt;p&gt;亲戚想到，还有一个规模更大一点的社区工作站，其管辖地是包含刚去的那个工作站的。去看看无妨。不远，坐公交车一站地就到了。大门又是紧锁，但门上贴了一张告示，工作站办公地点换了。于是我们又折回，很久才找到那个工作站B。前面只有一个人在办事，没等几分钟，我们就上前询问办理居住证的事宜，办公人员说需要现在居住地小区办理，再到这里。我告诉他那个社区现在没人上班，他说不可能，今天是工作日。而且即使他们今天没有上班，你们也必须等他们上班了，在他们那里办好了才能在这里继续办理。&lt;/p&gt;

&lt;p&gt;没办法，抱着他们可能在午休的想法，又回到社区工作站A，仍然大门紧闭，门前没有任何电话等联系方式。从开始到现在，已经几个小时过去了，我和亲戚相对苦笑。亲戚想到，他房东是本地人，可能知道这个工作站的情况，于是打电话过去询问，被告知这个工作站的人还在休五一长假，他们是七天长假。&lt;/p&gt;

&lt;p&gt;原来这帮人是不按国家法定假日休息的。&lt;/p&gt;

&lt;p&gt;两人各吃了碗面条，开始继续找房子。中间过程略去不表，最终找到一个一室一厅。交了定金，第二天（周六）上午过来交了押金和租金，我问了下房东关于居住证的事情，让她出一个证明。房东听了，说这个好办，你们去办太难了，即使一般的本地人也很难办。我打个电话就好了，于是她向那个社区工作站B打了个电话，然后告诉我们，下午两点去那里，报上他的名字就可以办了。&lt;/p&gt;

&lt;p&gt;下午两点，去社区工作站B，报上房东的名字，值班人员拿了我的身份证原件，几分钟就把居住证的回执给到我手上，说二十天后过来取就行。&lt;/p&gt;

&lt;p&gt;居住证就算办好了。仅仅只是一个电话，不用租房证明，不用照相，不用基层社区工作站啊的证明，直接就办好了。顺便说下照相的事，其实本来照片用身份证上的就行了，但一般都会强制要求重新照，这样办居住证虽然仍然是免费的，但雁过留毛，人过留下照相钱。如果你像我这样，有一个热心的房东，那你什么都不需要，拿着身份证直接去就可以了。&lt;/p&gt;

&lt;p&gt;看来在天朝，所谓的流程都是用来刁难普通老百姓的，你稍微认识点人，这些个流程其实是可以绕过去的。我忽然对公务员报考热的现象以及各个城市马路面上、电线杆上无处不在的“办证”又加深了些理解。评论无力，就此打住。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>一个名字毁掉一本书--《全中国最穷的小伙子发财日记》</title>
      <link>https://pureage.info/2013/04/26/113.html</link>
      <pubDate>Fri, 26 Apr 2013 15:34:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/04/26/113.html</guid>
      
        <description>&lt;p&gt;现在，一个年轻人说自己读成功学的书时，会觉得难以启齿吧？但曾经，在成功学还没被现在的某些大师搞臭时，还是能给人一些正面的力量的。老罗曾经在演讲里说过，他当年曾把各种成功学的书一斤一斤的堆在家里，当熬不下去的时候就随机发开一本，打打鸡血，继续干活，每次都能管一段时间。&lt;/p&gt;

&lt;p&gt;我对于成功学的了解，大概分为如下几个时期:&lt;/p&gt;

&lt;h2 id=&#34;初窥-好奇&#34;&gt;初窥&amp;mdash;-好奇&lt;/h2&gt;

&lt;p&gt;最早看的一本成功学的书，是《方与圆》，顾名思义，全书就是教育读者想要出人头地的话，就要做到“外圆内方”。那时我还读小学，给我看这本书的是我的一个舅舅。&lt;/p&gt;

&lt;p&gt;我的这个舅舅是一个很有才华的人，但正因为他不够圆，从世俗的角度来看，他并不成功，颇有怀才不遇之感。很奇怪的是，他既然很多年前就知道自己不够圆，这么多年过去了，却并没有多大改变。简单分析一下，会有两个原因，一是他深知自己想要获得世俗的成功，就必须改变自己，但是他并不知道如何去实践。二是他内心里对这种改变抱有抵触。就他所处的实际情况而言，我认为主要是第一个原因。&lt;/p&gt;

&lt;p&gt;因此，《方与圆》这类书籍，代表了一类低端的成功学的书籍，它们一方面很难从内心说服你为什么要做出改变，另一方面可操作性极差。但是它们往往喜欢结合中国社会的具体国情，会让你觉得它的观点无可辩驳，你很难说服别人说”外圆内方更容易成功“这个观点是错的。&lt;br /&gt;
它的立足点就有问题，方圆之说，无法操作，无法度量。最终结果是，要么依然外方内方，要么就是外圆内圆，如果它从头到尾都在教育人们外圆内圆，我会对其更有好感。&lt;/p&gt;

&lt;h2 id=&#34;进一步接触-经典的成功学&#34;&gt;进一步接触&amp;ndash;经典的成功学&lt;/h2&gt;

&lt;p&gt;大一刚入学不久，在某个周六的午后，于宿舍下面的盗版书摊上买了一本拿破仑希尔的《成功法则》。从此接触到了一种比较经典的成功学书。这类书的代表作很多，比如《羊皮卷&amp;ndash;世界上最伟大的推销员》等，这类书籍大多是教人如何更有激情、更积极的工作和生活，获得成功。其效果是往往让人在一段时间内像打了鸡血一样，但持续不了多久。这类书籍中的一部分，已经开始触及人们该采取什么具体的行动，比如《成功法则》这本书，我连一半都没看完，现在仅仅记得一条：要学会储蓄。&lt;/p&gt;

&lt;h2 id=&#34;深入了解-集大成者&#34;&gt;深入了解&amp;ndash;集大成者&lt;/h2&gt;

&lt;p&gt;随后接触到一些更优秀的成功学书籍，包括《高效能人士的七个习惯》，《第五项修炼》，《少有人走过的路》等，之所以说它们优秀，是它们已经空洞的言之无味的阶段，开始提炼出该如何做。当然，伴随其中的会有大量的文字说服人们为什么要这么做。这类书籍其实慢慢在脱离成功学，进而转到自我管理、时间管理这个路子上来。&lt;/p&gt;

&lt;h2 id=&#34;不再关注-泛滥的机场成功学&#34;&gt;不再关注&amp;ndash;泛滥的机场成功学&lt;/h2&gt;

&lt;p&gt;前面列出的几类书籍，多少能有点作用，而且都是在保持着一种严肃的态度。但随着各种机场成功学的盛行，这种严肃被打破了，取而代之的是恶心。各种传销类组织的教材大概都是这种。&lt;/p&gt;

&lt;h2 id=&#34;最后-其实我们需要的是自我管理&#34;&gt;最后，其实我们需要的是自我管理&lt;/h2&gt;

&lt;p&gt;有一类书籍开始转变思路，不再那么强调功利和成败，而把方向放到自我管理上来，比如李笑来的《把时间当朋友》。李笑来很聪明，把这本书尽力的包装成不是成功学的样子，但它骨子里还是成功学。但读来让人很受用，很舒服，可操作性也很強。如果说要我给以后的孩子推荐一本成功学的书的话，我只推荐这一本给他/她看看就行了。&lt;/p&gt;

&lt;p&gt;写到现在，是时候该点点题了。&lt;/p&gt;

&lt;p&gt;重庆老康的《全中国最穷的小伙子发财日记》，看名字绝对是属于机场成功学的，但是它看的比上面所有提到的书看起来都爽。这不是一个名字毁掉一本书是什么？&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>咱们墩敦伟大友谊如何？</title>
      <link>https://pureage.info/2013/04/11/112.html</link>
      <pubDate>Thu, 11 Apr 2013 15:55:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/04/11/112.html</guid>
      
        <description>&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/great-friendship.jpg&#34; alt=&#34;great-friendship&#34; /&gt;&lt;/p&gt;

&lt;p&gt;到了这么一个奔三的不尴不尬的年龄，想提笔写篇主题明确的文章真的不容易。明明是想提笔写一篇《寻找无双》的读后感，却由于在多看上买了一整套《王小波全集》从而结束了东一本《万寿寺》.txt西一本《革命时期的爱情》.txt的状况而又想给多看做一回自带干粮的五毛，可偏偏手贱刚才忍不住又把《黄金时代》看了一遍，于是写了这么个《咱们墩敦伟大友谊如何？》的标题并在网上找到了当年课文《伟大的友谊》里的插画，然后就忽然决定怒转和菜头的一篇文章。但不能否认，《寻找无双》仍是我目前为止最喜欢的，以后再补上吧！&lt;/p&gt;

&lt;h3 id=&#34;打屁股和爱情&#34;&gt;打屁股和爱情&lt;/h3&gt;

&lt;p&gt;波哥的小说《黄金时代》最后两段是这么写的:&lt;br /&gt;
　　 　　&lt;br /&gt;
“陈清扬说她真实的罪孽，是指在清平山上。那时她被架在我的肩上，穿着紧裹住双腿的筒裙，头发低垂下去，直到我的腰际。天上白云匆匆，深山里只有我们两个人。我刚在她屁股上打了两下，打得非常之重，火烧火撩的感觉正在飘散。打过之后我就不管别的事，继续往山上攀登。&lt;br /&gt;
　　 　　&lt;br /&gt;
陈清扬说，那一刻她感到浑身无力，就瘫软下来，挂在我肩上。那一刻她觉得如春藤绕树，小鸟依人，她再也不想理会别的事，而且在那一瞬间把一切全部遗忘。在那一瞬间她爱上了我，而且这件事永远不能改变。”&lt;/p&gt;

&lt;p&gt;长久以来，喜欢波哥作品的人对这两段都不能忘怀，觉得它写得极美，极深沉动人。同时，也有很多人，尤其是小女生会觉得《黄金时代》是本黄色小说，看了这一段觉得不明所以，为什么打了屁股以后陈清扬就会爱上王二？甚至还有人会去想，是不是王二背人的时候有什么“特别”的手法，所以陈清扬当时HIGH 了。&lt;br /&gt;
　　 　　&lt;br /&gt;
虽然说作者完成作品以后，如何解读那都是读者的事，因此怎么读都成立，怎么读也都不成立。但是因为我非常喜欢波哥，纯私人的喜欢，所以看到那些说法的时候觉得憋闷得很，有些话想要讲，讲出来以后才能睡的着。&lt;br /&gt;
　　 　　&lt;br /&gt;
要讨论这一巴掌，要从很早以前说起。&lt;br /&gt;
　　 　　　&lt;br /&gt;
在《黄金时代》的故事背景里，王二是一位北京来的知青，来到了极为荒僻的云南南部农村。这里只有甘蔗、橡胶和水稻，以及旱季里永不停歇的热风。在这种环境下，他觉得非常苦闷。同时他又是个21岁年青的男子，对于未来有梦想，对现实有性饥渴。而陈清扬是“山上十五队”的队医，而且小说一开始就交代了她人很漂亮，26岁的少妇，又是北医大毕业的。但是，除此而外小说里没有交代任何关于陈清扬的背景。这是一件很奇怪的事情，因为一个北医大的毕业生怎么会到了那么荒僻的地方去？她是本地人还是外地人？小说的最后暗示了陈清扬是被“下放”，所以后来和当地的丈夫离婚，然后“回去”了。&lt;br /&gt;
　　 　　　&lt;br /&gt;
故事围绕着这一对男女之间的关系展开，人世间最复杂的事情莫过于男女关系。因为他们是两类完全不同的人，当他们相遇时由于这种差异而会造成很多变数，使得这种关系空前复杂。王小波把一对青年男女放在了一种非常极端的环境下，在这种极端压抑，极端落后，极端无聊的状况下，看他们之间会发生什么？&lt;br /&gt;
　　 　　　&lt;br /&gt;
王二和陈清扬有一个共同点，那就是他们都属于异类。王二不招队长喜欢，又不肯服软，是知青里的刺头。而陈清扬如此年轻漂亮，学历又如此之高，却来到了这种穷乡僻壤，虽然和当地人结了婚，但是依然与周围的一切扞格不入。所以，两个人都觉得无比孤独。陈清扬偶遇王二，觉得王二可能理解自己。而王二很年轻，满脑子想的只有性，他一开始只想着去勾引陈清扬，和她上床。&lt;br /&gt;
　　 　　　&lt;br /&gt;
于是，王二编造了一通关于“伟大友谊”的胡说八道，就像500年前至尊宝对青霞说的那段“爱你一万年”一样。陈清扬明知道受骗上当，但是不能抗拒王二话语里的那种关于友谊的承诺。所以，明知道是假话，她也选择相信。因为相信这话以后，她不再是孤独一人，而是有了一个朋友。作为这种“伟大友谊”的附带条件，陈清扬和王二上了床。但是陈清扬不认为那是爱情，而选择相信这是“朋友间的互相帮助”。&lt;br /&gt;
　　 　　　&lt;br /&gt;
王二意外受伤，陈清扬用行动事实上公开了他们之间的关系，坐定了“破鞋”的位置。这时候她依然不爱王二，她只是关心朋友而已。王二出走，临别只告诉了陈清扬。随着时间推移，陈清扬意识到了王二对他的信任，因为她找其他人问，没有人知道王二的消息。波哥把这种情形写得非常漂亮：等到罗小四离开，陈清扬就开始糊涂了。看来有很多人说，王二不存在。这件事叫人困惑的原因就在这里。大家都说存在的东西一定不存在，这是因为眼前的一切都是骗局。大家都说不存在的东西一定存在，比如王二，假如他不存在，这个名字是从哪里来的？陈清扬按捺不住好奇心，终于扔下一切，上山来找我来了。&lt;br /&gt;
　　 　　　&lt;br /&gt;
这时候，驱使陈清扬去寻找王二的原因是思念。她明白了王二对她的信任以后，她“扔下一切，上山来找我了”。在山上，两个人终于暂时摆脱了那个极端压抑的世界，过着伊甸园一般的生活。在相对放松的环境下，陈情扬一时有过动摇，恍惚间爱上了王二，所以她对王二说生个孩子吧。但是很快她有醒悟过来，她其实并不爱面前这个人，于是自己又否决了这个建议。对方只是渴慕自己的肉体而已，而他们两个人在山里，除了性爱之外，似乎也没有别的什么事情可以做。&lt;br /&gt;
　　 　　　&lt;br /&gt;
因此，小说里出现了一段非常特别的描写：陈清扬说，那一回她躺在冷雨里，忽然觉得每一个毛孔都进了冷雨。她感到悲从中来，不可断绝。忽然间一股巨大的快感劈进来。冷雾，雨水，都沁进了她的身体。那时节她很想死去。她不能忍耐，想叫出来，但是看见了我她又不想叫出来。世界上还没有一个男人能叫她肯当着他的面叫出来。她和任何人都格格不入。&lt;br /&gt;
　　 　　　&lt;br /&gt;
这就是陈清扬对性和爱的态度，她认为无爱的性是不值得的。所以，当有极大的快感袭来的时候，她拒绝喊出声来，因为她不爱面前的这个男人。同时，在这种巨大的快感之下，她并不感觉到快乐，反而觉得“悲从中来，不可断绝。”和自己最贴近的人，居然不是自己最爱的人，但是又别无选择，否则就只能选择孤独，这是怎样的一种悲哀呢？她说“在章风山她骑在我身上一上一下，极目四野，都是灰蒙蒙的水雾。忽然间觉得非常寂寞，非常孤独。虽然我的一部分在她身体里磨擦，她还是非常寂寞，非常孤独”，她和在她身上发生的性爱完全是分离的，即使肉体如此亲近，也依然觉得孤独和寂寞。&lt;br /&gt;
　　 　　　&lt;br /&gt;
两个肉体如此接近的人，在精神上却是如此隔膜。突破这种隔膜的，就是王二无心的那两巴掌。&lt;br /&gt;
　　 　　　&lt;br /&gt;
书中是这么说的：“回来的路上扛着她爬披。那时旱季刚到，天上白云纵横，阳光灿烂。可是山里还时有小雨。红土的大板块就分外的滑。我走上那块烂泥板，就像初次上冰场。那时我右手扣住她的大腿，左手提着猎枪，背上还有一个背篓，走在那滑溜溜的斜面上，十分吃力。忽然间我向左边滑动，马上要滑进山沟，幸亏手里有条枪，拿枪拄在地上。那时我全身绷紧，拼了老命，总算支持住了。可这个笨蛋还来添乱，在我背上扑腾起来，让我放她下去。那一回差一点死了。等我刚能喘过气来，就把枪带交到右手，抡起左手在她屁股上狠狠打了两巴掌，隔了薄薄一层布，倒显得格外光滑。她的屁股很圆。鸡巴，感觉非常之好的啦！她挨了那两下登时老实了。非常的乖，一声也不吭。”&lt;br /&gt;
　　 　　　&lt;br /&gt;
针对王二的描述，陈清扬的感受是这样的：“那时她被架在我的肩上，穿着紧裹住双腿的筒裙，头发低垂下去，直到我的腰际。天上白云匆匆，深山里只有我们两个人。我刚在她屁股上打了两下，打得非常之重，火烧火撩的感觉正在飘散。打过之后我就不管别的事，继续往山上攀登。”&lt;br /&gt;
　　 　　　&lt;br /&gt;
这里，大概陈清扬是生平第一次被男人打，而且是被一个小她五岁的男人打。这两巴掌打得很疼，她能感觉到“火烧火撩的感觉正在飘散”。为什么陈清扬不反抗？也不做反击？以她的性格，绝对不会是个忍气吞声的人，为什么她会这样？有两重逻辑，一重是陈清扬的逻辑，一重是王小波的逻辑。&lt;br /&gt;
　　 　　　&lt;br /&gt;
作为陈清扬来说，这两记火辣辣的巴掌让她立即明白了一件事：王二已经不把自己当朋友了，而是当成自己的女人。所以，他会肆无忌惮地打她的屁股。同时，之所以打那么重，是因为王二在乎她，非常在乎，所以打得也就非常重。因此，这一瞬间，陈清扬明白了这个男人对自己的心意，放弃了一切抵抗，爱上了这个男人。书里说：那一刻她觉得如春藤绕树，小鸟依人，她再也不想理会别的事，而且在那一瞬间把一切全部遗忘。一向刚强独立的陈清扬变得无比柔媚，“再也不想理会别的事”，因为从此世界上只有她和王二两个人了。&lt;br /&gt;
　　 　　　&lt;br /&gt;
作为王小波来说，他对男女之间的虐恋有种特别的喜爱，看他的《舅舅情人》和《东宫西宫》就能明白这一点。在王小波的理解中，男女关系里总有一方极为强大，而柔弱的一方在这种近乎粗野甚至残暴的力量中感受到了强烈的爱意。力有多大，爱有多深。陈清扬在两记巴掌之下，感觉到痛苦，感觉到火烧火撩，在王小波看来，这就是最纯净最原初的爱的表示。它如此直观而感性，超越了一切言词的表白。而是直抵人心，让人瞬间明白其中蕴涵的爱意。&lt;br /&gt;
　　 　　　&lt;br /&gt;
这两巴掌，打破了两个人之间最后的隔膜，结果是陈清扬不管不顾、全心全意地爱上了王二。“在那一瞬间她爱上了我，而且这件事永远不能改变”。&lt;br /&gt;
　　 　　　&lt;br /&gt;
所以，我的朋友RED SOX每次看到这里都会呆住，静静地想一会儿。而每次我看到这里，都觉得气血翻涌，想抓起个姑娘横放在身前，拨马就跑，一直跑到天边，跑到非洲去。波哥的小说写得非常美，就在于这种地方。它需要一个人仔细去读，细心体会，才能明白其中的深沉宁静之处。而他描写性又非常干净，真如他所说，没有一段是为了写性而去写性，没有一段性不是服务于情节的。&lt;br /&gt;
　　 　　　&lt;br /&gt;
最后，再说一点题外话。在整个故事里，心如明镜的是陈清扬，而王二始终是一个浑浑噩噩的家伙。陈清扬因为他那无心中的两巴掌而爱上他，却也因为这两巴掌的无心而离开了他，这就是为什么陈清扬为什么老说王二是“混蛋”的缘故。浑有浑的可爱之处，所以多年后还要来找王二，告诉他自己爱他。浑有浑的遗憾之处，所以陈情扬至爱王二，却不愿意和他在一起。因为本质上来说，他和她前夫一样，根本不了解她，“她和任何人都格格不入”。在《黄金时代》里，最完整的人物是陈清扬而非王二，陈清扬有勇气、有担当，引领王二走过了那最艰难的一段，使他终于从一个男孩变成为一个男人。这也可以看出王小波对女性的态度，她们是灵魂之火，生命之光。没有哪个现代中国作家如王小波一样如此尊重女性，哪怕他的小说里有很多粗口和脏话。&lt;br /&gt;
　　 　　　&lt;br /&gt;
唯一值得宽慰的问题是：如果王二是一直装糊涂呢？&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>记在《霍比特人》观影前</title>
      <link>https://pureage.info/2013/02/24/110.html</link>
      <pubDate>Sun, 24 Feb 2013 15:44:00 +0000</pubDate>
      
      <guid>https://pureage.info/2013/02/24/110.html</guid>
      
        <description>&lt;p&gt;如果说有什么电影是我非看不可的话，那就是伊斯特伍德的新片和《指环王》系列了。&lt;/p&gt;

&lt;p&gt;伊斯特伍德老爷子已经是83岁高龄了，电影是看一部少一部，不需要多说。而看到《霍比特人》，则让我想起那些情迷中土的黄金岁月。&lt;/p&gt;

&lt;p&gt;附上一段自己在2006年写的一点东西，以资纪念。既然是纪念，原文中的错别字也一并保留了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;最喜欢的电影之一《魔戒三部曲》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;托尔金的这部气势恢弘的巨著在中国引起轰动应该是在大导演杰克逊将其搬上荧幕之后。而我则是在看完原著后再看的电影，看书在高一，而完整的看完电影，则市在大学。现在回忆原著，我都能真切的感受到当时看这书时的压抑与惊心动魄。它具备几乎所有史诗该具备的要素，应此我断言，没有人会导演好这部电影，也没有去想过看杰克逊的作品。但是，当我看到这三部电影时，我知道我错了。我不敢相信。我只能说，这个世界上某些人联系在一起会产生奇迹，比如说托饵金和杰克逊。&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/lord-of-the-ring.jpg&#34; alt=&#34;lord-of-the-ring.jpg&#34; /&gt;&lt;br /&gt;
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;2006-08-08 01:53:48&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>Space Cowboys</title>
      <link>https://pureage.info/2012/11/18/108.html</link>
      <pubDate>Sat, 17 Nov 2012 19:13:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/11/18/108.html</guid>
      
        <description>&lt;p&gt;在看完Nineteen Eighty-Four之后，唯有这类老男人重出江湖拯救地球的故事能治愈我的悲伤了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fly me to the moon
And let me play among the stars&lt;br /&gt;
Let me see what Spring is like On Jupiter and Mars&lt;br /&gt;
In other words,hold my hand&lt;br /&gt;
In other words,baby kiss me&lt;br /&gt;
Fill my heart with song&lt;br /&gt;
And let me sing forever more&lt;br /&gt;
You are all I long for All I worship and adore&lt;br /&gt;
In other words,please be true&lt;br /&gt;
In other words,I love you&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;embed src=&#34;http://player.youku.com/player.php/sid/XMjc4MjkyOTIw/v.swf&#34; type=&#34;application/x-shockwave-flash&#34; width=&#34;550&#34; height=&#34;400&#34; quality=&#34;high&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>牛仔消失在优酷里</title>
      <link>https://pureage.info/2012/11/15/107.html</link>
      <pubDate>Wed, 14 Nov 2012 16:34:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/11/15/107.html</guid>
      
        <description>&lt;p&gt;一个即将步入83岁高龄的异国老戏子，在调侃了一阵他们国家的领导人之后，竟然被远隔重阳的中国的最大的 视频内容服务商给屏蔽了。&lt;br /&gt;
其实这个事情已经过去两个多月了，今天心血来潮又试了一次：&lt;br /&gt;
（1）在任何一款浏览器的地址栏里输入优酷网的地址：www.youku.com&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/youku-1.jpg&#34; alt=&#34;youku-1.jpg&#34; /&gt;&lt;br /&gt;
（2）在搜索栏里输入“伊斯特伍德”，然后点击搜索。&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/youku-2.jpg&#34; alt=&#34;youku-2&#34; /&gt;&lt;br /&gt;
（3）然后，你就看到这样的画面了。&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/youku-3.jpg&#34; alt=&#34;youku-3&#34; /&gt;&lt;br /&gt;
哈哈哈哈&amp;hellip;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>新时代的留守儿童</title>
      <link>https://pureage.info/2012/10/24/103.html</link>
      <pubDate>Wed, 24 Oct 2012 13:41:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/10/24/103.html</guid>
      
        <description>&lt;p&gt;做为一名曾经的留守儿童，看到某公司的一个帖子，一向波澜不惊的心被触动了，把主帖和一些回复摘录一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主题帖&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;刚才两岁的女儿在视频上说，爸爸太远了，笑笑抱不到。不过接着结结巴巴地又说，等爸爸回来，笑笑给爸爸大大的抱抱。当爹的眼泪快下来了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;回帖摘选&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;哎，兄弟，差不多就回去了吧。我儿子也是1岁多，现在也是越发的想回去，大条的神经越来越软弱。。&lt;/p&gt;

&lt;p&gt;同感，奋斗吧，当个好爸爸不容易! 我宝贝女儿也是这个大的时候问我，爸爸你在里面（视频时，看到电脑里的爸爸）干啥呢？ 一次我回去，她第一件事是拉着我的手到楼下小朋友玩滑梯的地方，对一小朋友一个一个的告诉，&amp;rdquo;这是我爸 爸，我有爸爸的&amp;rdquo; 孩子也很可怜&lt;/p&gt;

&lt;p&gt;恩，对着那双纯真的眼睛，很多废话你都说不出口&lt;/p&gt;

&lt;p&gt;每天下班回去早的话就会带孩子玩，孩子都会炫耀“我爸爸回来了”，其他孩子就很郁闷，赶紧说“我爸爸等 会儿就回来了”。海外的兄弟如果有孩子的话是不容易啊，亲情永远比什么都重要。&lt;/p&gt;

&lt;p&gt;在外打工，毁了一代留守儿童&lt;/p&gt;

&lt;p&gt;上次任总开账务大会，一个女同事谈到幼儿园的事情，都几乎哭了，比较尴尬。不过现在想想，大家都不容 易的，很理解&lt;/p&gt;

&lt;p&gt;眼睛进沙子了，海外兄弟挣点钱能回来就麻溜回来吧&lt;/p&gt;

&lt;p&gt;孩子的成长，错过的东西就是永远错过了 只要你们家还不至于流离失所食不果腹的话，那么还是和家人在一起吧&lt;/p&gt;

&lt;p&gt;有些真实，比小说还震撼的多。。 不过也是一样，在家的，多年后羡慕别人相对富裕的生活。。 出外的，多年后羡慕别人和家庭团聚的幸福。。。 悲催的吊丝兄弟们，不会有两全选择的。 下面这兄弟，如果一直过略有温饱的生活。。。你考虑过交不起天价幼儿园费不？？ 所以说，路都是人选的，确实两难。。。&lt;/p&gt;

&lt;p&gt;一声叹息&lt;/p&gt;

&lt;p&gt;在海外至少还能挣点钱，更苦逼的是在国内天天出差的。问女儿爸爸在哪里？女儿就指着墙上我和老婆的 结婚照，泪奔&lt;/p&gt;

&lt;p&gt;看了让人心酸，想办法多陪陪孩子吧，在她最美好的童年，多给她留下一些关于你的回忆。&lt;/p&gt;

&lt;p&gt;小孩从小缺少一份爱（父爱、母爱）对孩子成长没好处的，无法弥补，钱可以随时挣。不要为多那末点钱 摧毁孩子的一生&lt;/p&gt;

&lt;p&gt;小孩3岁之前最好不要离开父母，不然小孩缺乏安全感，挣再再多的钱也补不回来。&lt;/p&gt;

&lt;p&gt;我也想起来了我女儿，哎！ 想多陪陪女儿，可是。。。。。。 所有的育儿大法都说，父亲在女儿成长路上承担了非常重要的角色，。。。&lt;/p&gt;

&lt;p&gt;泪奔，我也想女儿了，周末必须回去！&lt;/p&gt;

&lt;p&gt;同命的人很多啊 老妈问女儿：“你爸爸呢？”，女儿：“爸爸在电话里！”&lt;/p&gt;

&lt;p&gt;怎么生的都是女儿。。。。。。。&lt;/p&gt;

&lt;p&gt;隔海相望,我司特色&lt;/p&gt;

&lt;p&gt;我小孩上一年级了，偶尔我下班早了，到托班去接他，他拉着我对见到的每个老师都说‘这是我妈妈’。&lt;/p&gt;

&lt;p&gt;再次体会到我的脆弱。 我们的世界被爱包围着， 父母对我们的爱 妻儿对我们的爱 &amp;hellip; 这让我们活着更有意义。&lt;/p&gt;

&lt;p&gt;除了孩子，家里还有老爸老妈。我们在想自己孩子的时候，我们的爸妈也在想他们的孩子。 80后伤不起啊！&lt;/p&gt;

&lt;p&gt;周六加班，女儿送我到门口，极不情愿的看我关上最后那一丝门缝，我听到她在门里大声喊：“爸，你早 点回来！”&lt;/p&gt;

&lt;p&gt;同感，我的宝贝儿也是打电话的时候说“妈妈抱抱”，我说妈妈太远了抱不到，她就开始藏猫猫了，一会 看着电话说“妈妈抱抱”，那才叫心酸，有一次她边喊妈妈边哭，电话这头我也泪奔，无法控制。哎！可怜的 孩子。我们是家里老人没办法来带孩子才这样的，过了年怎么都要把她带回来了，几个月过的跟几年似的。&lt;/p&gt;

&lt;p&gt;同样的心酸！ 上周末回老家看了下女儿，电话里刚学会叫“爸爸”的她，老远见着我就笑，但就是不叫“爸爸”。 晚上又把她拉到旁边，哄着叫“爸爸”，结果小家伙径直跑到我们房间，对着墙上我与老婆的婚纱照，叫“爸 爸”，“妈妈”，顿时我的眼泪花转呀。&lt;/p&gt;

&lt;p&gt;兄弟，当时还羡慕你挣钱多，而且没改行，还继续做我们喜欢的老本行。我当时也是考虑小孩的问题，选 择了进入一个新的行业，从头开始，没有基础，啥都要学，疯狂的加班。刚来那一年，晚上加班回去，小孩睡 着了，早上来来的时候，小孩还没醒，有事一周都没和小孩说上一句话。自己感觉不是一个好父亲，不是一个 好丈夫，内心非常愧疚。但是生活的重担迫使我们只能这样。祝福兄弟，回家了，多和小孩玩玩，多和小孩说 说话。&lt;/p&gt;

&lt;p&gt;工作能否理解成事业？ 奋斗者是为谁在奋斗？ 家庭和亲情是否就应该放弃，领导不会给出建议，选择在于自己！ 至于一份工作连养家都成问题，是否值得反思呢？&lt;/p&gt;

&lt;p&gt;想起我有一次从海外回国休假，晚上要睡觉了，儿子不让我上床，告诉我：爸爸下线吧，我和妈妈要睡觉 了。当时我心里这个难受呀，这是海外和儿子视频后的常用语，爸爸在儿子心中就是屏幕上的那个影子么?&lt;/p&gt;

&lt;p&gt;异地研发也是一样的。&lt;/p&gt;

&lt;p&gt;海外的至少物质是丰富了， 异地研发的就是畜生。&lt;/p&gt;

&lt;p&gt;有些人是被迫无奈，长期出差， 只能说每家都有自己难念的经，你不能说赚多点钱不重要，也许只是你没到那一步。&lt;/p&gt;

&lt;p&gt;我女儿也是一个月见一次，一次回去能勉强走路了，一次回去能说几个词了，哎，不能在身边。&lt;/p&gt;

&lt;p&gt;我不想和女儿分开，一想到这件事情心理就像堵了大石头。可为什么所有的男人都说把孩子放回老家去很 好呢？我一直以为你们是不在意和孩子分开的。可这样的帖子，什么情况呢？男人都出来解释一下。【愤怒中 ~~~】&lt;/p&gt;

&lt;p&gt;我是男的，还没小孩，刚出来常驻。看帖子我哭了，真的。&lt;/p&gt;

&lt;p&gt;每天都一下班就回去陪孩子，但是代价就是：PL有意无意的提醒我要多加班。。。 如果有一天能不为房子，吃穿，户口，学位，老人赡养发愁，没人会跟自己的小宝贝分开，简直就是挖心头肉 啊&lt;/p&gt;

&lt;p&gt;正常的父亲是不可能不介意跟孩子分开的。我自己的情况，常驻海外&amp;gt;7年，下半年才刚调到现在的常驻地，最近正张罗把家属接过来，争取年底前搞 定。 男人也是人，常驻海外的男人也是人。 有人说，真的这么心疼闺女的话，就辞职回去，说着简单，可是老婆已经辞职了，我再辞职，孩子成长的物质 条件哪里来？&lt;/p&gt;

&lt;p&gt;海外不容易啊！相比一下，我当前是幸福的。女儿快一周岁了，从嗷嗷待哺，到学会和别人拜拜、从撅着 屁股学爬到满屋子乱爬、从第一次站起到现在稳稳的开路、从第一次会叫妈妈，到现可以清晰的叫爸爸/妈妈/ 奶奶/妹妹/要，我和我LP都幸福的参与了。后面的路还很长，但一家一起走来，很幸福。&lt;/p&gt;

&lt;p&gt;我儿子3岁了，有天晚上打电话，把我问住了，他说，爸爸你白天不在家，晚上也不在家，周末也不在家， 你到底什么时候才能在家？我要去的划船怎么划，我要去的动物园袋鼠怎么看？&lt;/p&gt;

&lt;p&gt;自古事难两全。疼孩子是父亲的责任，可养家也是父亲的责任。很难说哪个更重要吧，不过每个人都有一 杆称。&lt;/p&gt;

&lt;p&gt;大城市的生活&amp;hellip;..&lt;/p&gt;

&lt;p&gt;孩子爸时不时鼓动小孩带回老家，结果宝宝走的当天晚上对我说，如果明天早上6点钟能起来（周一开车两 个多小时回来上班），今晚可以回去一趟。闹了半天他比我还想孩子……&lt;/p&gt;

&lt;p&gt;本人出差3个月回去，儿子见到人就说这是我爸爸，还撒娇的让我抱抱。&lt;/p&gt;

&lt;p&gt;休完假走的时候，背过身直接把门关上，不想让老婆孩子送，越送越难受。儿子还是追着出来，说要跟爸 爸一起走，电梯缓缓关上的那刻，都不忍心看他们母子。。。&lt;/p&gt;

&lt;p&gt;楼主在什么地方常驻啊，环境允许的话把老婆、孩子接过来吧。你的感觉我曾经感同身受 ，后面排除一切 困难，把老婆孩子接过来了，一家人必须在一起。 接不过来，就尽快调回吧，不行就辞工吧，家庭比工作重要，国内其他公司也能容得下我们。&lt;/p&gt;

&lt;p&gt;五一回老家看孩子，临行前两天给2岁半的女儿说，爸爸要回深圳的家了。她说为什么呢？我随口说了一句 ：爸爸要去挣钱，给你买好吃的、好玩的！结果第二天，也就是临行的前一天，女儿突然跑过来给我说：爸爸 ，你别回去了，我不要好吃的了，也不要好玩的了！我当时赶紧转过身去。。。。。。&lt;/p&gt;

&lt;p&gt;有时晚上回去的特晚，儿子早睡了；早上还要按时上班，儿子还没醒。这样的情况不巧了能持续连续3天看 不到儿子的笑容，心里就特别的难受。 受我工作时间的影响，儿子睡得比一般的孩子都晚，因为他想等着爸爸回去陪他玩一会儿啊。&lt;/p&gt;

&lt;p&gt;有两年的时间，我回国儿子不让睡觉，每次都是把我推出去，孩子习惯了，认为妈妈是他的全部，别人不 能分享&lt;/p&gt;

&lt;p&gt;昨天晚上，打开相机，看着一年前宝贝满月的视频，在家人怀抱里嗷嗷待哺，眼睛顿时湿润了，网速不好 ，好久没看到清晰的视频，qq上看模模糊糊的，现在快会走路了。 流着眼泪睡着的。&lt;/p&gt;

&lt;p&gt;这个点上来回帖子的，多数都是海外的孤魂野鬼&lt;/p&gt;

&lt;p&gt;不是异地的也同样啊。早上孩子没醒就上班了，晚上孩子睡了才回来，悄悄在床边看看。&lt;/p&gt;

&lt;p&gt;和楼主一样，我家宝贝女儿也两岁了，每周最期望的就是周末和她视频。 决定了，今年春节回家过年，明年上半年辞职回家好好陪陪她们。&lt;/p&gt;

&lt;p&gt;女儿还不会说话 别人问她爸爸呢？她就指着电脑。 泪奔&lt;/p&gt;

&lt;p&gt;谁说只有农村有留守儿童。。。&lt;/p&gt;

&lt;p&gt;大早上的，不应该看这样煽情的帖子，可是这就是现实，无奈ing。。。。。。。。。。。。 超级喜欢宝宝的人表示，以后等自己有宝宝了一定要每天都见着宝宝，天伦之乐比什么都重要~&lt;/p&gt;

&lt;p&gt;不得不顶，我都搞不懂那些狠心的父母怎么想的。早上7点就出门，加班11点才回家。早上起的时候小孩还 没起，晚上回的时候小孩都睡了。这样小孩会觉得他有父母吗？可怜！&lt;/p&gt;

&lt;p&gt;唉，在TC的困难模式下生活真的很“幸福”！&lt;/p&gt;

&lt;p&gt;异地研发已半年，小女每次都只能在电话中稚嫩的喊几声“爸爸”。心酸。&lt;/p&gt;

&lt;p&gt;女儿8个月的时候，老公就外派了，这期间错过了很多宝贝成长的瞬间，由于时差关系也只能偶尔上网看下 视频，或者是把宝贝的精彩瞬间用手机录成视频发给宝爸一起分享。到现在宝贝已13个月了，已学会走路、会 躲猫猫、已在咿咿呀呀学语了，能听懂很多话了，会叫爸爸、妈妈了，宝爸要是能亲眼看到听到别提有多高兴 。问宝宝：“你妈妈呢？”她就会用手指着我，“问你爸爸呢？”她就只会用手指着墙上挂的全家福里的爸爸 ，宝宝眼里的爸爸就只是一副照片，真是心酸！等宝爸回来，宝宝都不认识爸爸了。外派的员工家属都不易啊 ！真心希望我们一家三口能早日团聚！&lt;/p&gt;

&lt;p&gt;就是没异地的，也是每天起早贪黑，走时孩子没醒，回来时孩子睡了。只有周末不加班的时候才能和孩子 在一起、、、、&lt;/p&gt;

&lt;p&gt;之前连续加班了一周多，晚上都是11-12点回去，到了周末，女儿说：“爸爸，你这么多天都干什么去了， 我好想你呀！” 工作，进度，无奈。&lt;/p&gt;

&lt;p&gt;小孩三岁，每次在外面也会主动和别人讲“这是我爸爸”，那个心酸啊~~~~~~~~~&lt;/p&gt;

&lt;p&gt;唉，一声叹息，争取早日把小孩接到身边。&lt;/p&gt;

&lt;p&gt;这个题目回一下。电话回去，说回家吃饭，女儿的高兴劲都听得出来，所以尽量回家陪。回不去，还是得 想些办法： 1、我没有大家的距离分割，所以查资料，学习等任务会带回家干。玩就一起玩，她做作业，我干点自己的事 （自己看自己的书对小孩也是榜样作用），她休息后继续干点。 2、实在没有办法，推荐大家看《养孩子的责任99%在母亲》（原书名不一定对，”99%“是一定有的），是韩 国前总理的女儿在美国自己带孩子的经验。99% 其实说的一个场景：她老公基本不在家，她自己怎样培养孩子 们的心智，甚至对父亲都是好感，最后都成才了。 看完这个书后给我当时的感受是：各家有各家难念的经， 但夫妻两人要把一些观念达成一致，就是在自己现实场景中怎样培养孩子完整的心智，除了目标一致，方式就 是围绕自己的实际来的。不是那种理想状态下开出的方子。 愿在外不在外的都有好心情，事顺，孩子健康成长&lt;/p&gt;

&lt;p&gt;就是一部感人的微小说。&lt;/p&gt;

&lt;p&gt;看的我眼泪也出来了，我也是在海外的。前段时间国庆回家看女儿，女儿2岁，见了我是怯生生的不怎么说 话，叫她叫爸爸，她不叫，她奶奶让叫，她才叫的，而且每次在电话里在照片里，她可以肆无忌惮地叫爸爸， 反而我在她面前，她不叫了。很想回国了。。。&lt;/p&gt;

&lt;p&gt;泪流满面,真的，国庆回去看女儿刚两岁，回去的时候说话都还说不清楚，现在打电话回去说话也说的很 清楚了就叫爸爸买爽歪歪，这才隔半个月，学的真快。只希望女儿能健康成长.&lt;/p&gt;

&lt;p&gt;元芳说：其实狄大人也很不容易&lt;/p&gt;

&lt;p&gt;我孩子2岁多的时候，第一次骑到我的脖子上在小区里转悠 孩子幸福得很 很激动很兴奋的对路边的小狗说：小狗狗，我有爸爸了！我有爸爸了！我骑大马了！&lt;/p&gt;

&lt;p&gt;哎，马上要有孩子了。估计以后孩子也只能认出电脑里面的爸爸了，泪奔中！！！！&lt;/p&gt;

&lt;p&gt;和lz一样，刚刚和9个月大女儿视频时，她费力的喊爸爸，虽然咬字还不是特清楚，小手拼命的去抓iPad中 的爸爸，小脸现出要哭的样子，老婆赶紧抱着女儿走开了。&lt;/p&gt;

&lt;p&gt;海外的兄弟们，会聊孩子，但大多分享下孩子照片啥的，也就转移话题了，不想把内心的牵挂的想念形成 共振。生活很现实，为了未来好一点，付出了多少代价，只有自己清楚。事业是弹性的皮球，掉了，可以弹起 来；亲情是玻璃球，呵护不好，一掉就碎了。努力做坚守幸福的人。共勉！&lt;/p&gt;

&lt;p&gt;哭了 生活就是一个又一个的选择串在一起。有的是无奈的选择，有的是幸福的选择，看你怎么选了！&lt;/p&gt;

&lt;p&gt;女儿每次视频结束都会哭。 在海外的兄弟姐妹们，我们的家人为了我们付出这么多，怎么回报？珍惜他（她）们吧！&lt;/p&gt;

&lt;p&gt;快4个月没见到闺女了，开始的时候，小家伙看到视频或者打电话就哭着要爸爸；现在看到我之后，就一直 说要到爸爸这儿来；有次半夜老婆打电话来，说闺女要视频，原来在小区玩，看到别的小孩有老爸带着骑车玩 ，就一路哭着要回家找我。听着我眼泪都下来了。 海外的兄弟们，不容易呀。&lt;/p&gt;

&lt;p&gt;中国人最不羡慕的幸福就是家人在一起啊。 能讨论这个就算有进步了。 在目前的社会现实下，事难两全，看个人以及家庭的选择。 但尽量和小孩多在一起，错过也就错了，补不回的。&lt;/p&gt;

&lt;p&gt;看完这个帖子的收获，如下：&lt;br /&gt;
1.能不去海外常驻就不去，长期出差，异地研发等也都不能考虑，短期频繁出差可以考虑，但频次不能太高 。&lt;br /&gt;
2.相对常驻外派长期出差的物质收益，能弥补多少陪伴在孩子身边的损失，值得好好算算。中国不止华为一 家好公司，我为什么不能找一个收入不错发展前景好还能陪伴在孩子身边的工作呢？&lt;br /&gt;
3.有了孩子后的心态跟未婚完全不同，到底什么时候转变的？值得考虑。&lt;br /&gt;
4.衍生的话题：如果我的人生注定对不起孩子，是否一开始就要考虑该不该生下来？生下来或许带给TA的困 惑和磨难很多，想着都很心酸。&lt;/p&gt;

&lt;p&gt;感动流泪。。。。也曾经在海外奋斗过，出去过体验过就行了，权衡家庭方面坚定选择回国。现在儿子2岁 多了，每天下班回家都要陪儿子玩，整个周末基本都给了孩子，父亲对孩子的性格影响非常大，我会更用心去 作个称职的爸爸。&lt;/p&gt;

&lt;p&gt;家庭、工作若失衡，你是要家庭还是要工作？，可惜的是，工作丢了还可以再找，家庭（家人）丢了，你 还能再找？&lt;/p&gt;

&lt;p&gt;看心声，第一次要哭了。唉，我也已经有三个月没看到女儿了！&lt;/p&gt;

&lt;p&gt;儿子2岁，前一段日子，一连10天加班，最早一次晚上11点回家，每次回家后儿子都睡了，然后习惯性的亲 他下再睡，忽然有一天半夜，儿子梦中醒来，哭着喊爸爸没回来，要爸爸，我这个喜极泪奔啊。&lt;/p&gt;

&lt;p&gt;我问儿子，爸爸不在你身边你会想爸爸吗？儿子说会。我又问，那你怪爸爸吗？儿子说，你都不回来说这 个有用吗？我儿子四岁半。感觉无语了，想回去。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>动物庄园</title>
      <link>https://pureage.info/2012/10/20/102.html</link>
      <pubDate>Sat, 20 Oct 2012 05:04:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/10/20/102.html</guid>
      
        <description>&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/orwell.jpg&#34; alt=&#34;orwell.jpg&#34; /&gt;&lt;br /&gt;
总有些人，视线如同海上的灯塔，穿破时代的迷雾，闪耀在后人的心里。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>罗生门</title>
      <link>https://pureage.info/2012/10/02/100.html</link>
      <pubDate>Mon, 01 Oct 2012 17:10:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/10/02/100.html</guid>
      
        <description>&lt;p&gt;伟大的电影一般都要涉及到对人性的恶的剖析，但在此基础上，是回归到善，还是一恶到底，既取决于导演，也取决于观众。而这部电影，既能满足那些对人性仍抱有希望的人，也能满足那些对其充满绝望的人。&lt;/p&gt;

&lt;p&gt;武士，武士的妻子，樵夫，强盗，路人，和尚，女巫。就这么几个人，来来回回的将一个故事放了N个版本，真相到底是什么呢？&lt;/p&gt;

&lt;p&gt;真相就是没有真相，正如这些年来在西南某个城市里发生的事情一样。&lt;/p&gt;

&lt;p&gt;如第一段所述，看你是一个抱有希望的人，还是一个不怀希望的人。刚看完之后，我觉得是强盗杀了武士，但再想想，事情并没有这么简单。这些人中，除了路人（是个乞丐？)外，没有一个人的话可信，从樵夫对武士到底是死于匕首还是死于剑如此惊恐在意，可以认为他的罪过并不仅仅在于从一个死人身边偷走了那把匕首，正如武士的鬼魂借巫女之口所述：“我静静的躺在那里，接着有人静静的朝我走来，那个人轻轻的把匕首从我的胸口上拔出来&amp;hellip;”，注意巫女在说这句话时坐在她后面的樵夫的神情。如果这样的话，又是谁用匕首杀死了武士呢，他自己所述的自杀显然不可信，那么就可以断定是他的妻子将匕首刺入他的胸口。当然，值得细细反复品味的细节太多太多。&lt;/p&gt;

&lt;p&gt;其实真相到底如何已经不重要了，同样正如这些年来西南某个城市里发生的事情一样。&lt;/p&gt;

&lt;p&gt;回到案子开头，还是强盗的一句话道出了真谛。强盗说，“突然，一阵凉爽的威风吹着树叶沙沙作响，如果不是那阵风的话，我是不会杀了他的&amp;hellip;”&lt;br /&gt;
那阵风是什么呢，套用一句已经用到烂俗的话，每个人心中都有那一阵风，什么时候它会吹起来呢？&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/luoshengmen.jpg&#34; alt=&#34;luoshengmen.jpg&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>挪威的森林</title>
      <link>https://pureage.info/2012/09/23/98.html</link>
      <pubDate>Sun, 23 Sep 2012 05:46:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/09/23/98.html</guid>
      
        <description>&lt;p&gt;《挪威的森林》，在高中时就看到还在读初中的表弟在看这本书，还有一本《再袭面包店》。当时我还不知道村上春树，接触到的信息远远没有生活在广州的表弟那么丰富。但正如我对他天天哼唱的《双截棍》表示不屑一顾一样，我也对《挪威的森林》没太在意，本能的觉得那是年轻小孩爱看的哀伤青春之类的东西，那时的我，大概就像永泽一样：“不是说我不相信现代文学。我只是不愿意在阅读未经过时间洗礼的书籍方面浪费时间。人生短暂。”&lt;/p&gt;

&lt;p&gt;到大学了，如饥似渴的在图书馆借书看，却依然丝毫没有想到过去看这本书，可见第一印象的作用是多么根深蒂固。&lt;/p&gt;

&lt;p&gt;但书中多次提到的《了不起的盖茨比》却是我很喜欢的书，英文看了一遍，中文看了两遍，还是在深夜里楼道昏黄的灯光下看完的，从此列入我最喜欢的小说之一。&lt;/p&gt;

&lt;p&gt;来到北京，我养成了每天早上在公司的班车上看书的习惯。终于轮到它了。用了一周把它看完，然后今早一口气又重头看了一遍。&lt;/p&gt;

&lt;p&gt;但这本书和《了不起的盖茨比》几乎完全没有共同点，如果硬是要扯到一块的话，就是那淡淡的平铺直叙的文字和这些文字中包含的孤独、死亡、宿命之类的东西。盖茨比的悲剧不在于他的结局，而在于他所沉迷的赖以生存的幻想，早已不是甚至原本就不是那个样子，但他却沉迷于中走不出来，即使没有最后的结局，当维持其活下去的信念倒塌时，他也必然会走向死亡。而对于直子，虽然她也迷失在过去的世界里，但那个世界是真实的没有欺骗的地方，她所处的现实世界，同样如此，只是年轻的她被死亡的阴影压的喘不过气来，那里有她的姐姐，有木月。他们在一头拉她过去，渡边在另一头拉她回来，但她终究还是过去了，因为她知道自己并不爱渡边，或者，只会继续分裂直到崩溃，去了，就能永远21岁。&lt;/p&gt;

&lt;p&gt;到底是姐姐的死，还是木月的死对直子影响更大已经不重要。但是木月为何要自杀，往复杂了说，能说的太多，往简单了说，自杀有时候并不需要什么原因。这个十七岁的孩子，把渡边作为连接外界的纽带，所以他在渡边面前压抑自己的不快，只呈现自己最好的微笑，实际是他一直在努力坚持的活着，努力的对世界微笑。可是在打完最后一局台球，说了句“今天我不想输”后，还是选择了死亡。死是一种抗争，还是一种屈服，我不知道。&lt;br /&gt;
我想起了我小时的几件事情。&lt;/p&gt;

&lt;p&gt;小学一年级那一年，父母在广州打工，我就是所谓的留守儿童，住在姑妈家。即使有个表哥在一起，我却仍然过早的体会到了孤独。最怕的是黄昏，姑妈在灶上做饭，姑父还在田地里忙，表哥不知去了哪里，我一个人蹲在门口，或是坐在屋后的山坡上，看着夕阳落下，周围慢慢变黑。然后不断的在脑子里想，我是谁，我为什么在这里，我要是一直不动会怎么样。那种精致下，连个7岁的小孩都会变成一个多愁善感的诗人，只是赋不出那种词语而已。所以在后来读到“野旷天低树，江清月近人”这种诗句时，我总是很沉迷。&lt;/p&gt;

&lt;p&gt;初中时，为了生计，父母也都出去打工，我住外婆家。我终日和一群同样的留守小青年混迹校园和街道，干着拉帮结派拜把子的事情，甚至周六也不回家，到同学家里通宵打小霸王。少不了也有打架活动，但庆幸的是，我一直保有着我引以为豪的正直，所以那时的岁月回忆起来，并没有后悔和遗憾。但是当周围安静下来后，孤独感仍会侵袭过来。一次深夜里，和一个哥们走上了宿舍楼顶，没有栏杆。看了会星星后，我们来到楼顶的边缘，他停了下来，我继续往前几步，只差一步就能掉下去了。一个声音在大脑里说，往前迈吧，看看会是什么样。另一个声音说，还是回来吧，去了父母怎么办。当然最后还是退回来了，但我确定当时不是因为害怕。&lt;/p&gt;

&lt;p&gt;至于绿子这头象征着生命的小鹿，我不敢多想。书的开头：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我想起自己在过去人生旅途中失却的许多东西&amp;mdash;-蹉跎的岁月，死去或离去的人们，无可追回的懊悔。&lt;br /&gt;
就当是渡边回忆这些的时候，是在一次出差途中吧。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>扯皮的艺术</title>
      <link>https://pureage.info/2012/09/12/97.html</link>
      <pubDate>Wed, 12 Sep 2012 14:55:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/09/12/97.html</guid>
      
        <description>&lt;p&gt;晚上九点多，某司的班车上，黑灯瞎火，众人昏昏欲睡。一人手机铃声响起。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“喂，我现在快到上地七街了，你们跟XX那边讨论的怎么样了？&lt;br /&gt;
&amp;hellip;&amp;hellip;.&lt;br /&gt;
他要你改，你就跟他说，我们这边如果改的话，就要改架构、测试等等，这些都是风险，跟领导用邮件沟通一下，到时候即使出问题了，把邮件拿出来甩在他们面前。&lt;br /&gt;
&amp;hellip;&amp;hellip;.&lt;br /&gt;
风险估计？你就说如果要我们这边改的话，交接日期就要到十月中旬或者十月下旬。这个风险我们现在是能预知的，到时候过不了点了，我们不负责任。&lt;br /&gt;
&amp;hellip;&amp;hellip;.&lt;br /&gt;
总而言之，你就说我们如果要改就要改架构，让他们那边去改吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好的，就这样吧，拜拜!”&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>铁拳男人（Cinderella Man ）</title>
      <link>https://pureage.info/2012/09/09/96.html</link>
      <pubDate>Sun, 09 Sep 2012 15:16:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/09/09/96.html</guid>
      
        <description>&lt;p&gt;磨难无法击倒一个朝它微笑的男人。&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/cinderellaman.jpg&#34; alt=&#34;cinderellaman.jpg&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>正午（High Noon）</title>
      <link>https://pureage.info/2012/09/08/94.html</link>
      <pubDate>Sat, 08 Sep 2012 14:42:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/09/08/94.html</guid>
      
        <description>&lt;p&gt;这部电影，看着看着我想起了《双旗镇刀客》，最后的长街，正午的太阳，怯懦的镇民，怎么看都不可战胜的敌人，最重要的是，那如巨石压在心头散不去的恐惧和压力。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/high-noon-1.jpg&#34; alt=&#34;high-noon-1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;两者的不同在于，《双旗镇刀客》里，孩哥站起来一步一步走向一刀仙，那一刻他才成长为一个英雄，即使没有最后的那阵风沙，他倒在了一刀仙刀下，他也是一个英雄。但《正午》里的警长，早已过了那一关，早已是一个英雄。所以，在结婚和卸任的当天，当听到Frank回来后，他并没有犹豫多久就做出了自己的选择。&lt;/p&gt;

&lt;p&gt;但是英雄也是人，英雄也会害怕。当把小镇所有能求助的人，还包括在教堂祷告的人都求了个遍后，警长走在空荡荡的街头，看着四处随处可能飞来一颗子弹的角落，他的手流汗了，颤抖了。那一刻，英雄升华了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/high-noon-2.jpg&#34; alt=&#34;high-noon-2.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最后，警长侥幸胜利。空荡荡的街头瞬间恢复了活力，人们刚刚还躲在各自的家里看着警长像是从地底冒 出来一样围在了他周围。警长憎恶的看着他们，将警徽狠狠地摔在地上，和自己的女人远离他已经不愿意保护的人们。&lt;/p&gt;

&lt;p&gt;英雄是英雄自己的英雄，只是他们顺便保护了别人而已。一个对对岸的英雄们冷漠的社会，只配让自己的儿女学习这样的课文：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在国外读书的第一个假日，我决定做一次漂流旅行。收拾好背包，我把它系在筏子上，手举一面鲜艳的 五星红旗，便出发了。&lt;br /&gt;
　　&lt;br /&gt;
筏子顺流而下，到了傍晚，河面变窄了。为了防止丢失，也为了行动方便，我把国旗从旗杆上抽下来 ，系在脖子上。&lt;br /&gt;
　　&lt;br /&gt;
不久，筏子漂到了水势最急的一段河面，周围一片漆黑，我想大声呼喊，给自己壮胆鼓劲。还没等喊 出口，只觉得眼前一黑，便落入激流之中。醒来的时候，发现自己被一块巨石挡住了，头和身子被撞伤了好几 处，筏子和背包都无影无踪。我迷路了，在荒无人烟的大山里转来转去。直到第三天中午，我才来到一座小镇 ，走进一家面包店。&lt;br /&gt;
　　&lt;br /&gt;
我向老板说明了自己的处境。老板听懂了我的话，却把双手一摊，表示一脸的无奈，说：“我讲究平 等交易，我给你面包，你能给我什么呢？”&lt;br /&gt;
　　&lt;br /&gt;
此时我身无分文，只好脱下新买的大衣。老板接过去看了看，耸了耸鼻子，还给了我。突然，老板眼 里闪出亮光，他用手指着我脖子上的五星红旗，惊奇地问：“那是什么？”&lt;br /&gt;
　　&lt;br /&gt;
我犹豫了一下，把国旗慢慢解下来，再展开。这面做工精致的五星红旗，经过河水的冲洗，依然是那 么鲜艳。&lt;br /&gt;
老板拍了拍我的肩膀，告诉我可以用这面旗子换面包。&lt;br /&gt;
　　&lt;br /&gt;
我愣了一下，然后久久地凝视着手中的五星红旗。&lt;br /&gt;
　　&lt;br /&gt;
老板转身拿起一块面包，见我没有反应，以为我嫌少，又拿起两块面包递给我。&lt;br /&gt;
　　&lt;br /&gt;
“可以吗？交换吧。”老板冲着我打手势。我摇摇头，吃力地穿上大衣，拿着鲜艳的国旗，趔趔趄趄 地向外走去。突然，我摔倒在地上，就什么也不知道了。&lt;br /&gt;
　　&lt;br /&gt;
我醒来的时候，发现自己躺在医院的病房里，身边站着的就是面包店的老板。他见我醒来，冲我竖起 大拇指，说：“安心养一养，费用由我来付。”&lt;br /&gt;
　　&lt;br /&gt;
这时我才发现，在我床头的花瓶里，有一束美丽、芬芳的鲜花，花丛中插着那面心爱的五星红旗。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>南京知青之歌</title>
      <link>https://pureage.info/2012/08/21/91.html</link>
      <pubDate>Tue, 21 Aug 2012 12:30:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/08/21/91.html</guid>
      
        <description>&lt;p&gt;&lt;strong&gt;南京知青之歌（词曲：任毅）&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;蓝蓝的天上，&lt;br /&gt;
白云在飞翔，&lt;br /&gt;
美丽的扬子江畔,&lt;br /&gt;
是可爱的南京古城，&lt;br /&gt;
我的家乡。
啊，彩虹般的大桥，&lt;br /&gt;
横跨了长江，&lt;br /&gt;
雄伟的钟山脚下,&lt;br /&gt;
是我可爱的家乡。&lt;br /&gt;
告别了妈妈，&lt;br /&gt;
再见吧家乡，&lt;br /&gt;
金色的学生时代,&lt;br /&gt;
已伴随着青春史册，&lt;br /&gt;
一去不复返。&lt;br /&gt;
啊，未来的道路多么艰难，&lt;br /&gt;
曲折又漫长．&lt;br /&gt;
生活的脚印,&lt;br /&gt;
深浅在偏僻的异乡。&lt;br /&gt;
跟着太阳出，&lt;br /&gt;
伴着月亮归，&lt;br /&gt;
沉重地修理地球,&lt;br /&gt;
是光荣神圣的天职，我的命运。&lt;br /&gt;
啊，用我的双手绣红了地球,　&lt;br /&gt;
绣红了宇宙，&lt;br /&gt;
幸福的明天，&lt;br /&gt;
相信吧, 一定会到来。&lt;br /&gt;
告别了你呀，&lt;br /&gt;
亲爱的姑娘，&lt;br /&gt;
揩干了你的泪水，&lt;br /&gt;
洗掉心中忧愁，&lt;br /&gt;
洗掉悲伤。&lt;br /&gt;
啊，心中的人儿告别去远方，&lt;br /&gt;
离开了家乡，&lt;br /&gt;
爱情的星辰永远放射光芒。&lt;br /&gt;
寂寞的往情，&lt;br /&gt;
何处无知音，&lt;br /&gt;
昔日的友情，&lt;br /&gt;
而今各奔前程，&lt;br /&gt;
各自一方。&lt;br /&gt;
啊，别离的情景历历在目，&lt;br /&gt;
怎能不伤心，&lt;br /&gt;
相逢奔向那自由之路。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;任毅：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;生于1947年，南京五中高中毕业。上小学时在南京市小红花艺术团学习唱歌，中学时又加入南京市中学生艺术团专攻二胡和吉他。&lt;/p&gt;

&lt;p&gt;1968年12月，任毅等五中下乡知青插队落户到当时的江浦县。&lt;/p&gt;

&lt;p&gt;次年5月，任毅和校友来到插队在江浦县汤泉公社的同学处。在那里，任毅听到了在新疆插队的南京知青高世隆所作的《塔里木——我的第二故乡》这首歌，顿时充满了思乡之情。在大家鼓励下，任毅涌动起创作一首知青歌曲的激情。&lt;/p&gt;

&lt;p&gt;几天后，《知青之歌》引起江青、姚文元的重视，作出了“要抓紧意识形态的阶级斗争，要查清作者情况，要对黑歌进行批判”的批示。&lt;/p&gt;

&lt;p&gt;1970年5月24日，经过“群众讨论”，南京市公检法军事管制委员会作出《关于现行反革命犯任毅的结案处理报告》。其中认定任毅长期收听敌台，散布反革命言论，恶毒攻击无产阶级司令部；编写反动黑歌《可爱的家乡》，流传甚广，危害极大，严重破坏知识青年上山下乡运动，罪大恶极。军管会的结论是：“经研究，判处任毅死刑，立即执行。请批示。”&lt;br /&gt;
同年6月6日，南京市革委会在《处理案件呈批表》上签字“同意”。&lt;/p&gt;

&lt;p&gt;幸运的是，就在最后一关的江苏省革委会审批时，省革委会负责人许世友将军审阅案卷时拍案而起：“一名知青，仅凭一首歌就被判处死刑，岂有此理！”&lt;/p&gt;

&lt;p&gt;老将军顶着“四人帮”的压力，硬是把任毅从鬼门关拉了回来。当时与其一起接受判决的另外24人因犯反革命罪，均被执行死刑，唯独他一人死里逃生，被判刑10年。&lt;/p&gt;

&lt;p&gt;服刑近9年后终由法院平反，1979年1月4日，建邺区法院宣判任毅“无罪释放”。至此，他服刑还差45天就满9年了。&lt;/p&gt;

&lt;p&gt;目前，任毅退休后继续供职于成都艺术职业学院。&lt;/p&gt;

&lt;p&gt;&lt;embed src=&#34;http://player.youku.com/player.php/sid/XMjExOTY4NjQ4/v.swf&#34; quality=&#34;high&#34; width=&#34;480&#34; height=&#34;400&#34; align=&#34;middle&#34; allowscriptaccess=&#34;always&#34; type=&#34;application/x-shockwave-flash&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>他人的生活(一)</title>
      <link>https://pureage.info/2012/07/30/90.html</link>
      <pubDate>Sun, 29 Jul 2012 17:00:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/07/30/90.html</guid>
      
        <description>&lt;p&gt;两周前的一天,作为刚入职的新员工,我和几位新同事早早的来到了公司,却发现工卡没有实验室门禁的权限,于是一行人就在实验室门口等着老员工来开门.&lt;/p&gt;

&lt;p&gt;五分钟过后,一位约摸五十多岁的清洁阿姨路过,我们问了句:&amp;ldquo;阿姨,这个门怎么才能打开阿?&amp;ldquo;阿姨停了下来,回答道:&amp;ldquo;这个门只有你们实验室的员工才能打开,我们平时搞卫生都是要你们开门才能进去的.&amp;ldquo;一来二去,我和她聊了起来.同行的几位同学或是上洗手间,或是打电话去了.&lt;/p&gt;

&lt;p&gt;不痛不痒的聊着,我正觉得这阿姨的口音很耳熟时,阿姨问,你们实验室没有武汉的人吗？我恍然大悟，说，“阿姨，您是武汉人吧，我也是湖北人，孝感的！”阿姨顿时仿佛遇到了故知，跟我攀谈起来。&lt;/p&gt;

&lt;p&gt;聊着聊着，我了解到了这位阿姨的一些情况。她住在黄陂，武汉的一个附属地。&lt;/p&gt;

&lt;p&gt;阿姨说，你们在这里工资挺高的，就是挺累的，我看他们中午都直接在地上铺个垫子就睡了。&lt;/p&gt;

&lt;p&gt;我说，你们搞清洁也挺累的吧？&lt;/p&gt;

&lt;p&gt;她说，还好，其实这边不累，很轻松，就是钱少，一个月才1500。每个月还要租房子吃饭，哪里还有剩下的钱，所以我还另外找了个活，在食堂打饭，每顿饭13块钱，还包那一顿的饭，我女儿也在食堂上班呢。而且在食堂餐线上班有个好处，可以偷偷的藏个馒头什么的，我一般都把馒头放到衣服里藏着。可能忽然觉得给我说这些有些不好意思了，加了句，“这也是她们教我的，要不然每个月真是剩的太少了，对了，我在XX区的食堂，你中午去那里吃饭吧，见到我了打个招呼，我怕我忙了认不出你！”&lt;/p&gt;

&lt;p&gt;我忙说，好好好！其实没告诉她，我一般不会去那个食堂吃饭的,因为太远。&lt;/p&gt;

&lt;p&gt;还没有人来开门，聊天在继续。&lt;/p&gt;

&lt;p&gt;她说，你们现在也到了该行孝的年纪了，父母把你们供出来真不容易。&lt;/p&gt;

&lt;p&gt;我说道，是啊，阿姨您的儿子也跟我们一般大了吧？她说，“二十八了。”我说，“比我大两岁，阿姨您也到了该享享福的时候了。”&lt;/p&gt;

&lt;p&gt;这个时候，她的脸色忽然暗淡了一下，一句话咽了半天终于还是说了出来：“他好赌。”&lt;/p&gt;

&lt;p&gt;于是，什么话也不需要多说了，“赌”这个字，在电影里，意味着各种可能性，但是在农村，“好赌”通常只意味着一件事情：家不成家，穷困潦倒。&lt;/p&gt;

&lt;p&gt;我顿时不知道该说些什么了。&lt;/p&gt;

&lt;p&gt;幸好，不一会，实验室有人来把门打开了，阿姨说，你进去忙吧，以后吃饭记得去我那里啊，我给你多打点，但是一定要给我打个招呼，中午餐线上人太多，我不一定能认出你。&lt;/p&gt;

&lt;p&gt;进了实验室，工作了一会，那阿姨进来搞卫生了，我和她点了点头，笑了笑。&lt;/p&gt;

&lt;p&gt;看到她笑容满面，我觉得很舒服。&lt;/p&gt;

&lt;p&gt;这时，有个同事进来了，看到他的位置前有一滩水，应该是晚上空调里面漏的。对低头扫地的阿姨冷冷的说：这地上怎么这么多水？怎么回事？搞一下吧！”&lt;/p&gt;

&lt;p&gt;于是，我看到阿姨带着笑容的脸又黯淡了下来，出去拿了拖把，迅速的把那滩水拖干净了，然后又迅速的出去了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>从百草路到百草园</title>
      <link>https://pureage.info/2012/07/22/89.html</link>
      <pubDate>Sun, 22 Jul 2012 15:16:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/07/22/89.html</guid>
      
        <description>&lt;p&gt;警告：本文只是一篇流水账，为避免浪费您的时间，请谨慎阅读。&lt;/p&gt;

&lt;p&gt;昨天（2012年7月２日）离开学习和生活了三年的成都,来到了深圳.我将这个过程为从百草路到百草园，从一个城乡结合部到了另一个城乡结合部。&lt;/p&gt;

&lt;p&gt;我读研所在的学校是一个很偏僻的学校。到底有多偏僻，通过几件事情可以看出一二。三年前刚到成都时，在机场打的，问的哥到XXXX大学清水河校区多少钱，的哥用一口标准的川普羞涩的表示他不知道这个地方怎么走；学校通往外界几乎只有三个途径，第一是在西门花1块钱乘坐116号公交车到九里堤公交站，第二是在校外的顺江小区乘坐96号公交车到金沙公交站，第三是在校门口乘坐“黑的”，而“黑的”本身也能说明学校的偏僻。&lt;/p&gt;

&lt;p&gt;从学校到市区，跟大多数同学一样，我大多采用第一条路径：乘坐116路公交车，由天润路转百草路，再由百草路转天宇路口；然后可以选择是在天宇路口下车去逛犀浦镇，或是继续坐到终点站九里堤再继续转车。于是这条路线就是三年来我出行的必行路线。这条路上有ULVAC，有四威电子，有一个桥，有一个涵洞，有红旗超市，一切都熟得不能再熟，但以后可能再也走不上了。煽情点,有些路,你已经习惯,但总有一天,你可能再也踏不上了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/baicaolu.jpg&#34; alt=&#34;baicaolu.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;12：00，我和张同学登上了开往深圳的CA4392。在途中，某一块地方空气质量出奇的好，山间蜿蜒的小路看的清清楚楚。经过近三个小时的飞行，我和张同学就来到深圳了。在机场等了几十分钟，他的表弟开车过来把我们送到目的地，也就是百草园。看到百草园的一瞬间，我想到的是那条百草路。那个词叫什么来着？哦，对，是恍惚。虽然用滥了，但能想到的也只有它了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/baicaoyuan.jpg&#34; alt=&#34;baicaoyuan.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;由于我们是在规定的报道日期前到达，公司不予接待，我和张同学把行李拿下来，让他表弟先回去，然后两人拖着两个大箱子，背着把吉他就在百草园附近找旅馆。期间高中挚友陈同学打电话来要给我接风，于是在我们找到旅馆后，于他会合，去了一个火锅店，与陈同学同来的还有他的妹妹以及他妹妹的一位同事。一人两瓶啤酒下肚，居然有点晕晕糊糊，酒量是越来越不行了。吃完饭后就已经到了快十点了，陈同学三人把我和张同学送到旅馆，然后去自己的住处了。第一次体会到在异地他乡遇到朋友的温暖。&lt;/p&gt;

&lt;p&gt;这一觉就睡到了7月3日早上十点，中间醒来了几次，每次都发现灯和电视都开着，但都懒得关，眼一闭又睡过去了。早饭午饭一起吃了，两人去买了张地图，又回到旅馆，开始在网上淘租房信息。几个小时候，到距离公司十分钟车程的某小区，把房子订了下来，吃完晚饭继续回到旅馆。他上网，我开始写这篇日志。在我写到这里的时候，他已经睡着。&lt;/p&gt;

&lt;p&gt;这就是我们从百草路到百草园的过程。&lt;/p&gt;

&lt;p&gt;如果要问我离开成都这座城市有什么感想，我想说，可能以后再也看不到成都特色的公交景观了。成都的公交车每到一个站台，为了避免拥挤，很多人会从车后门上车，然后每个从后门上车的人会把公交卡或钱从后面往前面一个人一个人的传递，送到车头把卡刷了或把钱投了后，再一个人一个人的把公交卡从车头传回来。去过那么多城市，这种现象我只在成都见到。多少可以反映成都的性格，成都人的性格，在随意、不严谨的同时，洋溢着温情。&lt;/p&gt;

&lt;p&gt;那么深圳呢？以后再说吧，目前第一印象是就没看到几个本地人，也没看到几个本地馆子，这与成都满城尽是四川话相比，自然是另一番景象。&lt;/p&gt;

&lt;p&gt;这篇文章写于2012年7月4日凌晨深圳某旅馆，今天是2012年7月22日，人却已到了北京。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>雨中送友人</title>
      <link>https://pureage.info/2012/06/25/86.html</link>
      <pubDate>Mon, 25 Jun 2012 09:00:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/06/25/86.html</guid>
      
        <description>&lt;p&gt;他说,我走了!&lt;br /&gt;
我说,送送你吧。&lt;br /&gt;
走过那段走了三年的楼梯，下楼到门口，成都连续放晴的天竟然下起来了雨。&lt;br /&gt;
他掏出烟盒，抽出两根烟，点上。&lt;br /&gt;
是不是我要走了，连老天都感动得哭了？他笑道。&lt;/p&gt;

&lt;p&gt;酒总有喝完的时候，烟也总有抽完的时候。&lt;br /&gt;
走吧，把你送上校车吧。&lt;br /&gt;
妈的你没看见在下雨吗？你回去吧。&lt;br /&gt;
这点雨算个屁。&lt;/p&gt;

&lt;p&gt;路总会有到尽头的时候，何况区区一个校园。&lt;br /&gt;
校车在雨中哼哧哼哧着冒着白烟&lt;br /&gt;
他说，幸亏你送过来了，没想到现在校车收费改刷饭卡了。&lt;br /&gt;
我走了，以后再见。&lt;br /&gt;
恩，一路顺风。&lt;/p&gt;

&lt;p&gt;车子还是开了，他的脸在湿漉漉的玻璃后显得一片模糊&lt;br /&gt;
只有那件黄色的T恤闪着亮光&lt;br /&gt;
也许这正是多年后回忆今天所能记得的一切&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Unforgiven:不可饶恕</title>
      <link>https://pureage.info/2012/06/07/85.html</link>
      <pubDate>Thu, 07 Jun 2012 03:40:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/06/07/85.html</guid>
      
        <description>&lt;p&gt;直到昨晚才看了的这部电影，作为伊斯特伍德的影迷，实在有些“不可饶恕”了，但我有个很好的理由。这部电影最显著的一个标签就是“反西部片”，如果没有足够的“西部片”的沉淀，看“反西部片”又能看出个什么门道呢。而现在稍微有点名气的西部片几乎都被我看遍了，也该看看这部让伊斯特伍德第一次获得奥斯卡最佳导演奖的电影了。&lt;/p&gt;

&lt;p&gt;2个多小时很快就过去了，很是酣畅淋漓，看完后想说点什么，却又一时不知道该从何说起。想来大部分影评都会着眼于这部电影如何打破了西部片的传统，如何模糊了善与恶的界限，如何颠覆了西部大漠英雄的经典形象等等，翻看了一些影评，发现也确实如此，意料之中又有些失望。在西部片中模糊善恶对立，突出人性的复杂的做法，《不可饶恕》既非空前，《虎豹小霸王》、《落日黄沙》等更早期的一些电影的革新意义更明显；也非绝后，《无枪侠》、《决斗尤马镇》等后来的一些西部片在这一方面大有赶超前人之势。固然《不可饶恕》在革新上做的很出色，但亮点也绝不仅在此。&lt;/p&gt;

&lt;p&gt;如果很少看西部片的朋友想了解《不可饶恕》与所谓的“传统西部片”的区别，我建议不是与《镖客三部曲》等名声赫赫的电影对比，因为在西部片的历史中，这些电影本身就是求新求变的产物，在我看来都算不上传统西部片，而一些早期的黑白片可能对一些朋友又没吸引力，所以最合适的参照物是另外一部伊斯特伍德于1985年自导自演的《苍白骑士》。这里得再次向伊斯特伍德敬个礼，这两部风格如此迥异的电影在他手上都如此游刃有余，而且之间相隔不到十年，一直到后来的《老爷车》、《百万美元宝贝》等，都足以表现他善于思考和自省的品质。&lt;/p&gt;

&lt;p&gt;既然不打算说革新，不打算说如何“反西部”，那还说什么呢？说说电影里的女人吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.克劳迪娅（Claudia）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这位从没有露过面的女人，却有着举足轻重的地位。电影的片头和片尾字幕都给了她。&lt;/p&gt;

&lt;p&gt;片头字幕：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;She was a comely young woman&lt;br /&gt;
and not without prospects.&lt;br /&gt;
Therefore it was heartbreaking&lt;br /&gt;
to her mother that she would&lt;br /&gt;
enter into marriage with&lt;br /&gt;
William Munny,a known thief&lt;br /&gt;
and murderer,a man of
notoriously vicious and
intemperate disposition.&lt;br /&gt;
When she died,it was not at&lt;br /&gt;
his hands as her mother might&lt;br /&gt;
have expected,but of smallpox.&lt;br /&gt;
That was 1878.&lt;br /&gt;
她是一名美丽的女子&lt;br /&gt;
原本应该前途远大&lt;br /&gt;
所以当她下嫁威廉莫尼时&lt;br /&gt;
她母亲才会为之心碎&lt;br /&gt;
因为威廉是个杀人放火&lt;br /&gt;
无恶不做的恶徒&lt;br /&gt;
而且酗酒成性&lt;br /&gt;
不过她的死却不是威廉造成的&lt;br /&gt;
而是不幸罹患天花&lt;br /&gt;
时值1878年&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;片尾字幕：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some years later,Mrs.Ansonia&lt;br /&gt;
Feathers made the arduous&lt;br /&gt;
journey to Hodgeman County&lt;br /&gt;
to visit the last resting place&lt;br /&gt;
of her only dauthter.&lt;br /&gt;
William Munny had long since&lt;br /&gt;
disappeared with the children&amp;hellip;&lt;br /&gt;
some said to San Francisco&lt;br /&gt;
where it was rumored he
prospered in dry goods.&lt;br /&gt;
And there was nothing on the&lt;br /&gt;
marker to explain to&lt;br /&gt;
Mrs. Feathers why her only&lt;br /&gt;
dauthter had married a
known thief and murderer,&lt;br /&gt;
a man of notoriously vicio&lt;br /&gt;
us and intemperate disposition.&lt;br /&gt;
几年后&lt;br /&gt;
安梭妮雅费瑟太太到霍曼郡&lt;br /&gt;
探视独女的长眠之地&lt;br /&gt;
但威廉莫尼&lt;br /&gt;
早就带着孩子们消失无踪&lt;br /&gt;
有人说他们到了旧金山&lt;br /&gt;
靠着卖干货而发了财&lt;br /&gt;
但费瑟太太仍不明白&lt;br /&gt;
她的独生女为什么会下嫁一个&lt;br /&gt;
无恶不做的杀手&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;值得注意的是，在出现这些字幕的时候，画面和音乐都是整部电影里最唯美最温情的。开头和结尾画面几乎一模一样，只是第一个场面是当克劳迪娅死后，William在为其挖掘墓穴。第二个场面则是三年后当William完成了电影里的主体故事后立在墓前，缓缓摘下了帽子，不知是在思念还是在忏悔。晾在绳子上的衣服随风飘动。之后画面又发生了变化，衣服没了，人也走了，只有一座孤零零的墓碑和一颗树，此时William已经带着两个孩子销声匿迹。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/unforgiven-1.jpg&#34; alt=&#34;unforgiven-1.jpg&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/unforgiven-2.jpg&#34; alt=&#34;unforgiven-2.jpg&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/unforgiven-3.jpg&#34; alt=&#34;unforgiven-3.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;克劳迪娅究竟是一个什么样的女人，愿意嫁给William这个臭名昭著的匪徒呢？留给我们的想象空间太大了。William在认识克劳迪娅之前是个什么样的人？一言蔽之就是“恶”。如同他自己所说，“I&amp;rsquo;ve killed women and children.I killed just about everything that walked or crawled at one time or another.(我杀过女人和小孩，能走得能爬的我都杀过）”。那时的William，每天都活在酒精和杀戮中,当片中一名妓女带来了Ned的死讯时，他又重新拿起了酒瓶，使我们知道杀戮又要开始的同时，也多少反映了当年的William是个什么样子。而和克劳迪娅结婚后，他有11年没有开过枪，没有喝过酒，也没有碰过别的女人。她肯定是一个天使般的女人，才能将一个恶魔变成凡人。但是，年轻时的William在酗酒和杀人时，必然也保留着可贵的闪光的一面，正是这些闪光的地方吸引着克劳迪娅，让她无视一切，甘愿与他隐居在那个小屋里直至死去。没有写出来的故事，往往是最美的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.莎莉(Sally)&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/unforgiven-4.jpg&#34; alt=&#34;unforgiven-4.jpg&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/unforgiven-5.jpg&#34; alt=&#34;unforgiven-5.jpg&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/unforgiven-6.jpg&#34; alt=&#34;unforgiven-6.jpg&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/unforgiven-7.jpg&#34; alt=&#34;unforgiven-7.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个印第安女人在片中没有台词，只有几个眼神，却足以给人留下深刻的印象。当她弯腰在小木屋边劳作时，被一串马蹄声惊起。她已经和Ned这样过着与世隔绝的日子很多年了，一切外来者都让她恐惧。Ned当年是William的伙伴，当年Ned让她担惊受怕的日子必定在她心里留下极深的阴影，所以她很满足现在的这种宁静，害怕这种宁静被突然打破。&lt;/p&gt;

&lt;p&gt;当William向她打招呼时，她默然的斜视了William一眼。应该说当发现来访者是William时，她心里不详的预兆就加重了，这点也能反映出当年William的恶以及当年她和Ned的颠沛流离。两个男人进屋后，她来到William的马前，摸了下马背上的枪，当年的生活仿佛重新回到她面前，她恨这些能带来死亡的东西，她不想Ned也这么死去。&lt;/p&gt;

&lt;p&gt;最后Ned拿定主意和William一起去干这一票，两人骑马渐渐远去时，她久久望着Ned的背影不愿离去。眼神里满是无奈、沧桑，应该也有些绝望。她害怕Ned又回到以前，更重要的是，她不知道Ned这一去能不能活着回来。一个印第安女人和一个黑人，在那个年代就这么相依为命，但一切又都不在她的掌控之中。当这个男人离去后，她的生活不会有任何色彩，心里也不再有任何期盼。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.妓女&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;妓女发出的赏金是整部电影情节的起因。妓女在这个小镇上没有地位，仅仅是商品。当被毁容后，她们能获得的补偿仅仅是凶手可能会被鞭打一顿，而事实上她们连这点补偿都没有。在老板的眼里，她们只是橱窗里的货物，如果凶手能赔偿他几匹马，那么连鞭打的惩罚都可以免去。&lt;/p&gt;

&lt;p&gt;其实小镇的治安在小比尔警长的强力管辖之下，不可谓不好，小比尔其实是个好警长，他极力维护小镇的安宁，甚至将自己的生死都置之度外。但小比尔能解决的只是狠狠的将那些外来的匪徒打爆，他不能解决，也看不到小镇社会内部的不公。&lt;/p&gt;

&lt;p&gt;在这种环境下她们爆发了，她们反抗的其实不是那两个牛仔，而是整个社会地位的不公。当作为人的尊严被随意践踏时，她们不知道自己真正的敌人是谁，她们只有把一切愤怒都发泄在那两个牛仔身上，她们能做的也就是让他们死，虽然他们本罪不至死。她们是勇敢的，团结的，值得敬佩。底层的愤怒一旦爆发，就是没有理性的，毁灭的，这大概就是一切革命的特点，也是整个人类社会循环往复的悲剧。&lt;/p&gt;

&lt;p&gt;总而言之，这个电影虽然跟所有的西部片一样，女人都是配角，但这个电影里面所有的女人，包括没有出现的，都十分值得回味。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>杀死这个爱尔兰人</title>
      <link>https://pureage.info/2012/05/30/77.html</link>
      <pubDate>Wed, 30 May 2012 13:33:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/05/30/77.html</guid>
      
        <description>&lt;p&gt;影片讲述的是丹尼·格林(Danny Greene)传奇的一生，是近年来难得一见的优秀黑帮电影,演员音乐都很好。可是,本来是冲着方·基默(Val Kilmer)去的，结果才发现原来他是打酱油的。&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/kill-the-irish.jpg&#34; alt=&#34;kill-the-irish.jpg&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>“透明”与“非透明”之间的歧义</title>
      <link>https://pureage.info/2012/05/25/75.html</link>
      <pubDate>Fri, 25 May 2012 13:35:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/05/25/75.html</guid>
      
        <description>&lt;p&gt;在准备答辩之余,翻了翻以前看过的书。发现了一些想起来会会心一笑的地方。&lt;/p&gt;

&lt;p&gt;比如，在《用TCP/IP进行网际互连》第一卷HTTP的那一章，对代理服务器有如下阐述：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有两种形式的代理服务器存在：非透明的(nontransparent)和透明的（transparent)。正如它们的名字所暗示的，非透明服务器对用户来说是可见的，也就是说，用户必须配置浏览器来联络一个代理，而不是与原始资源所在的服务器联络。透明代理不需要对浏览器的配置进行任何改动。事实上，透明代理会检查所有通过代理的TCP连接，并拦截到达80端口的任何连接。无论是哪一种情况，代理都会将万维网页面进行缓存，然后从缓存中取出页面，以回答后来的请求。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实这段话本来很浅显易懂，本意就是说代理服务器作为浏览器和目标服务器的中介，根据用户是否可以察觉或者是否必须显式配置可以将其分为两类：透明的和非透明的。&lt;/p&gt;

&lt;p&gt;但当年读到这里时，总会觉得很别扭。总要停下来想想到底是“透明的”表示对用户可见还是“非透明的”表示对用户可见，以及为什么要这么命名。因为书中的“透明的”和我意识中的“透明的”意思刚好相反，在书中，“透明的”就好像是空气，所以用户看不见；而我看到“透明的”总会本能的想起一句“整个选举过程公开、透明&amp;hellip;”，在这个语境里，“透明”的意思（注意，这里说的是本意，不涉及实际情况如何）刚好是整个选举过程是对人民可见的，所以潜意识里我就将“透明的”和“可见”绑定在一起了。进而导致每次无论我把HTTP看的多么顺畅，到“透明代理”这里总会卡一下，好奇为什么要把”对用户可见“说成是非透明的。忍俊不禁啊。&lt;/p&gt;

&lt;p&gt;其实两者都没错，关键是“可见”这个词是针对谁而言。”透明“或”不透明“一般是用来修饰一个介质的，如果我们把这个介质比作一个箱子的话，那么对选举而言，“可见”与否针对的是这个箱子里面的东西，如果是透明的，那么里面的东西自然就会被大家看到，如果箱子是不透明的，那么就是所谓的“黑箱操作”了；对代理服务器而言，“可见”与否针对的是这个箱子本身而不是箱子里面的东西（箱子里面的东西当然就是目标服务器了），如果是这个箱子是透明的，那么这个箱子对我们就是不可见的，如果它是非透明的，自然这个箱子就是可见的。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>The Monkey Trap：猴子陷阱</title>
      <link>https://pureage.info/2012/05/24/74.html</link>
      <pubDate>Thu, 24 May 2012 06:32:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/05/24/74.html</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;Upon trying to tackle their increasing population of monkey&amp;rsquo;s, villagers had placed rice grains inside the hollows of coconuts which were tethered to a chain. The desired result was that the monkeys would then trap themselves, and the villagers would then dispose of the monkeys.&lt;/p&gt;

&lt;p&gt;In essence, the monkey&amp;rsquo;s would grab the grains of rice, and upon trying to remove their hand from the coconut hole, the monkey&amp;rsquo;s would subsequently become trapped by their own fist. Since the hole was just big enough so that the monkey can put his hand in, and too small for his fist to come out after it has grabbed the rice, the monkey&amp;rsquo;s ended up trapping themselves. Rather than letting the grains of rice go and escaping, they chose instead the rice to their own peril.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;道理是好的,如果是企业培训,则是教育人们不要仅仅被眼前的蝇头小利蒙蔽了双眼,如果是大师讲禅,则是告诉人们要放下贪婪,有舍才有得。&lt;/p&gt;

&lt;p&gt;但我对这个故事本身的真实性表示严重怀疑，猴子在我心中的形象一直是很聪明的，google了半天，都没找到一点有说服力的材料。&lt;/p&gt;

&lt;p&gt;先姑且认为这个只是一个寓言吧，类似于“温水煮青蛙”一样广为流传但真实性不能保证的寓言。很多书中都喜欢使用这类的东西，作为辅助其论点的依据。读到这种书时本来是如沐春风，但是一看到这样的段落就会觉得很恶心。本来作者的论点用生活中的例子都可以证明，却非得来这么一下，简直得不偿失。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>在枯燥中寻找乐趣</title>
      <link>https://pureage.info/2012/05/22/73.html</link>
      <pubDate>Tue, 22 May 2012 07:55:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/05/22/73.html</guid>
      
        <description>&lt;p&gt;枯燥的工作是一件让人很头疼的事。而对于一个学生而言，很少有事情会比写毕业论文更枯燥的了，毕业设计中最有意思的事情在于设计的过程，而将其整理为符合当今高校要求的论文则实在毫无乐趣可言。而且，写完论文还不是尽头，比这更枯燥的是要在准备答辩前论文内容再度整理成PPT以供答辩使用。&lt;/p&gt;

&lt;p&gt;在这个时间段，你其实没有什么太大的工作上的压力，压力仅仅来自心理上对答辩的焦虑。焦虑之余，你还会懊恼：时间就这么白白的过去了，这么些时间我本应该可以去学更多东西。&lt;/p&gt;

&lt;p&gt;但是，换个心态，也许过程和结果都会完全不一样。&lt;/p&gt;

&lt;p&gt;首先，写论文、准备PPT这个过程是无法避免的，那么抱怨也没有用。在实际的工作中，即时是个程序员，也不可能每天都在搞有创造性的工作，甚至可能大部分时间都在做整理文档、写测试用例之类的事情。既然抱怨没有用，那么就不要去抱怨，抱怨自己的工作还不如抱怨政府来的有意义。&lt;/p&gt;

&lt;p&gt;其次，当自己的心态平和，不再对工作本身感到一种生理上的反感了后，再积极思考这个工作的意义所在。就写论文和写PPT这个事情来说，当然是有很积极的意义。排除掉一些形式上的、恶心的渣渣后，论文是对自己工作的书面反映，PPT是作为向观众陈述自己的工作的工具，我想如果能够明确这两者的意义，无论过程多么煎熬，结果都是好的。&lt;/p&gt;

&lt;p&gt;再次，找到工作本身的意义后，如果可能的话，尽量让自己有更多收获。写论文和PPT真的很煎熬吗？作为马上要准备毕业的学生，我看到身边有太多的同学在写论文前不会先在word里设置好各种样式而在后期调整中焦头烂额。其实，我本来也不会，但在下笔之前先花了点时间看了下相关内容，在后期可以毫不费力的完成对论文的各种调整。做PPT也是如此，如何将自己的PPT作的亮点突出是一个充满技术性和艺术性的话题，而不是还未动笔就到网上搜集现成的模板来套用。《PPT演示之道》是本好书，即时对于论文答辩的PPT来说，并没有观赏性的要求，但在翻阅这本书时仍然会对自己的审美水平有些提高。好的PPT永远是形式服务于内容，设计服务于内容，理解、构思、制作缺一不可，而不是简单的进行字体变换和动画效果叠加。&lt;/p&gt;

&lt;p&gt;想通这些问题后，我发现写word和制作PPT其实是一件很享受的事情。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>有好的长文可读,真好</title>
      <link>https://pureage.info/2012/05/18/72.html</link>
      <pubDate>Fri, 18 May 2012 07:46:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/05/18/72.html</guid>
      
        <description>&lt;p&gt;昨晚睡觉前看完了乐嘉的最新博文:《写给10岁的女儿》，抱着分享的的态度，今天把这篇文章贴在了学校论坛的情感专区。少有回帖，回帖的百分之九十是表示文章太长，看不下去。如“懒得看，太长了，我向来没有 人的情感能完善到能解决所有的问题”（念着不通顺吧，原话就是这样）、“太长了，更像是出版物”、“太长，更像是写给观众看的”（说实话，这句没看明白）等等。&lt;/p&gt;

&lt;p&gt;当然，并不全是此类留言。也有极少数留言表明这些同学是看完了这篇文章的，如“不错。。。”、“我觉得 我们父母心中也有很多话语想跟我们说，只是不知道应该怎样说吧，也许他们说的也不一定是对的”、“看完 了，写得不错”等等。&lt;/p&gt;

&lt;p&gt;在这里，我没有任何指责的意思，其实看帖回帖、特别是看长帖回长帖是很花时间的。将心比心，对于一些我 不感兴趣的文章，我也不会把它看完。但是确实说明了一个现象，现在愿意看长文的人真是越来越少了，包括 我在内。&lt;/p&gt;

&lt;p&gt;说出这个结论之前，我还犹豫了一下，是不是因为大家都很忙，如果我匆忙得出这个结论是不合适的。于是我 又点开了论坛的灌水区，依然一如既往的火爆。水区的帖子无非就是“爆PP，求打分”、“高福帅和屌丝”之 类的话题，帖子的正文基本一句话，回帖内容基本两个字“看看”、“撸过”、“水水”等，但参与这种回帖 的人数众多。尤其在处女情节这类月经帖子（所谓月经帖，指的是这种帖子每个月会来一次，偶尔会有变成“ 日经帖”的趋势）中，表现得更是淋漓尽致。&lt;/p&gt;

&lt;p&gt;不仅是愿意看长文的少了，愿意写长文的也少了，虽然目前我还不能确定究竟是因为愿意看长文的人少了，导 致愿意写长文的少了，还是因为愿意写长文的少了，所以愿意看长文的人也少了，或者这两者根本没有什么关 系。自从有了微博，有了企鹅的说说，似乎人们更愿意将自己的情感浓缩到一句话中，但我很难看出“今天天 气真热&amp;hellip;”、“唉&amp;hellip;”这种碎碎念浓缩了什么。&lt;/p&gt;

&lt;p&gt;曾经我也会在企鹅的说说上偶尔碎碎念，但现在，看着我google reader里常常的订阅列表，我想说，有好的长文可读的日子，真好。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>似水流年</title>
      <link>https://pureage.info/2012/05/14/71.html</link>
      <pubDate>Mon, 14 May 2012 01:59:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/05/14/71.html</guid>
      
        <description>&lt;h2 id=&#34;节选一&#34;&gt;节选一&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;在似水流年里，有件事叫我日夜不安。在此之前首先要解释一下什么叫似水流年。普鲁斯特写了一本书，谈到自己身上发生过的来。这些事看起来就如一个人中了邪躺在河底，眼看潺潺流水，粼粼流光，落叶，浮木，空玻璃瓶，一样一样从身上流过去。这个书名怎么译，翻译家大费周章。最近的译法是追忆似水年华。听上去普鲁斯特写书时已经死了多时，又诈了尸。而且这也不好念。&lt;/p&gt;

&lt;p&gt;照我看普鲁斯持的书，译作似水流年就对了。这是个好名字。现在这名字没主，我先要了，将来普鲁斯特来要，我再还给他，我尊敬死掉的老前辈。&lt;/p&gt;

&lt;p&gt;似水流年是一个人所有的一切，只有这个东西，才真正归你所有。其余的一切，都是片刻的欢娱和不幸，转眼间就已跑到那似水流年里去了。我所认识的人，都不珍视自己的似水流年。他们甚至不知道，自己还有这么一件东西，所以一个个像丢了魂一样。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;节选二&#34;&gt;节选二&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;流年似水，日月如梭。很多事情已经过去了。在七三年元旦回首六七年底，很多事情已经发生，还有一些事将要发生。无论未发生和己发生的事，我都没有说得很清楚。这是因为，在前面的叙述中，略去一条重要线索。这就是在我身上发生了很多变化。有些变化已经完成，有些变化正在发生。前面说过，刘老先生告诉我贺先生的遗言，我听了当时很不以为然。但那天夜里我和小转铃干到一半停下来，走到窗前，想起这话来，觉得很惨。看到外面的星光，想起他脑子前面的烛火，也觉得很惨。刘老先生死了，也很惨。对这些很惨的事，我一点办法也没有，所以觉得很惨。和小转铃说起这些事，她哭了，我也想哭。这是因为，在横死面前无动于衷，不是我的本性。&lt;/p&gt;

&lt;p&gt;我说过，在似水流年里，有一些事叫我日夜不安。就是这些事：贺先生死了，死时直挺挺。刘老先生死了，死前想吃一只鸭。我在美国时，我爸爸也死了，死在了书桌上，当时他在写一封信，要和我讨论相对论。虽然死法各异，但每个人身上都有足以让他们再活下去的能量。我真希望他们得到延长生命的机会，继续活下去。我自己也再不想掏出肠子挂在别人脖子上。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>风雨中，倒掉了一排车</title>
      <link>https://pureage.info/2012/05/13/70.html</link>
      <pubDate>Sun, 13 May 2012 11:30:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/05/13/70.html</guid>
      
        <description>&lt;p&gt;风雨中&lt;br /&gt;
倒掉了一排车&lt;br /&gt;
有人说&lt;br /&gt;
这是外力的暴行&lt;br /&gt;
也有人说&lt;br /&gt;
这是内力的反应&lt;br /&gt;
孰重孰轻&lt;br /&gt;
而我在想&lt;br /&gt;
更适合回答这个问题的&lt;br /&gt;
是物理学家&lt;br /&gt;
还是&lt;br /&gt;
历史学家&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/bikes-in-the-rain.jpg&#34; alt=&#34;bikes-in-the-rain.jpg&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>他人的足迹</title>
      <link>https://pureage.info/2012/05/11/68.html</link>
      <pubDate>Fri, 11 May 2012 02:32:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/05/11/68.html</guid>
      
        <description>&lt;p&gt;最近发现了一个个人网站，在路上(www.zailushang.com)，是很少见的纯粹的个人网站了。&lt;/p&gt;

&lt;p&gt;这里记录了他1998年到2008年的行程，这里（是他的最新行程更新情况），这里记录了他到过的地方。现在还保持这种简洁风格的个人网站，真是太少了，让人眼前一亮。&lt;/p&gt;

&lt;p&gt;那些时间和足迹的纪录，让人顿生感动。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>热烈庆祝自己成功逃离人人网三年有余</title>
      <link>https://pureage.info/2012/05/10/67.html</link>
      <pubDate>Thu, 10 May 2012 01:45:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/05/10/67.html</guid>
      
        <description>&lt;p&gt;粗略算来,从把校内网的帐号注销到现在,已经过去三年多了，甚至一度我都不知道校内网已更名为人人网。&lt;/p&gt;

&lt;p&gt;其实远离人人网并不是对它有多么不满意，曾经我也喜欢疯狂的在上面刷新页面，观看同学们的各种分享，虚荣心来了的时候也会 写几篇自以为文艺实质很二逼的日志，然后神经质似的刷新来访列表，看到有评论来了心里也挺美滋滋的。有一段时间疯魔到了每 次开电脑第一件事就是打开网址收藏夹里的校内主页。渐渐的，我发现自己是被它给绑架了，于是在某天一咬牙将所有的日志、留言都删掉，然后注销了帐号，直到今天。&lt;/p&gt;

&lt;p&gt;其实，现在想想，当你沉迷一个东西，然后在某个阶段顿悟，狠狠的骂它绑架了你，这个逻辑很强盗。在我们一路走来的这么多年 里，在每个阶段总会有一件或几件事物非常流行，让很多人沉迷其中不能自拔。就像小时候的游戏厅，初中时的古惑仔，高中时的 传奇。不管校内出现不出现，在大学那个带着些空虚的时间里，总有让你为之着迷的东西。当我们沉迷于某个事物，然后在某个时 刻觉醒了，然后怒骂其绑架了自己并决绝而去的做法实质是在承认自己内心的软弱。&lt;/p&gt;

&lt;p&gt;那么，三年过去了，现在思想更成熟了，知道事物的好坏作用更多的在于自己了，我会不会把自己的时间理智的分配在上面呢？我 的答案仍然是不会。为什么呢？&lt;/p&gt;

&lt;p&gt;校内网当年吸引我让我驻足其中的原因无非是其强大的“找人”功能，通过社交网络，这些那些高中、初中甚至小学的同学都能彼 此联系起来，看到那些仍然熟悉或已经不熟悉的面孔我更多的是在回忆过去的一些温馨和美好，当然时间是个奇妙的东西，即使当 年你过得再苦逼，若干年后回忆起来仍会觉得很美好，应该说人的大脑是个奇妙的东西。对于一个刚进入大学没多久，新的人际关 系还没打开，新的生活还没完全适应的人的来说，这种体验无疑是非常棒的。&lt;/p&gt;

&lt;p&gt;“找人”只是校内网吸引用户的第一步。慢慢的你会发现，你心中的“女神”A总在在发些状态或者日志，引你流连忘返；某天有个 美女来访问你的页面了，让你不忍不去回访；同学B每天都会发现一些搞笑的视频让我笑破肚子；同学C则经常会找来一些类似 于“80后的一定知道这些”这种主体的视频或文章，让你不知不觉有想流泪的冲动；同学D今天告诉你某个突然窜红的E同学的八卦 新闻，然后你也毫不犹豫的加入了围观其主页的大军；今天你写了一篇日志，好几位同学都来留言，“那个时候真美好&amp;hellip;”让你顿 觉知音可寻；如此等等，不知不觉你就深陷其中了。&lt;/p&gt;

&lt;p&gt;但是，所有这种SNS网站对“社交”并无多大帮助。慢慢的你也会发现，你心中的“女神”A发的那些状态或日志，太矫情太做作,不 知不觉就看烦了；某天来访问你页面的美女原来只是跟你一样寂寞空虚冷；同学B每天发的那些搞笑视频都是一个套路，看多了也就 那样；同学C的那些怀旧文在校内中横行肆虐到了令人发指的地步，怀旧这种东西，偶尔搞一把就搞了，天天怀那就不旧了，不旧就 没必要怀了；“奇葩”同学E曾出不穷，慢慢见怪不怪了，更重要的是围观别人的生活并不会真正给自己带来多少乐趣；你今天写了 篇日志，同学们纷纷留言“那时候真美好&amp;hellip;”，你很兴奋和感动，可是你又发现当你们除了“那时候&amp;hellip;”之外简直无话可说，知 音似乎仍然遥不可寻；如此等等，不知不觉你会求解脱了,只是这个不知不觉可能意味着几年的时间。&lt;/p&gt;

&lt;p&gt;除了校内，我甚至偏激的认为一切SNS、即时通讯工具等都丝毫不能改善人与人之间的关系，哪怕它们让两个远在天边的人之间的联系变得触手可得。看 看你的QQ，你是否经常隐身呢？你的好友是否大部分都在隐身呢？那些没有隐身的好友你们是否能说上话呢？你有多少兴趣去了解 每天都在空间里频繁刷新状态的同学的学习生活情况？ 事实上和你保持联系且还有话说得的只有那么几个人，而且即使没有QQ、校 内等，你们还是会通过各种方法保持联系。有人问，你那么不喜欢QQ,那你为什么还登呢？我想很多是不得不登陆的，就我个人而言 ，QQ对我唯一的黏性在于班级的各种通知都在上面发布。QQ漂流瓶、微信等等本来充满了各种牛逼创意的产品，将网络时代人们内 心的空虚彰显甚至放大到了极致。微信如今甚至成为约炮的代名词，实在让人汗颜。不过话说回来，能排遣人们的各种空虚寂寞， 也许本就是这些产品的价值所在。&lt;/p&gt;

&lt;p&gt;总之，三年过去了，我觉得自己逃离校内的举动很明智。远离它能给自己带来多少好处，无须多言，谁逃谁知道！&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>牛屎山的传说</title>
      <link>https://pureage.info/2012/04/29/66.html</link>
      <pubDate>Sun, 29 Apr 2012 08:45:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/04/29/66.html</guid>
      
        <description>&lt;p&gt;这是昨晚做的一个梦，趁还记得一点，记录一下。&lt;/p&gt;

&lt;p&gt;风平浪静的武林中开始流传一个故事：在一个遥远的地方，有座高耸入云的山，叫牛屎山，在这座山里藏着一个关于天下第一的秘密。&lt;/p&gt;

&lt;p&gt;其实这座山已经存在了好多年了，牛屎山这个名字不知从哪个年代就已经开始流传了，人们都觉得是因为它外形像一坨巨大的牛屎 而得名，但几乎所有的山看上去都像一坨牛屎啊。武林中人都忙着做生意泡妓院，搞学术的也都忙着申请专利，虎拳、螳螂拳等所 有与动物相关的专利都已经被申请了，现在抢得最热的专利是蟑螂拳。总而言之就是大家的时间都很宝贵，所以没有人去深究牛屎 山为什么叫牛屎山以及别的更像牛屎的山为什么不叫牛屎山。&lt;/p&gt;

&lt;p&gt;直到有一天，人们开始流传牛屎山不简单。一个穿着奇装异服的人到处散播，牛屎山之所以叫牛屎山，是因为这座山牛的要屎。这 位自称是从公元2012年穿越回来的人说，他是来自未来的地星人，所以懂的比较多。有人问，什么叫牛的要屎？地球人说，哎呀， 就是牛的要死了！人们还是不懂，为什么牛的要死就是牛的要屎，也不明白牛的要死是啥意思。于是接着不断有人问，是我们的牛 都要死了吗？地球人最后不耐烦了，用通俗的语言告诉大家：“牛的要屎就是说这座山无与匹敌，你们是武林时代，无与匹敌就是 意味着天下第一，这座山就是天下第一山。”&lt;/p&gt;

&lt;p&gt;开始并没有多少人相信，人们更愿意相信他是个疯子。可是事情慢慢开始起着变化。武林中人这些年由于忙于挣钱和申请专利，武 功都落下了，其实大家都知道不管是蟑螂拳还是大象拳，除了起手势稍有差别之外，打起来都一样，靠的都是速度和力量。每个门 派的弟子都对这种现状不满，听说祖师爷一代打架都是用空气波，也就是内功的，到我们这为什么都靠蛮力了呢。这些弟子带着这 些问题去问他们的师父时，总会受到师父的处罚，当然不同门派的处罚是不一样的了，但训斥的话语都大同小异，比如：“唉，现 在的年轻人，太浮躁，为师当年为了揣摩蛆拳的神韵，曾在茅房不吃不喝一个星期，仔细观察蛆的一举一动，才有了如今的大家风 范。”&lt;/p&gt;

&lt;p&gt;但是师父们的话并没有起到多大作用，随着牛屎山的传说越来越风行，大家开始普遍相信牛屎山有着关于武林前世今生的终极秘密 。人们开始蠢蠢欲动，江湖中有了风起云涌的兆头，更有童谣曰：“牛屎，在手，天下，我有！”各位掌门人虽然平日都对自己的 拳法甚为满意，但几乎同时都做出了各自相同的决定,“凡我派弟子，须齐心协力，拿下牛屎山，光复我门荣耀！”&lt;/p&gt;

&lt;p&gt;冲锋的号角吹响了。凡武林中人，都开始往牛屎山进发。&lt;/p&gt;

&lt;p&gt;这天，各路人马齐聚牛屎山脚下，众人仰望山顶，顿有天地幽幽怆然泪下之感。于是乎大家更坚定了自己来到牛屎山的决定是对的 。接下来的故事就很简单了，不知是谁先对一位异派人士背后捅了一刀子，于是大家都拿出了早已准备好的刀子，大家这时候都发 现，还是刀子管用。最早死去的是那些师父们，因为他们那大腕十足的起手势毫无用武之地，那些异派的小青年们挥起砍刀来毫无 章法，自然无法防守。师父死了之后，各派群龙无首，渐渐的也不分门派了，见人就砍。牛屎山脚下血雨腥风，大家都怀着一个信 念，杀了其他人，牛屎山就是我的了，我就是天下第一了。&lt;/p&gt;

&lt;p&gt;我自幼胆小怕事，看到明晃晃的刀子过来，赶紧躺在地上装死。慢慢的，地上的尸体越来越多，血水慢慢淹过了我的鼻子。情急之 下，我拔起插在地上的一根不知哪个门派的旗竿，把竹竿的底端塞进了嘴里。竹竿是中空的，于是我得以继续潜血，借助竹竿呼吸 。&lt;/p&gt;

&lt;p&gt;不知过了多久，我的双手已经麻木了，竹竿在嘴里已经摇摇欲坠。站起来透口气再潜吧，于是我站了起来。这时血位已经到了我的 腰部。我站起来之后却惊奇的发现，周围已经没有活人了。大家都死了，连哀号声都没有，只有牛屎山间传来阵阵风声。&lt;/p&gt;

&lt;p&gt;我觉得我必须离开这血泊，因为我已经开始要呕吐了。由于血泊面积很大，我现在唯一的出路只有往牛屎山上走。就这样，我开始 爬山了。&lt;/p&gt;

&lt;p&gt;牛屎山很高，不知道爬了多久，也不知道爬到哪了。忽然发现眼前开始出现一列石阶，石阶两边整整齐齐的堆满了牛屎。由于我脸 上的血迹已经开始凝固，鼻孔处的血块已经让我呼吸困难了，所以面对这些牛屎，我居然感觉不到一点臭味。 于是我顺着石阶往上爬，一路上与我作伴的，只有路两旁一坨一坨的牛屎。连鸟都没有一只。&lt;/p&gt;

&lt;p&gt;终于，石阶不再向上延伸。石阶的尽头是一面石墙。我到山顶了。&lt;/p&gt;

&lt;p&gt;石墙上隐隐有字，我走上前去，只见上面写着一段话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;自我练成天下第一以来，武林中人不以为惧，反而皆来挑战。起初来的都是十恶不赦的恶人，如雁荡十八寇，飞云十三鹰，西凉三 鬼等。孰料恶人都死于我剑下后，一些早已销声匿迹多年的隐士也找上门来，如哼哈兄弟，铁剑寒梅夫妇等，皆以死相拼。不得已 杀之后，各大门派中德高望重的掌门人都陆续找上门来，连少林空色大师，武当无根道长也赫然在列。我愈感疲倦，江湖腥风血雨 不知何时才尽。沉思三年，恍然悟道，如要江湖平安无事，只有将这天下第一四字从人们心中剜去。于是我花十年光阴，集天下之 牛屎余此山，是为告诫后人，天下第一，不过牛粪尔。也不知是武林中习武之人以皆死去，还是牛粪恶臭扑鼻，吾总算安享十年平 静。特书与此，以待有缘人。
&amp;ndash;独孤求败&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;做到这里，梦就醒了，骂了句，“该死的现代人”，继续翻身睡倒。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>A good place to memorize English words</title>
      <link>https://pureage.info/2012/04/22/64.html</link>
      <pubDate>Sun, 22 Apr 2012 02:32:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/04/22/64.html</guid>
      
        <description>&lt;p&gt;I found a good place to memorize English words:ShanBay&lt;/p&gt;

&lt;p&gt;There are 3 features fit me well.&lt;/p&gt;

&lt;p&gt;Firstly,it has many word books for different kinds of people and you can chose one or severl books from it,for example,a GRE word book.This is nearly all you have to do.Eveyday when you log in,it will automatically push some new words to you,and throuth reading,writing,listing,and guessing,you can learn them well.&lt;br /&gt;
Secondly,you can build your own word storage. As for me,I am a programmer,so evry day i have to read more or less some english material.When i see a new IT word,I can add it to my word storage.I think this function will also help you,so long as you have to read english material.&lt;/p&gt;

&lt;p&gt;I guess you might think this function sounds normal.What make it fantastic is that the words you add in to your storage can also be pushed to you ,which force you to memorize them.&lt;/p&gt;

&lt;p&gt;Thirdly,it follows some rule of memory. As we all know,having memorized some new words today does not mean you can remember them tomorrow,as Ebbinghaus Forgetting Curve discribes in detail. Every day when you finish the learning of the new words,you can meet them again and again in the following days.When you believe you could not forget them anymore,you can mark them,and they will not be pushed to you anymore ,but still in your word storage and you can revise them any time you like .&lt;/p&gt;

&lt;p&gt;We Chinese says,a workman must first sharpen his tools if he is to do his work well.However,the most important thing is always the perseverance.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>那些关于饥饿的往事和今事</title>
      <link>https://pureage.info/2012/04/20/63.html</link>
      <pubDate>Fri, 20 Apr 2012 15:53:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/04/20/63.html</guid>
      
        <description>&lt;h2 id=&#34;1-罗嗦一下&#34;&gt;1.罗嗦一下&lt;/h2&gt;

&lt;p&gt;今天老板过来给我们的论文签字。我和另外一位同学的论文题目做了较大改动,除了正常的签字外,还需要重新填写一份论文的开题报告和文献综述给老板签字。老板一周只来一次，甚至两周来一次，来了大家都是很给面子的，打dota的开始看 论文了，看NBA的打开了一份天线理论的pdf，我们两个则苦逼的埋头改开题报告。转眼间到了11：30，老师一如既往端坐不动，几位同学相互抛了个眼色，齐刷刷站起来，说：“ 老师，我们去吃饭了！”，然后就起身离开了实验室。我们两个改开题报告的还没改完，心想老师下午很早就要走，赶紧把开题报告弄起来好让他签字。于是我们俩继续奋起直 copy。&lt;/p&gt;

&lt;p&gt;到了一点多，老师开始起身收拾东西了，我心里一紧，不会现在就要走了吧。果然他拧起电脑包，一如既往的打了声招呼：“走喽！”，我们一如既往的应和道：“老师慢走啊 ，老师再见啊！”。&lt;/p&gt;

&lt;p&gt;老师刚关上门，教研室的气氛一如既往的变化了。该喘气的喘气，该咳嗽的咳嗽，该聊天的聊天，该看球的看球，该dota的dota。我和那位同学郁闷的说，要到下一周才能签字 了。然后我们继续各人干各人的事，到2点半，他说：“去吃饭吧！”，我才意识到原来我们还没吃午饭。心想没吃午饭多大个事，就说不去了，他一个人吃饭也觉得没意思，只好 坐下。&lt;/p&gt;

&lt;p&gt;于是我在电脑前开始看论文，看着看着觉得眼前发昏，反应逐渐迟钝起来。心想，中午没睡觉就是困啊，继续撑着。到了三点，感觉身体已经发软了，才意识到这不是困的，是 饿的，心里顿时好生奇怪，不就是没吃午饭么？等等，原来早饭也没吃。可是时间才三点，心想就熬到五点半再去吧。于是接下来的时间里，在朦胧发散的目光里，我好几次从电 脑屏幕中看到了大米饭，看到了面条,看到了以前饥饿的样子。&lt;/p&gt;

&lt;h2 id=&#34;2-爷爷&#34;&gt;2.爷爷&lt;/h2&gt;

&lt;p&gt;我在我父亲9岁时，我奶奶就去世了。我爷爷按照传统意义上的说法，是一个不务正业吊儿郎当的人，没个女人照顾家里，还带着两个儿子和几个女儿，却不好好挣工分，成天在 外面晃荡，可以说，爷爷在村子里的口碑不是很好。我对爷爷保留的记忆很少，只记得小时候经常和妹妹在他那里偷钱去买糖吃，吃到牙齿都烂了，想到这里总是很伤感，当时的 我肯定想不到，妹妹和爷爷都很快的离开了人世。&lt;/p&gt;

&lt;p&gt;爷爷应该是个脾气极其粗暴的人，虽然我不记得他是否打过我。四姑妈不知道多少次给我提起，当我刚晃晃悠悠学会走路时，有一次跑到灶屋（厨房）的煤堆里玩，把煤球弄碎 了，爷爷刚好在旁边，一把抄起我，抡起巴掌就开始揍我的屁股。这时四姑妈心疼了，把我抢了过来，训斥着爷爷:“你当是我们当小孩的时候随便打啊！..”，总之，在这次我不 记得的事件中，我被四姑妈“救”了下来，以后的记忆里直到我6岁时爷爷去世，爷爷都没有打过我。但四姑妈以后每次回忆起来，都会抑制不住的义愤填膺。因此，我在想，我爷 爷年轻时到底是个什么样的人呢，是不是像很多悲剧的家庭里的男人一样，外面喝的酩酊大醉，回到家抓住儿女就开始暴打呢？&lt;/p&gt;

&lt;p&gt;但父亲不同意这种说法。&lt;/p&gt;

&lt;p&gt;父亲每次回忆起爷爷，必然会提的是两件事。&lt;/p&gt;

&lt;p&gt;第一件是，在那个普遍贫穷的年代（父亲是1964年生，而最大的姑妈比父亲大了二十多岁），爷爷把7个女儿2个儿子都养的很好，每当说到这，父亲总是会自豪的说，“你看我 和你叔叔，还有你的几个姑妈，谁的体质很差了？你不知道我们年轻时力气有多大，虽然无权无势，村里有谁敢欺负？”他所说的养的好，是指爷爷经常捞鱼给他们吃。“他虽 然白天总在外面晃荡，晚上却经常带着一堆鱼回家”，父亲继续说。&lt;/p&gt;

&lt;p&gt;我一直无法在脑海里还原这个场景，也无法还原爷爷的形象。直到长大后，我才想，爷爷可能确实脾气暴躁，但也是一个很有头脑的人。姑妈们也经常说，“那个时候河里到处 都是鱼，我们吃不起饭，只能吃鱼，别人家却很少去捞鱼。”饿得只有鱼吃，恐怕是现在的我们很难想象的。&lt;/p&gt;

&lt;p&gt;于华的《兄弟》里有这么一段，在宋凡平被关在小黑屋里饱受折磨时，幼年的李光头饿得不行，就跑到河里捞鱼捕虾 ，每天总是收获不浅，原文如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;李光头和宋钢来到了河边，卷起裤管走进了小河，让河水在他们的膝盖下面荡漾。他们把竹篮倾斜着放到河水里，模仿着宋凡平在仓库前的动作，等待虾们自己游进竹篮。他们 在河水里站了整整一个下午，夏天的阳光晒出了他们满身的汗珠。他们惊奇地发现虾在河水里游动时是蹦蹦跳跳的，它们和摆着尾巴的鱼不一样，它们蹦蹦跳跳地游进了两个孩子 的竹篮，最多的一次有五只小虾。那一次两个孩子高兴地嗷嗷乱叫，随即他们又捂住了自己的嘴巴，他们发现河里的虾被吓跑了，他们只好换一个地方。到了晚霞出来的时候，两 个孩子坐在岸边的草地上数了数，才知道他们已经捕到了六十七只小虾了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我想爷爷也许这么多年一直被我们冤枉了。在那个苦难的年代里，他养活了6个女儿（我本有7个姑妈，但二姑妈在7、8岁的时候饿死了）和两个儿子，他白天一直在外面晃荡也 许只是在想办法怎么才能不让他们饿死。也许他已经看到了在生产队里是没有希望的，所以不惜忍受着村里人的长期的白眼。&lt;/p&gt;

&lt;p&gt;父亲经常提到爷爷的第二件事是，改革开放后，大批农民搭上南下的火车，去广州等地谋生。在父亲第一次离开家时，爷爷把他送到车站，说了一句，“人在外面，要眼 观六路，耳听八方&amp;hellip;&amp;hellip;”。到我高考完去哈尔滨上大学时，父亲不顾我的反对，坚持和我一起坐了40个小时的火车，把我送到了哈尔滨，到学校后的那个晚上，我们在校园里逛 了逛，他跟我说，“你爹爹（爷爷）年轻时就跟我说了这么一句话，我一直都记着，你也要记着，一个人在外面要眼观六路，耳听八方&amp;hellip;&amp;hellip;”&lt;/p&gt;

&lt;h2 id=&#34;3-父亲&#34;&gt;3.父亲&lt;/h2&gt;

&lt;p&gt;父亲回忆起爷爷的时候，总是提起有吃不完的鱼，并经常说起他年轻时怎么把村里比他大几岁的孩子按倒地上揍。我相信这都是事实，因为直到现在，父亲的体格都是村里的中 年男人里最强壮的。但我也相信，他所谓天天吃鱼的日子其实也并没有多长时间。&lt;/p&gt;

&lt;p&gt;父亲的学历是初中。在回忆过去时，父亲经常提到他们读书时的苦。那时学校食堂需要学生 把米和水放到饭盒里拿过去蒸，放学后再去食堂把饭盒拿出来（其实直到现在，也依然是这种方式），菜则需要学生自己从家里带。“那个时候家里没有菜”，父亲说，“我和几 个朋友就每天晚上跑到学校外面的农田里去拔别人家里的萝卜，第二天洗干净了加点盐就放到饭盒里拿到食堂去蒸”。我实在想象不出白盐水煮萝卜就饭吃是个什么味道。&lt;/p&gt;

&lt;p&gt;也许正是因为年轻时尝够了饿肚子和缺油水的苦，父亲养成了嗜油的习惯，一直到现在都如此。不管每顿饭吃得有多饱，但凡有点剩菜，他都不舍得浪费那些油水。&lt;/p&gt;

&lt;p&gt;在我念初中时，父亲觉得我正处于长身体的阶段，每个星期都给我做排骨汤，可我从小就受不了油腻的东西，每次都不想吃，但迫于父亲的压力，总得强忍着把它喝完。那时我 觉得这是最难熬的事之一了。记忆最深刻的一次是，我端着父亲递过来的排骨汤，执拗着不喝，父亲生气了，大概说了些回忆过去苦日子的话，说到动情处，让我觉得不把它喝了 实在是大逆不道，于是又一次咬牙都罐了下去，甚至都不知道是什么味道，只想快点熬过去。喝完之后，我就吐了。我歉疚的看着父亲，心里却幸灾乐祸着。长大后，每当父亲总 要强迫我做些什么事时，我总会拿出这个事情来辩解一下。&lt;/p&gt;

&lt;h2 id=&#34;4-我&#34;&gt;4.我&lt;/h2&gt;

&lt;p&gt;我小时候家里仍然没有脱贫，所以免不了会挨些饿，但当时年幼的我并没有意识到日子过得有多苦。父母告诉我，在我三四岁的时候，家里大米实在不够（其实农民自己种的粮食 肯定是够的，但那时要交提留，而且农民最主要的金钱收入就是卖粮食，所以剩下的就不多了），就经常做擀面条吃。我也记得那时候父亲在做饭的时候能用一根光滑的擀面杖把 一团面擀成圆圆的一大块，铺满了整个桌子，然后把它切成面条下锅煮，但我不记得我当时多讨厌吃面条。母亲说，因为那时候天天吃面条，以至于我一看到要吃面条就哭。我还 记得上学前班时，每天早上我都在灶屋里给妈妈往火灶里递草把子，等着饭熟吃着香喷喷的米饭，等着吃蒸完饭后锅底香喷喷的锅巴，等着喝锅巴熬成的锅巴粥。这里必须要提一 下，小时候的锅巴粥是如此的香，我养成了吃稀饭绝不吃菜的习惯，生怕破坏了粥的香味。有一次，母亲早上出去忙了，做饭做的比较晚，我就在灶屋里滩坐着，浑身无力，连话 都说不出来，母亲着实被吓坏了。&lt;/p&gt;

&lt;p&gt;上小学后，就再也没有因为吃不上饭而挨饿了，但我却将一饿就受不了的毛病保持了下来。当我真正感觉到饿时，总会感觉到浑身无力，度日如年。情绪低落时，会躺在床上一 直熬着，越饿就越没有力气，越没有力气就越不愿意费力爬起来，大脑也趋于一种半麻木的状态，无法说服自己赶紧填饱肚子。我甚至觉得我能自己把自己给活活饿死。&lt;/p&gt;

&lt;p&gt;不知道已故的爷爷若是看到我这副德性，会不会再次把我夹起来，抡圆了胳膊揍。我仿佛听到他在边打边骂着：“你这没用的东西！”&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Twenty years from now</title>
      <link>https://pureage.info/2012/04/19/62.html</link>
      <pubDate>Thu, 19 Apr 2012 01:52:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/04/19/62.html</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;Mark Twain:&lt;br /&gt;
Twenty years from now you will be more disappointed by the things you didn&amp;rsquo;t do than by the ones you did do. So throw off the bowlines. Sail away from the safe harbor. Catch the trade winds in your sails. Explore. Dream. Discover.&lt;/p&gt;

&lt;p&gt;20年后，让你觉得更失望的不是你做过的事情，而是你没有做过的事情。所以，解开帆索，从安全的港湾里扬帆出行吧。乘着信风，去探索，去梦想，去发现！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/little-duck.jpg&#34; alt=&#34;little-duck.jpg&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>日落黄沙(The Wild Bunch)</title>
      <link>https://pureage.info/2012/04/07/60.html</link>
      <pubDate>Sat, 07 Apr 2012 08:33:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/04/07/60.html</guid>
      
        <description>&lt;h1 id=&#34;1-关于杀戮&#34;&gt;1.关于杀戮&lt;/h1&gt;

&lt;p&gt;影片开头，匪徒们化装成军人，雄赳赳气昂昂的走进银行大门。一群小孩趴在地上，他们中有年龄大点的，有很小的，有男孩，有女孩。他们把一只蝎子放进了一堆蚂蚁中，看着这只蝎子被无数只黄里透红的蚂蚁慢慢吞噬，所有人的眼睛里闪烁着兴奋。最后，当蝎子差不多已经死去的时候，他们拿起一把干草，盖在蚂蚁窝上，点燃，然后期待的注视着。伴随着青烟，一阵阵噼噼啪啪的声音传出，刚才还如波涛般汹涌着淹没蝎子的蚂蚁们，转眼间都化为乌有。与马上开始的匪徒与早已埋伏在银行周围的众赏金猎人之间的火爆枪战相比，暴力程度有过之而无不及。&lt;/p&gt;

&lt;p&gt;杀戮，似乎是人的天性，也许这才是暴力美学如此被欣赏的终极原因。&lt;br /&gt;
作为一个在农村长大的孩子，农村广阔的田野和众多的生物，都给我们提供了很多可以杀戮的机会。南方很多水塘里都有一种吸血虫子，名叫蚂蟥。当牛在池塘里喝水或者解暑后，腿上都会爬上很多蚂蟥，它们用它们身体两端的吸盘牢牢地吸在牛身上。此时不能硬扯，因为越扯它们吸的越紧，当强行扯下后，牛腿就会流血不止。当然，它们并非只吸牛血，人血也是它们的至爱。&lt;/p&gt;

&lt;p&gt;蚂蟥的生命力顽强到惊人的程度。当你在水田里被蚂蟥叮到鲜血直淌后，你气急败坏决定报复它，一巴掌把它拍下来，放到水泥地上用脚踩住，用力跺几下，并来回在地上磨擦，可惜它还是死不了；你拿起一块石头，在它身上猛砸，如果是人，都死好几回了，可惜它还是死不了；你拿出了一把刀，将它剁成了几段，可惜它还是死不了；传说中即使把它们烧死，在放到水里仍能复活。有一次，和表哥抓到一只，两个孩子轮番用脚把它给踩烂了，累了之后，我仰着头问表哥：接下来该怎么办？那个时候表哥表姐的形象一般都是巨伟岸的。表哥沉吟一会，说我们lan(方言，意思大致是腐蚀）死它！我说：怎么lan?表哥果断说：用尿！于是我们挖了一个小坑，把已经烂成一团的蚂蟥放了进去，哥俩一起掏出小弟弟，往坑里撒了一泡童子尿。然后我们把坑埋了，就欢快的回家了。第二天，再次路过这蚂蟥的葬身之地时，我问表哥：它死了没？表哥说：肯定，挖出来看看它被lan成什么样了！于是找来一根木棍，撬开那个小土坑，结果里面空空如也，蚂蟥不见了。我们两面面相觑，心想，妈的这都不死。&lt;/p&gt;

&lt;p&gt;我一直是个虚心好学的孩子，就去请教大人，大人告诉我们说，用竹签把它翻过来晒太阳它就死啦！于是我们以后抓到蚂蟥后就用这种惨绝人寰的手段对付之。具体施刑过程就是，拿一根竹签或粗一点的硬草，抵住蚂蟥的屁股，然后一边把竹签往里捅，一边把蚂蟥的身体往下撸，直到最后蚂蟥被彻底翻了肚皮朝天，肚皮指的是肚子里面的那皮。这还不够，还要把这根竹签插到墙上或石缝里，让太阳暴晒。在我还没来得及验证翻皮晒太阳后再把它放到水里它能否复活的时候，我就长大了，对蚂蟥不感兴趣了。&lt;/p&gt;

&lt;p&gt;农村蚂蚁很多，所以都见怪不怪。可是有段时间我对这蚂蚁感兴趣了，这一感兴趣，就意味着它们要遭殃了。具体过程就不表了。&lt;/p&gt;

&lt;p&gt;不知道从什么时候起，开始不再虐杀这种小动物了。但回忆起来，却记得那时候没有任何罪恶感，一起长大的玩伴相同的经历又说明我不是个例。于是我想，大概虐杀是人的天性，只是随着后天的成长，同情心慈悲心会渐渐抑制住这种天性。但抑制的天性又总得想方设法出来宣泄一下，于是那么多的充斥着暴力的电影才会被很多人喜爱。&lt;/p&gt;

&lt;p&gt;那么，在狂野西部，当敌对双方只为生存，正义与邪恶的对立被弱化时，杀戮就让旁观者欣赏到纯粹的暴力的美。&lt;/p&gt;

&lt;h1 id=&#34;2-男人的情谊&#34;&gt;2.男人的情谊&lt;/h1&gt;

&lt;p&gt;几个匪徒在一片荒漠里作片刻歇息，其中一个打开了一瓶酒，喝了一口，扔给一个同伴，同伴喝了一口继而再扔给下一个同伴，如此进行下去。大概你会觉得几个人分完一瓶酒会体现出男人的友情，如同小学语文课本里讲述一个班的战士分一个苹果那样。但显然这样安排有失真实，于是发生了电影里的一幕，一个匪徒想从上一个人手里接过酒瓶，可酒瓶被扔向了另一个人，他只好眼巴巴的望着酒瓶飞来飞去，就是飞不到自己手里。直到酒瓶飞到最后一个人手里，他想这下要给我了吧，可那人仰起脖子咕噜咕噜一饮而尽。到头来他仍然一滴酒都没尝到。所有的人都哈哈大笑，只有他铁青着脸。&lt;/p&gt;

&lt;p&gt;最后的大战前夕，几个匪徒去了趟貌似是妓院的地方。派克只是稍作休息，一句话都不说。隔壁的两个兄弟却跟妓女争吵不休。这时候你大概会想行事一向透着正派范儿的派克会替兄弟把钱付了，或训斥兄弟们一顿。但他只说了一句：Let&amp;rsquo;s go。于是出门和一直等在门外的另一位兄弟，一行四人，慷慨赴死。&lt;/p&gt;

&lt;p&gt;下面这幅图，让我想起了下面的句子：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;风萧萧兮易水寒,壮士一去兮不复还。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/riluohuangsha.jpg&#34; alt=&#34;riluohuangsha.jpg&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Bury My Heart at Wounded Knee(魂归伤膝谷）</title>
      <link>https://pureage.info/2012/04/01/58.html</link>
      <pubDate>Sun, 01 Apr 2012 13:25:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/04/01/58.html</guid>
      
        <description>&lt;p&gt;如果历史老人能够站到我们面前的话，我们一定会看到他长着一张这个世界上最冷酷无情的脸.当你在为某次历史事件中逝去的生命 而叹息，为旧文明被新文明取代中的血流成河而落泪时，他会不悲不喜的告诉你，这就是规律。你仰面问他，为什么弱者信奉的神 灵神灵不庇护他们？他告诉你，孩子，你以为你在看《阿凡达》呢？&lt;/p&gt;

&lt;h2 id=&#34;规律与尊严孰轻孰重&#34;&gt;规律与尊严孰轻孰重&lt;/h2&gt;

&lt;p&gt;最初面对白人的入侵，酋长“卧牛”是一个坚定的反抗者，是部落的精神领袖，带领着族人打了一次次胜仗，当然，这种反抗只是 苟延残喘。不得已，他带队逃到了加拿大。可那始终是寄人篱下，时刻会因为族人的一些越界行为而遭到驱逐。同时，恶劣的生存 环境也威胁着族人的生存。当不断有小孩死去，当充饥的食物变成了水煮老鼠时，越来越多的族人选择回到美国，接受白人的游戏 规则。最后他也回到美国，成为最后一位放下枪的印第安人。&lt;/p&gt;

&lt;p&gt;以往骑马打猎的地方已经成了一个小镇，他的儿子在镇上当上了警察。儿子看到了父亲忧郁的眼神，于是骑上马说，我们真幸运， 这里的行政长官允许我们在猎场打猎。说完打马进入用围栏围起来的猎场，那块猎场比学校的操场小。伴随着依稀熟悉的唿哨声， 儿子射杀了一匹马，他回头向父亲挥舞着手里的枪，高声尖叫着，似乎在安慰父亲，我们往日的荣光还在。父亲的眼神更忧郁了， 他看着自己的儿子，就像看到刚才那只被他射杀的在猎场里无处可逃的马。最后，他选择了重拾尊严，尊严的死去。死了，他还是 那个叫做“卧牛”的酋长。&lt;/p&gt;

&lt;h2 id=&#34;片尾字幕&#34;&gt;片尾字幕&lt;/h2&gt;

&lt;p&gt;Charles Eastman devoted the rest of his life to the advocacy of Sioux rights,and to writing and lecturing about his American Indian childhood and culture.&lt;br /&gt;
查尔斯.伊斯特曼后来一直为苏族人的权利作宣传，并通过写文章，演讲等方式宣传美国印第安文化和他的亲身经历。&lt;br /&gt;
Elaine Goodale Eastman left teaching to raise their children and to edit her husband&amp;rsquo;s books and lectures.&lt;br /&gt;
伊莲.古黛尔.伊斯特曼辞职回家照顾孩子，帮助丈夫编校书籍和演讲稿。&lt;br /&gt;
They had five daughters and one son together.They named their son Ohiyesa.&lt;br /&gt;
他们有五个女儿，一个儿子，儿子叫奥哈伊萨。&lt;br /&gt;
RED CLOUD continued to devote his life to his people&amp;rsquo;s welfare,and fought every government attenmpt to violate the agreements he had signed.&lt;br /&gt;
“赤云”继续致力于维护族人的权利，与每届试图违反协议的政府作斗争。&lt;br /&gt;
More than a century after his murder,SITTING BULL remains the iconic symbol of American Indian resistance.&lt;br /&gt;
虽然“卧牛”被谋杀已有一个多世纪，他仍然是美国印第安人反抗白人的符号。&lt;br /&gt;
HENRY DAWES,author of &amp;ldquo;The Dawes Allotment Act&amp;rdquo;,served in the Senate until 1893.Within decades of the act&amp;rsquo;s passage,some 90 million acres of American Indian lands were taken and sold to whites.&lt;br /&gt;
“道斯土地分配条例”的制订人亨利*道斯担任参议院直至1893年。在法案生效的几十年里，超过九千万英亩原属印第安人的土地被 国家收走，卖给白人。&lt;br /&gt;
In 1980,the U.S Supreme Court ruled that the 1876 seizure of the Black Hills violated treaties signed with the Sioux.&lt;br /&gt;
1895年，美国最高法院判决1876年夺取黑山的行为违反了与苏族签订的协议。&lt;br /&gt;
In the majority opinion,Justice Blackmun wrote,&amp;ldquo;A more ripe and rank case of dishonorable dealings will never,in all probability,be found in our history.&amp;rdquo;&lt;br /&gt;
大法官布雷克蒙写道：“回顾我国政府历史上众多不光彩的交易，没有一次比这更无耻，更恶劣”。这也代表了大众的意见。&lt;br /&gt;
But the Court refused to restore the land to the Sioux,and ordered that compensation be paid instead.&lt;br /&gt;
但法院驳回了归还苏族土地的请求，改判赔偿相应损失。&lt;br /&gt;
That award,now worth more than $600 million,remains unclaimed.&lt;br /&gt;
这笔现值约六亿美元的赔款仍未支付。&lt;br /&gt;
To date,the Sioux will not agree to surrender their claim to the Black Hills,a place they feel is sacred.&lt;br /&gt;
苏族人至今没有放弃对他们的圣地，黑山所有权的争取。&lt;/p&gt;

&lt;h2 id=&#34;剧情简介&#34;&gt;剧情简介&lt;/h2&gt;

&lt;p&gt;维基百科&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The plot, which is based on events covered by several chapters of Brown&amp;rsquo;s book as well as other sources, revolves around four main characters: Charles Eastman né Ohiyesa (Adam Beach), a young, mixed-race Sioux doctor educated at Dartmouth and Boston University, who is held up as proof of the success of assimilation; Sitting Bull (August Schellenberg), the Sioux chief who refuses to submit to U.S. government policies designed to strip his people of their identity, their dignity and their sacred land, the gold-laden Black Hills of the Dakotas; Senator Henry Dawes (Aidan Quinn), an architect of government policy for allotment of Indian lands to individual households to force adoption of subsistence farming; and Red Cloud, whose decision to make peace with the American government and go to a reservation disturbed Sitting Bull.&lt;br /&gt;
While Eastman and his future wife Elaine Goodale (Paquin), a reformer from New England and Superintendent of Indian Schools in the Dakotas, work to improve life for Indians on the reservation, Senator Dawes lobbies President Ulysses Grant (Thompson) for more humane treatment of the Indians. He opposes the adversarial stance of General William Tecumseh Sherman (Feore). The Dawes Commission (held from 1893 to 1914) develops a proposal to break up the Great Sioux Reservation to allow for American demands for land while preserving enough land for the Sioux to live on. The Commission&amp;rsquo;s plan is held up by Sitting Bull&amp;rsquo;s opposition. He has risen to leadership among the Sioux as one of the last chiefs to fight for their independence. Dawes, in turn, urges Eastman to help him convince the recalcitrant tribal leaders. After witnessing conditions on the Sioux reservation, Eastman refuses.&lt;br /&gt;
The prophet Wovoka (Studi) raised Western Indian hopes with his spiritual movement based on a revival of religious practice and the ritual Ghost Dance; it was a messianic movement that promised an end of their suffering under the white man. The assassination of Sitting Bull and the massacre of nearly 200 Indian men, women and children by the 7th Cavalry at Wounded Knee Creek on December 29, 1890 ended such hopes.&lt;br /&gt;
Henry L. Dawes&amp;rsquo; wanted to increase the cultural assimilation of Native Americans into American society by his Dawes Act (1887) and his later efforts as head of the Dawes Commission. During the 47 years of implementing the Act, Native Americans lost about 90 million acres (360,000 km²) of treaty land, or about two-thirds of their 1887 land base. About 90,000 Indians were made landless. The Implementation of the Dawes Act disrupted Native American tribes&amp;rsquo; communal life, culture, and unity.&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>门前的落花</title>
      <link>https://pureage.info/2012/03/20/57.html</link>
      <pubDate>Tue, 20 Mar 2012 08:39:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/03/20/57.html</guid>
      
        <description>&lt;p&gt;不知道&lt;br /&gt;
你们在什么时候开放&lt;br /&gt;
也不知道&lt;br /&gt;
你们在什么时候凋落&lt;br /&gt;
是你们&lt;br /&gt;
花期太短暂&lt;br /&gt;
还是我&lt;br /&gt;
行色太匆匆&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>3.15罢餐与3.15心愿</title>
      <link>https://pureage.info/2012/03/15/56.html</link>
      <pubDate>Thu, 15 Mar 2012 07:23:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/03/15/56.html</guid>
      
        <description>&lt;p&gt;面对声势较为浩大，但结果未知的罢餐，有如下几点想法：&lt;/p&gt;

&lt;h1 id=&#34;1-罢餐的意义&#34;&gt;1.罢餐的意义&lt;/h1&gt;

&lt;p&gt;罢得再厉害，食堂也是学校广大学子的唯一稳定的进食场所，所以有人说，你今天罢了，明天还得去吃，有意义吗？&lt;/p&gt;

&lt;p&gt;罢餐不是为了不吃饭，不是荷尔蒙在飞，而是与学生的切身利益相关。罢餐的意义不在于让食堂垮台，而在于让学校、让后禽集团重视我们的呼声。平时，你在饭里面吃出虫子、清洁球钢丝、阴毛疑似物等，维权意识不强的也就拿出来扔了继续把饭吃了，维权意识强点的顶多会去叫换一份菜，但解决不了问题。明天你依然可能吃到虫子、清洁球钢丝、阴毛疑似物。&lt;/p&gt;

&lt;p&gt;学生跟后禽集团之间就像有根无形的绳子，你用力一下，他就过来一点，你撒手不管，他就拉着你到处看阴毛飞。&lt;/p&gt;

&lt;h1 id=&#34;2-过激-又见过激&#34;&gt;2.过激！又见过激！&lt;/h1&gt;

&lt;p&gt;罢餐的事件学校高度重视，几十位辅导员严阵以待，在食堂门口苦口婆心、威逼利诱种种。辞藻无非是“不要过激”。不要过激当然是对的，你不能因为食堂烂就去把食堂砸了，但现实是同学们的行为还远远达不到过激的标准时，学校相关部门就已经将其当做过激行为来对待了。不去食堂不算过激，去食堂门口围观不算过激，去食堂里面不吃饭不算过激，自备开水去食堂里面吃泡面也不算过激，只要吃完后把泡面盒带走就行了。一切行为都是如此的完美，过激的是学校。&lt;/p&gt;

&lt;h1 id=&#34;3-学校的性质&#34;&gt;3.学校的性质&lt;/h1&gt;

&lt;p&gt;其实我不是一个愤青。但是从长期以来学校和后勤集团的关系，我只能看见学校其实早已沦为某些人挣钱盈利的工具而已。撇开教学方面的问题不谈（当然，这方面的问题很大很大），理想情况下学校其实跟后禽集团不该沆瀣一气。对学校有感情的永远是学校的学生，今天骂的凶，明天就会无比怀念。&lt;/p&gt;

&lt;p&gt;学校的常态应该是监督后禽集团，不是在学校论坛上将“罢餐”设为过滤词汇，不是一有风吹草动就调动辅导员来维稳，更不是将理性号召罢餐的同学叫去喝茶。当然，这都是在理想情况下才能发生的。现实情况中，学校跟后禽集团永远穿同一条裤子的，发展“经济”为第一要务嘛。&lt;/p&gt;

&lt;h1 id=&#34;4-人的多样性&#34;&gt;4.人的多样性&lt;/h1&gt;

&lt;p&gt;任何活动都不得不考虑人的多样性问题。你觉得食堂难吃，也有人觉得食堂还行，你觉得罢餐有意义，也有人觉得罢餐一无是处。你无法说服任何人，做自己觉得有意义的事情就行了。不要因为辅导员劝导两句“不要过激”，因为同学嘲笑两句“这么愤青”就真以为自己过激了。&lt;/p&gt;

&lt;h1 id=&#34;5-三一五心愿&#34;&gt;5.三一五心愿&lt;/h1&gt;

&lt;p&gt;今天是三一五了，继续祝愿良心企业蒙牛乳业早日倒闭大吉。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;老罗：&lt;br /&gt;
其实没有人是单独改变世界的，最终都是大家一起改变世界。我们每个人在不同的情况下能够产生的影响力是不一样的。你不要因为影响力小就不做，我在中国只能算是一个冷门的小众的名人，根本就不是一个家喻户晓的大众名人。如果这个事发生在葛优身上的话呢，可能三天就解决了。所以我维权并不是说因为有了网络时代才维权的。这就提醒大家，别他妈说什么名人不名人维权，我狗屁不是，在东北小镇法制那么不完善、进了法院会给你踹出来的地方，我也搞过维权。你看我斗了好几个月，我搭上了将近20万块钱，我不还在斗吗？&lt;br /&gt;
我的每一步都是胜利，如果你要是悲观的话，你的每一步都是失败。你要乐观的话每一步都是胜利。比如说中国有50个罗永浩呢，咱们国家的消费者权益保护和执行肯定就不是今天这个局面。&lt;br /&gt;
你自己在你能够的范围内，能勇敢一点就勇敢一点，能坚持一点就坚持一点。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>小学一年级就该懂的道理：明天还有明天的事</title>
      <link>https://pureage.info/2012/03/06/55.html</link>
      <pubDate>Tue, 06 Mar 2012 11:53:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/03/06/55.html</guid>
      
        <description>&lt;p&gt;写论文写不下去了，于是随手点开PPS，心说，明天再写吧，反正也快写完了。正常情况下，这个晚上就应该是在看电影中度过的。但这时候一个神奇的事情发生了，我居然想到了小学一年级的一篇课文《明天还有明天的事》，找来看看，顿时心生惭愧，赶紧面壁去，不，赶紧赶论文去。再不抓紧时间写，哪来的时间搞毕业旅游，哪来的时间看更多的电影。&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2 id=&#34;明天还有明天的事&#34;&gt;明天还有明天的事&lt;/h2&gt;

&lt;p&gt;暑假里的一天下午，燕燕、杨力和小勇在屋子里做作业。&lt;br /&gt;
窗户开着。湖边柳树上的知了叫得多么热闹。杨力往窗外一看，有几个小朋友正在湖里游泳。他坐不住了，说：“多热啊！湖水不深，咱们也去游泳吧。”燕燕说：“等一会儿 ，还没做完作业呢。”&lt;/p&gt;

&lt;p&gt;过了一会儿，杨力又说：“真热，怎么这么热啊！咱们到柳树底下去凉快一会儿再做吧！”小勇说：“是啊，真热。”燕燕抬起头来看了看他们，说：“不， 咱们还是安下心来 ，把作业做完再去。”杨力说：“今天的作业做不完，明天做不行吗？”燕燕说：“ 明天还有明天的事。”大家都不说话了，低着头做作业。&lt;/p&gt;

&lt;p&gt;又过了一会儿，作业都做完了。杨力一边收拾书本，一边说：“现在可以去游泳了吧。”燕燕说：“你们以为我不喜欢游泳吗？我比你们还喜欢呢。走，咱们一块儿去！”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/tomorrow-text-1.jpg&#34; alt=&#34;tomorrow-text-1.jpg&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/tomorrow-text-2.jpg&#34; alt=&#34;tomorrow-text-2&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>如何在豆瓣认领自己的博客？</title>
      <link>https://pureage.info/2012/02/29/52.html</link>
      <pubDate>Wed, 29 Feb 2012 12:26:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/02/29/52.html</guid>
      
        <description>&lt;p&gt;1.先到豆瓣九点的这个页面&lt;a href=&#34;http://9.douban.com/reader/&#34;&gt;http://9.douban.com/reader/&lt;/a&gt; 点击右侧“添加订阅”，输入你的博客地址，然后豆瓣就会开始抓取你的博客，稍微等会儿，就添加进去了。&lt;/p&gt;

&lt;p&gt;2.点下方的“管理订阅列表”，进入页面后，点你博客的名字，进入你的博客九点页面，再点击图片右侧的“认领这个博客”，豆瓣会给出一串字符（如doubanclaim9434b54d244e5b6f）要求你写进你的博客日志里，写好之后回到这个页面，点击“重抓”，过个10分钟左右等豆瓣验证好了，你就拥有这个博客了，然后那行写在日志里的字符也可以删了。&lt;/p&gt;

&lt;p&gt;3.等在九点拥有博客之后，在你的豆瓣个人页面的头像下面就会显示你的博客地址和名称，你的主页上会显示你最新的博客日志并且会自动更新，自动显示你的广播里，你的友邻也都会看见。&lt;/p&gt;

&lt;p&gt;本文参考&lt;a href=&#34;http://www.douban.com/group/topic/9027515/&#34;&gt;http://www.douban.com/group/topic/9027515/&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>How The West Was Won:《西部开拓史》</title>
      <link>https://pureage.info/2012/02/27/51.html</link>
      <pubDate>Mon, 27 Feb 2012 12:29:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/02/27/51.html</guid>
      
        <description>&lt;p&gt;故事讲述一家三代在各种时代背景下的艰难曲折，通过这个家庭从19世纪早期到1880年代半个世纪的迁徙经历，描述美国西部历史。他们从纽约出发，经历了内战，淘金热，路遇印第安人和西南部的流放者，经历各种艰难险阻，终于到达西部，并联合其他开拓者在平原上修建了铁路，把法律与正义也带到了边疆。&lt;/p&gt;

&lt;p&gt;作为一部美国主旋律电影，如果说从这部电影里有什么收获的话，那就是跟看完《壮志凌云》一样，感慨一下Rome was not built in a day。&lt;/p&gt;

&lt;p&gt;但是，它们是《西部开拓史》，是《壮志凌云》，不是《XX大业》，不是《XX伟业》。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>爱情 爱情</title>
      <link>https://pureage.info/2012/02/20/50.html</link>
      <pubDate>Mon, 20 Feb 2012 07:44:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/02/20/50.html</guid>
      
        <description>&lt;p&gt;本文由荆轲友情投递&lt;/p&gt;

&lt;p&gt;这几年看了不少同类型电视剧，《奋斗》，《蜗居》，《裸婚时代》，《你是我爱人》等等，积累了很久的情绪在看到这部《北京爱情故事》终于不得不抒。&lt;/p&gt;

&lt;p&gt;不去讨论喜欢谁讨厌谁，谁好谁坏，只在下面列出我想要思考的问题，有些我心里已经有了答案，有些我仍然犹豫。我只是作为一个类型的群体&amp;ndash;未出校门的学生&amp;ndash;其中的普通一员来表达自己的想法。&lt;/p&gt;

&lt;p&gt;简单介绍一下剧情。&lt;/p&gt;

&lt;p&gt;男主角：穷矮丑&amp;ndash;石小猛，高帅富&amp;ndash;程峰，经济适用男&amp;ndash;吴狄&lt;br /&gt;
女主角：春姑娘&amp;ndash;杨紫曦，夏姑娘&amp;ndash;林夏，秋姑娘&amp;ndash;伍楣，冬姑娘&amp;ndash;沈冰&lt;/p&gt;

&lt;p&gt;忽略枝枝叶叶，主线是这样：地点北京。三个男主角是大学时的好兄弟。高帅富花花公子，女友无数，包括对他痴情的热情奔放的夏姑娘，某日高富帅在见到穷矮丑青梅竹马的女友冬姑娘之后猛然醒悟，浪子回头爱上了冬姑娘。经济适用男的女友春姑娘迷恋物质的依赖，劈腿跟了某富二代。经济适用男仍然满怀希望等待春姑娘归来，其中一度喜欢成熟迷人的女上司秋姑娘，但最终因各自理想不同而分道扬镳。在内外交困的境况下，受兄弟女友因物质劈腿的刺激，穷矮丑一改世界观人生观价值观，接受了高富帅的老爸开出的条件，离开了青梅竹马的冬姑娘，开创自己的事业，成功的报复了之前对他压迫的老板。最终高富帅与冬姑娘走到了一起，冬姑娘也深深地爱上了浪子回头的高富帅。迷恋物质的春姑娘在被富二代伤得体无完肤之后终于回到了痴心等她的经济适用男身边。&lt;/p&gt;

&lt;p&gt;一个电视剧开头开得好，他所塑造的形象成功了，那这些角色也就有了自己的生命力，以后会怎么发展就基本已经注定了。所以电视剧中某些狗血的情节，例如穷矮丑为了报复强占了夏姑娘，这些其实可以忽略，不必较真。&lt;/p&gt;

&lt;p&gt;首先，从这部电视剧中可以看出的几个有争议的三观：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;高富帅永远都占领战略制高点。之前玩女无数，以征服各种女人为乐趣，遇到了冰清玉洁的小龙女之后突然良心发现，谓之找到真爱。于是所有人都为他开路，老爸亲自开出条件请穷矮丑靠边站，穷矮丑被逼的木有办法了只能舍弃爱情，经济适用男在感觉到穷矮丑三观与以前不一样之后，站到了高富帅的一边。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;可以玩女人，但是不能玩处女。高富帅始终没有碰过对他死心塌地的夏姑娘。于是大家都觉得高富帅有良心。而穷矮丑后来抢了夏姑娘的第一次，于是大家都声讨穷矮丑，觉得他不是人，是畜生。这和前段时间的《金陵十三钗》貌似有共同点。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其次，这个电视剧大体的三观是可以接受的。追逐迷恋物质的最后没好下场，算计报复的人最终失去所有。&lt;/p&gt;

&lt;p&gt;但是，不仅仅是这么简单。&lt;/p&gt;

&lt;p&gt;面包还是爱情&amp;mdash;-特定的城市，北京。户口没法落实，穿得跟墙一样，永远是被城管审问驱逐的对象。工作几年仍然没办法在五环外买下一套30平米的小房子。拿着微薄的工资累死累活奖金说扣就扣，被老板利用还有气不能发。问你，选面包还是爱情。选面包的，直接看本剧中的穷矮丑和春姑娘；选爱情的，去看《你是我爱人》，剧中年轻的男女主角在北京站不住脚回到了老家却还是在工作恋爱父母的多重压力下分了手。&lt;/p&gt;

&lt;p&gt;轻还是重&amp;mdash;-穷矮丑放弃了爱情，选择轻装上阵，追求事业。很多人理解他。我想他在那一刻一定想着，我现在只是暂时放弃你，等我有钱了一定把你追回来。可是爱情不是物品，当你需要的时候可以把它放进当铺，等到有钱了再赎回来。你放弃了，它就永远不会再回来。生活中有无数的选择，容易还是困难，快乐还是痛苦，坚持还是放弃，轻或是重。每天都有无数的人在迷茫，我该怎么办。谁也不是圣人。&lt;/p&gt;

&lt;p&gt;理想还是现实&amp;mdash;-当这个社会人人都拜金人人都追逐利益的时候，理想还有存在的意义吗？像鲁迅说的，在一个黑屋子里，所有的人都在沉睡，只有你醒着，而那屋子是铁的，怎么呐喊都是无济于事。是不是应该随波逐流？&lt;/p&gt;

&lt;p&gt;作为一个读了近二十年死书未曾走入社会的学生，我表示最近几年我的世界观人生观价值观非常混乱。我没有资格对别人的选择和人生评头论足，因为我自己不曾经历过。&lt;/p&gt;

&lt;p&gt;作为一个背过八荣八耻的安分守己好公民，我表示那一套完全是空话。&lt;/p&gt;

&lt;p&gt;作为一个孜孜不倦浏览各种爱情婚姻热帖的中国网民，我表示感叹并且恐惧，这是一个怎样狗血至极的社会。&lt;/p&gt;

&lt;p&gt;作为一个仍保留着对单纯爱情信仰和生活理想的普通人，我不知道自己还能坚持多久。&lt;/p&gt;

&lt;p&gt;当这个社会曾经的英雄不再，我们需要把它刻在心里。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>总丢东西怎么办？How not to lose things！</title>
      <link>https://pureage.info/2012/02/17/49.html</link>
      <pubDate>Thu, 16 Feb 2012 16:22:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/02/17/49.html</guid>
      
        <description>&lt;p&gt;你有和我一样爱丢饭卡、水杯的坏习惯吗？如果我们同是沦落人，那么你就知道这个“爱”字说的有多心酸了。我的辉煌战绩如下：本科时代丢过10+个水杯，研究生阶段丢过近10次饭卡。&lt;/p&gt;

&lt;p&gt;每次丢完东西总是面临巨大压力，一方面这些东西虽小，但都是必需品，总让你心烦意乱，另一方面虽然它们廉价，但积少成多，也是一种浪费，the last but not the least,每次丢完东西都要承受同学们“你又丢XX了？”的疑问和目光，多少感觉自己像个异类，心理压力不可小觑。&lt;/p&gt;

&lt;p&gt;但我始终相信，丢东西只是习惯问题。养成了丢东西的习惯，就要再养成不丢东西的习惯来使前面的习惯被抹去。找来一篇文章，感觉对自己有帮助，也许对无数次捶胸顿足的你同样有用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sindark.com/2008/01/31/how-not-to-lose-things/&#34;&gt;http://www.sindark.com/2008/01/31/how-not-to-lose-things/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;##How not to lose things&lt;br /&gt;
JANUARY 31, 2008&lt;br /&gt;
in DAILY UPDATES, GEEK STUFF&lt;br /&gt;
A fair number of people I know have a great deal of trouble keeping track of small personal effects: wallets, sunglasses, keys, and the like. When they encounter someone who does not have this problem, they assume it’s because of some inherent superiority of memory. In my experience, this is not the case. What differs between those who lose things and those who do not is the degree to which they are systematic.&lt;/p&gt;

&lt;p&gt;Be systematic&lt;/p&gt;

&lt;p&gt;The first vital aspect of being systematic is to maintain consistency in where things are placed. One’s keys should always be in the same pocket when out or at work, and always on the same table of shelf when at home. One’s gloves should likewise always be kept in the same place, at least during seasons when they are required, and moved to a consistent but less accessible place during the summer. All this is made dramatically easier by choosing clothes with a similar array of pockets. Having a single jacket with lots of pockets is an enormous boon: I always know that my wallet is in the right-side breast pocket, while my camera is in the left. The small sub-pocket under that holds a four-colour pen. The inside left pocket has a pair of liner gloves, while the inside right pocket has an iPod Shuffle and space for valuable things carried rarely. Having a consistently used bag with lots of pockets is similarly useful.&lt;/p&gt;

&lt;p&gt;Trust, but verify&lt;/p&gt;

&lt;p&gt;The second vital aspect is frequent auditing. If you have followed the advice of using the same pockets at all times, this will soon become automatic and second nature. You learn to be intuitively aware of the presence or absence of objects from their designated spaces. If they are not there, you know to seek them out immediately and return them to their designated position.&lt;/p&gt;

&lt;p&gt;Never trust yourself to remember a deviation from the system. Moving something into the wrong place – perhaps to make it more convenient to carry something else – will only produce anxiety while you are tying to remember the deviation and frustration when it leads to things being misplaced or not immediately accessible.&lt;/p&gt;

&lt;p&gt;Fashion is your enemy&lt;/p&gt;

&lt;p&gt;The real trouble begins when you have a wardrobe that has dramatically different elements: trousers with no pockets, multiple jackets, purses with differing internal compositions. For those who insist on such variety, I can offer no aid. Unless your memory is much better than mine, you are probably doomed to lose things relatively often.&lt;/p&gt;

&lt;p&gt;Some level of variety must certainly be dealt with by anyone, and this can be accomplished by having a number of set collections of gear with defined associated positions. One might have a ‘no jacket because it is sunny out, still carrying photographic gear’ option, as well as an ‘out biking in the countryside, repair tools required’ configuration. In my experience, it is feasible to maintain a good number, provided they are as similar as possible (wallet always on the same side, non-included items left in defined positions at home) and they are always identically configured. Objects only carried rarely are by far the easiest to lose. I virtually never carry an umbrella (preferring to rely on waterproof clothing), so I constantly forget them when I have been carrying one for whatever reason.&lt;/p&gt;

&lt;p&gt;Naturally, there are plenty of people for whom the above is too much work for too little value. The point is less to convince people that they should or should not adopt such a system and more to argue that losing or not losing objects is a reflection of planning and habit, rather than inherent cognitive characteristics. That said, a certain fascination with gear and a somewhat compulsive nature certainly help in the initial development and constant refinement of such an order.&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>那些失散多年的朋友们，你们好吗？</title>
      <link>https://pureage.info/2012/02/12/48.html</link>
      <pubDate>Sun, 12 Feb 2012 07:01:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/02/12/48.html</guid>
      
        <description>&lt;p&gt;大年初二的晚上，我做了一个梦，梦见了一个多年不见的朋友A。&lt;/p&gt;

&lt;p&gt;在梦里，我和他在学校食堂偶遇，双方寒暄完毕，聊起各自的生活和工作。他告诉我，大学退学，他在社会上摸爬滚打了几年，现在已经年薪二十万了，过得很好。我激动的热泪盈眶，可是醒来后才知道那是一场梦。&lt;/p&gt;

&lt;p&gt;那个晚上接下来的时间我一直没有睡着，一直在想着他。有几件事这么多年一直无法忘记。&lt;/p&gt;

&lt;p&gt;在我们那种小县城，不知是不是受《古惑仔》的影响，每个高中都有几位“大哥”，每个“大哥”下面都有几十个小弟，这些学校的势力大多又从属于校外的社会团伙，那些社会团伙干着收保护费照场子等等黑色的勾当，经常会有各种砍刀对拼事件发生，总之，黑帮电影里该有的似乎都有了。我们这些好学生们对他们敬而远之，学校里那些“大哥”也不会无故找我们的茬，尽管实质是好学生偶尔受到欺负也不会怎么样，进而他们也不会把你怎么样，但大家都维持着这种表面上的潜规则。就像很多电影里一样，总有些“小弟”是嚣张跋扈狗仗人势型的，不幸我们寝室就有一位，称他为B吧。大家一直井水不犯河水，除了经常被动的B吹起一些江湖上的传闻，大家基本无话。我的朋友A睡觉打呼噜，一般情况下大家是不会因为他打呼噜而睡不着的，只有“小弟B”会对此一直骂骂咧咧，A也只好无奈的笑笑了事。直到有一天晚上，“小弟B”实在睡不着，在床上哼哧了几句后，突然下床一把拿起了牙刷塞进了A的嘴里。A自然醒了，其他人也都醒了，我是一直没睡着。A一下从床上站起来，一改平日里的老实可欺的面色，对B说：“有种跟我到楼顶去单挑。”然后直勾勾的看着B的眼睛，我们一看事情要闹大了，赶紧劝开，毕竟B是我们惹不起的，虽然他本身很矮小，但我们班已有几个身材高大的同学被他带着一帮狐朋狗友给揍了。这时B竟然退缩了，骂了几句后又回到自己的床上，自此后两人再也没发生过正面冲突。我与B也有过冲突，由于某次晚上我和B争论了几句，双方都懂了粗口，过了几天B的“大哥”找到我，说你老实点，小心我们把你从楼上扔下去，如此恐吓几句就完事了。不由得让我想起一句话，一切反动派都是纸老虎。事后我想明白了，他们之所以敢一直欺负班里的同学，甚至动手围殴，原因只有一个，那些同学眼睛里没有凶光。&lt;/p&gt;

&lt;p&gt;时间来到了高三的冬天。由于父母常年在外打工，我平时住在学校，只有每个月的一天月假会到姑妈家，姑妈对我非常好，但生活上也不可能照顾得面面俱到。2005年那个冬天，临近高考，压力上来了，体质下去了，我整整感冒了一个冬天。每天早上，我都会被冻醒，白天在教室也不停歇的擦着不断往外淌的鼻涕。回忆起那个冬天，只有一个字“冷”。我没有羽绒服，以前抵御寒冬的衣物在那一年都不管用了，每天都在发抖，每天手指都冻得无法伸直。最可恶的是感冒，为了治好感冒，我好几次晚上把医生叮嘱只能吃一颗的康泰克两颗两颗的吞进去，期待第二天就会好，鼻子就会通畅。但每次都只能在半夜醒来时能感受到鼻子通畅后吸气时带来的疼痛感和满嘴的药味，醒来后，鼻子仍然塞着，仍然不停的淌鼻涕。后来，A对我说，我多一件棉袄，这一件你拿去穿吧。我推辞着，他坚持着。于是那个冬天的后半期我就穿着他的棉袄度过去了。&lt;/p&gt;

&lt;p&gt;高考过去了。我去了哈尔滨，他由于成绩不好，只能去读一个三本院校。大一时，我们还互相写了几封信。后来他告诉我，他不想读了，在学校里学不到什么，而家里太穷，他必须要挣钱。于是他退学了。后来我们渐渐的失去了联系，期间都尝试通过同学找到他的联系方式，但似乎他没有和任何同学联系，我都没找到。&lt;/p&gt;

&lt;p&gt;回到初二的晚上，我梦醒了，我知道我是太想念我的这个朋友了，我该联系他了，至于那个年薪20万，只是因为这么多年每次想到他我就暗暗期望他能过得很好，所以反映到梦里去了。于是我蜷在被窝里，用手机登上QQ,挨个向高中同学问他的联系方式，终于另一个朋友由于喝醉了，半夜起来喝水看到了我的留言，告诉了我他的手机号。第二天早上，我不知道他有没有在忙，方不方便接电话，于是发了个信息过去问了下。马上他打过来了，我们聊了起来。他说他没读大学，跟同学都没有共同话题，所以一直没有跟大家联系；说他已经结婚了，孩子都有了；说他在广东打工，只是个普工，工资不高；他还说“我有空就看看古龙的小说，这不是你当年推荐的吗？看得很过瘾，但是《白玉老虎》怎么像没写完呢？”&amp;hellip;..电话完毕，几滴泪水掉了下了。我只有暗下决心，你永远都是我的朋友。&lt;/p&gt;

&lt;p&gt;就像《老男孩》里，那个理发师，那个吃泡面的，那个司机，那些路人，他们很可能就是你当年一起拜过把的兄弟，却失散了多年。这就是我的一个朋友。事实上，从小到大我这样的朋友还有很多很多，都在那些青春的岁月里留着重重的痕迹。由于是农村的孩子，只有仅仅的几个最后上了高中，上了大学。大部分都结婚生子了，漂在外面做着普通的打工仔，为养活一家老小而奋斗。谁还能记得他们当年的梦想呢？我想起快高考时A对我说：“其实我觉得我能考上一个重点大学。”兄弟们，祝你们幸福平安。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>新年第一篇</title>
      <link>https://pureage.info/2012/02/07/47.html</link>
      <pubDate>Mon, 06 Feb 2012 18:33:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/02/07/47.html</guid>
      
        <description>&lt;p&gt;2011早已过去，但由于长年以来都把春节作为新的一年的开始，所以现在来确定一下新学期的几个目标吧。&lt;/p&gt;

&lt;h2 id=&#34;一-基本目标&#34;&gt;一.基本目标&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;尽快完成论文，通过答辩，顺利毕业。以期五一能有时间过个充实有意义的节日。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;坚持每天跑步，俯卧撑，其重要性无需多解释。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;减少花在寝室或教研室做无意义事情的时间。&lt;br /&gt;
所谓无意义的事情，需要自己以旁观者的角度客观评判，例如每天阅读本是有意义且必要的，但如果在正常学习时间去阅读其他课外书，则是无意义的；看看经典的电影是有意义的，但同上，如果在正常的学习时间去看电影，则是无意义的；每天练习口琴是有意义的，但如果没有带着学习的目的去练而只是纯粹的打发时间则是无意义的；写 博客本是有意义的事情，但如果为写而写则是无意义的；等等等等&amp;hellip;&amp;hellip;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;坚持本博客的更新，当然，不能为写而写。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;二-扩展目标&#34;&gt;二.扩展目标&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;我司专业技能培训坚持跟进，不能在起跑线上就掉后腿，时间是挤出来的。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;五一假期能旅游一下，不留遗憾。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;尽量将以前买回来的书籍看完。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;多看一些好的电影。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;深入理解布鲁斯风格吹奏。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;暂时只想这么多，洗洗睡了。附录一篇高中时曾背过很多遍的新概念英语中的文章:New Year Resolutions新年的决心，权当怀旧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The New Year is a time for resolutions. Mentally, at least, most of us could compile formidable lists of ‘dos’ and ‘don&amp;rsquo;ts’. The same old favourites recur year in year out with monotonous regularity. We resolve to get up earlier each morning, eat less, find more time to play with the children, do a thousand and one jobs about the house, be nice to people we don&amp;rsquo;t like, drive carefully, and take the dog for a walk every day. Past experience has taught us that certain accomplishments are beyond attainment. If we remain inveterate smokers, it is only because we have so often experienced the frustration that results from failure. Most of us fail in our efforts at self-improvement because our schemes are too ambitious and we never have time to carry them out. We also make the fundamental error of announcing our resolutions to everybody so that we look even more foolish when we slip back into our bad old ways. Aware of these pitfalls, this year I attempted to keep my resolutions to myself. I limited myself to two modest ambitions: to do physical exercises every morning and to read more of an evening. An all-night party on New Year&amp;rsquo;s Eve provided me with a good excuse for not carrying on either of these new resolutions on the first day of the year, but on the second, I applied myself assiduously to the task.&lt;/p&gt;

&lt;p&gt;The daily exercises lasted only eleven minutes and I proposed to do them early in the morning before anyone had got up. The self-discipline required to drag myself out of bed eleven minutes earlier than usual was considerable. Nevertheless, I managed to creep down into the living-room for two days before anyone found me out. After jumping about on the carpet and twisting the human frame into uncomfortable positions, I sat down at the breakfast table in an exhausted condition. It was this that betrayed me. The next morning the whole family trooped in to watch the performance. That was really unsettling, but I fended off the taunts and jibes of the family good-humouredly and soon everybody got used to the idea. However, my enthusiasm waned. The time I spent at exercise gradually diminished. Little by little the eleven minutes fell to zero. By January 10th, I was back to where I had started from. I argued that if I spent less time exhausting myself at exercises in the morning, I would keep my mind fresh for reading when I got home from work. Resisting the hypnotizing effect of television, I sat in my room for a few evenings with my eyes glued to a book. One night, however, feeling cold and lonely, I went downstairs and sat in front of the television pretending to read. That proved to be my undoing, for I soon got back to my old bad habit of dozing off in front of the screen. I still haven&amp;rsquo;t given up my resolution to do more reading. In fact, I have just bought a book entitled How to Read a Thousand Words a Minute. Perhaps it will solve my problem, but I just haven&amp;rsquo;t had time to read it!&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>岁月的痕迹</title>
      <link>https://pureage.info/2012/01/12/44.html</link>
      <pubDate>Thu, 12 Jan 2012 12:13:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/01/12/44.html</guid>
      
        <description>&lt;p&gt;喜欢看电影，仿佛平日里不及感知的时间，突然变成手中的一把沙子，触手可及，又随风飘散。&lt;/p&gt;

&lt;p&gt;克林特·伊斯特伍德&amp;mdash;-荒野大镖客（A fistful of Dollars,1964）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/times-1.jpg&#34; alt=&#34;times-1.jpg&#34; /&gt;&lt;br /&gt;
克林特·伊斯特伍德&amp;mdash;-老爷车（Gran Torino，2008）&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/times-2.jpg&#34; alt=&#34;times-2jpg&#34; /&gt;&lt;br /&gt;
罗伯特·德尼罗&amp;mdash;-出租车司机（Taxi Driver,1976）&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/times-3.jpg&#34; alt=&#34;times-3.jpg&#34; /&gt;&lt;br /&gt;
罗伯特·德尼罗&amp;mdash;-永无止境（Limiteless,2011）&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/times-4.jpg&#34; alt=&#34;times-4.jpg&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>打破相对论的怪圈----《怪诞行为学》节选</title>
      <link>https://pureage.info/2012/01/12/39.html</link>
      <pubDate>Thu, 12 Jan 2012 05:44:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/01/12/39.html</guid>
      
        <description>&lt;p&gt;我来举一个例子，这是两位优秀的研究人员—阿摩斯·特维斯基和丹尼尔·卡尼汉做的一个实验。加入你今天有两件事要做：第一件是买支新钢笔，第二件是买上班穿的套装。在一家文具店你看到一支不错的笔标价25美元，你正要买，突然记起同样的笔15分钟路程以外的另一家店促销价18美元。你怎么办呢？你决定为了节省这7美元而多跑15分钟的路程吗？在这两者之间，很多表示他们宁可跑远路节省这7美元。&lt;/p&gt;

&lt;p&gt;现在你要办第二件事：买衣服。你发现了一套做工精细的灰色暗条西装标价455美元，决定要买，这时另一个顾客悄悄告诉你同样的一套衣服另一家店里促销价448元，那一家店离这里只有15分钟路程。你会再多跑15分钟的路程吗？在这种情况下，多数人都说他们不会。&lt;/p&gt;

&lt;p&gt;这是怎么回事呢？你的15分钟到底值7美元，还是不值？在现实中，当然7美元等于7美元&amp;mdash;不管你怎么算也是如此。在这一类情况下你应该考虑的唯一问题是，从城东到城西的15分钟，多花的这15分钟，是不是值得你省下7美元。至于这钱是从10美元还是从10000美元里省下的，与此无关。&lt;/p&gt;

&lt;p&gt;这就是相对论带来的问题&amp;mdash;-我们用相对的方法看待我们的决定，就近与现成的其他选择作比较。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>第一章 历史---从第一支口琴到第一张口琴唱片</title>
      <link>https://pureage.info/2012/01/08/38.html</link>
      <pubDate>Sun, 08 Jan 2012 11:55:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/01/08/38.html</guid>
      
        <description>&lt;p&gt;口琴发声的原理是利用气流震动簧片，当我们的祖先还在穴居时代时，中国人就掌握了这一原理。利用这一原理制作的竹制乐器在远东仍然被广泛使用，如中国的笙和泰国的khan。&lt;/p&gt;

&lt;p&gt;通常认为口琴是一个叫Friedrich Buschmann的柏林人在14岁时发明的（后来他还发明了六角风琴(concertina），但是有理由相信，在同一时期，中欧的一些其他手工乐器制作者彼此独立的掌握了制作口琴的原理。Buschmann家族历来都是钟表匠、音乐家和乐器制作者，在Friedrich Buschmann发明口琴时，他已经是一个技艺高超的手艺人了。他的父亲Johann曾经发明了很多包含木质簧片的乐器，这些乐器的发声原理类似于手风琴，利用皮革条带摩擦簧片发出声音。Friedrich用金属簧片建立了他的第一个模型，用来研究气流对声音的影响。他将他的第一个成果命名为aura，aura只有吹气簧片，并且这些簧片按照半音阶排序，很快他发现，在上面吹奏曲子时，声音非常迷人。就这样，这种原始口琴在19世纪前半期赢得了一定的名气，但由于aura的制作非常耗费精力，并且每个都必须单独制作且造价昂贵，它的广泛普及受到了阻碍。当时，它的质量大概也不能保证。尽管有这么多不足，许多制造商从事着口琴制造，这些厂商主要分布在奥地利（Austria）的维也纳(Vienna)，萨克森（Saxony）的克林根塔尔（klingenthal）和德国南部的乌腾堡（wurttemberg）。&lt;/p&gt;

&lt;p&gt;今天关于这些早期的口琴我们已经知之甚少了。但它们大概是按照Knittlinger或是Wiener系统制造和调音的，当然，那时Knittlingen出产的乐器享有最高的荣誉。&lt;/p&gt;

&lt;p&gt;后来，来自乌腾堡（Wurttenmberg）的特劳辛根（Trossingen）的Weiss和Messner也开始了制作口琴。这种明显的潜在商机刺激了另外一个钟表匠，他俩的老乡，Matthias Hohner。在1857年，他开始大规模的生产。在他开始口琴生意的第一年，他和他的妻子还有一个助手，成功的生产了大约650个口琴。Hohner相对于他的竞争者，建立起了巨大的优势。但是，在1862年，他认识到一个事实，他的产品的最大的市场并不在欧洲，而是在美国！当时美国正处于南北战争后的恢复期，这种社会环境加上西进运动，共同创造了一个便宜、便携且易于演奏的乐器需求旺盛的市场。&lt;/p&gt;

&lt;p&gt;现在一个至关重要的人物该登场了，他就是来自于波西米亚（Bohemia）的乐器工匠Josef Richter。在大约1847年他发明了至今仍以它的名字命名的音阶系统，关于这个音阶系统，后面我会详细的解释。有了Richter音阶的诞生，才有了布鲁斯口琴后面的一切。Richter在口琴中加入了吸气簧片，并且只使用同属于一个大音阶(Major Scale)的音，并对它们进行排列，使得吹气是主音（Tonic）和弦排列，而吸气是属七（Dominant 7th）和弦排列；以C调为例，吹气为C和弦，吸气就变成G7和弦。Richter System的两个和弦适合演奏当时的民谣音乐，演奏简单，并且没有听起来感觉不需要的音。Hohner在十九世纪八十年代早起就开始采用Richter音阶，因为这种音阶排列被证明在美国非常受欢迎，同时，现代机械的引进让他能够开始更大规模的工业生产。很快，Hohner每年将百万计的Richter音阶口琴Marine Band运往美国。事实上，从那以后，美国一直都是世界上最大的口琴市场。&lt;/p&gt;

&lt;p&gt;至此，产生了两个具有深远意义的结果：第一，使得Hohner走上了成为世界上最大的乐器制造商之一的道路，以后，Hohner在德国本土并不成熟的口琴工业上逐步吞并它的竞争者，并且开始扩张。第二，大量的Richter口琴涌入美国，使得欧洲文化和非裔美国文化历史上最硕果累累的音乐大融合之一得以发生：随着如此多的源自欧洲的口琴涌向美国，而一旦美国的黑人开始吹起口琴，他们就在这个乐器中发现了连口琴制造者都无法想象的东西。&lt;/p&gt;

&lt;p&gt;不知道什么原因，全音阶Richter口琴（Diatonic Richter Harmonica）传入美国后，会被称为French Harp或Harp（Harp原意为竖琴）。它在美国迅速的普及起来，无疑是因为它的廉价、小巧和易于演奏。或许正是因为这个原因，口琴受到了黑人群体的欢迎，他们刚刚从奴隶制中解放不久，还极度穷困。几乎没有人怀疑，是黑人用几乎是虐待口琴的吹奏方式，摸索出用口琴吹奏布鲁斯音乐的方法来。&lt;/p&gt;

&lt;p&gt;从Richter口琴到美国起，到1924年第一张布鲁斯唱片诞生的四十多年间的某一个时刻，一位不知道什么名字的音乐家（也许是一些不知名的音乐家在不同的时间和地点）有了一个重大发现，这个发现彻底改变了布鲁斯口琴的演奏方式，为口琴成为今天我们所知道的布鲁斯口琴铺平了道路。不幸的是，究竟是谁做出了这个重大的发现，我们无从考证。这位音乐家发现，当他不在口琴的主音调上吹奏，而在从七和弦上吹奏，即从吹气和弦变为吸气和弦时，产生的音乐与用主音调演奏出来的民间音乐（当时口琴主要就是为了演奏这种音乐）完全没有关系。他大概也发现，在吹奏时通过改变嘴巴里气流空间的形状，能够使得一些音调降低：压音(bending)就这么诞生了！因为用这种方式口琴工作的如此美妙，他甚至很有可能根本就没有意识到这个乐器制作时根本就没有被打算用这种方式吹奏。从那天起，许许多多新的音乐可能性被发掘出来，它们都刻画着布鲁斯口琴的特点。在第一张口琴唱片中，我们就可以听到模仿狐狸追逐(fox-chase)和火车的声音以及许多典型的布鲁斯装饰句了。如果没有压音和第二把位的发现，这是无法想象的。&lt;/p&gt;

&lt;p&gt;到第一张布鲁斯口琴唱片诞生时，这种演奏方式（压音及第二把位）是如此广泛的运用以至于可以视为口琴演奏的正常方式，我们可以推断这些技巧产生的更早。事实上，这时候所有的吹奏者都同时吹奏第一把位和第二把位，并且他们都在运用压音技术。令人遗憾的是，就通常意义上的布鲁斯音乐而言，1924年以前口琴风格的发展我们已经一无所知了。当时大量的前奴隶都居住在美国南方，那里种族主义盛行，主流社会认为黑人音乐天生就是低等音乐，而且是一种危险的音乐，除非按照白人听众的需求进行修改。虽然录音技术已经存在了超过四分之一个世纪，没有人想到用它来记录“黑人音乐”，直到有一天他们意识到，从“黑人音乐”中有钱可赚！&lt;/p&gt;

&lt;p&gt;从有唱片开始记录布鲁斯口琴后，布鲁斯口琴演奏风格的发展在由Klaus Kilian贡献的精彩章节中详述，由于篇幅的原因，将其单独放在了一章（本书第十章）。（本章完）&lt;/p&gt;

&lt;p&gt;《蓝调口琴指南》（The Harp Handbook)名作拙译&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>博客心理学之 “写博客如做人，都要能抵制诱惑”</title>
      <link>https://pureage.info/2012/01/07/37.html</link>
      <pubDate>Sat, 07 Jan 2012 14:31:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/01/07/37.html</guid>
      
        <description>&lt;p&gt;这个博客开了一个多月，在google中搜索“纯真年代”已经能排在第一页了。昨天发表了一篇带有google过滤词的文章，很快的，再搜索“纯真年代”，点了几十页都没看到这个博客的影子。&lt;/p&gt;

&lt;p&gt;在带着些许失意不断翻页时，我忽然愣住了。然后苦笑一下，关掉了google。&lt;/p&gt;

&lt;p&gt;回想一下，我为什么要开始写博客呢？主要有两个目的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;给自己一个练习写文章的地方。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在时间的推移中，总结、思考一些东西。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，从一开始，我就毫不理会什么SEO之类的东西，就当每年花个一百多块钱买个日记本了。我一直以为我都是这么做的。如果没有发生本文开头提到的事情，我甚至都不会意识到，原来我经常（几乎每天）都有在google中搜索“纯真年代”的习惯。想到了一个笑话，某人宣称：“我最讨厌三种人，一种是种族主义者，一种是黑人”。顿时心里涌起一阵寒意。原来尽管我总是自己告诉自己，我丝毫不关心任何访问量的问题，但实际上却在每天干着关心访问量的事，而且是无意识的。反思之后，我又是一阵喜悦，因为我大概又成熟一点了。&lt;/p&gt;

&lt;p&gt;我们必须承认，人下意识的行为都是有原因的。思考一下，得出结论：关注能否在搜索引擎中靠前的搜索出自己的博客，其实就是我的一种虚荣心在作怪。当然由于很多网站自身的定位，它必须关注各种SEO技巧，这也是它们存在的意义，例如我开了一个公司，并为之做了一个网站，我当然得关注这个网站的一切数据，此时虽然也有虚荣心在其中，但已是可以忽略不计了的非主要因素了。但我既然我的博客定位仅仅是上面两条，这个定位已然是自己深思熟虑的结果，为什么还会让虚荣心左右我的行为呢？这是个值得思考的问题。&lt;/p&gt;

&lt;p&gt;首先，我们必须承认，人是有虚荣心的。就像人都是自私的一样，这个是继续展开讨论的前提。既然虚荣心是无法根除的，那么经常告诉自己“我不关注访问量，这个博客只是写给自己看的”就是在掩耳盗铃，是非理性的，因为如果真的严格按照“丝毫不关心访问量”来执行的话，就类似于否认人的虚荣心。所以虽然表面上我的大脑和我本身达成了一致，但实际上这些自我对话并没有真正说服自己。&lt;/p&gt;

&lt;p&gt;那么，应该怎么解决呢？&lt;/p&gt;

&lt;p&gt;第一，承认自己还是比较关心博客的访问量的，即真正承认自己虚荣心的确存在。所以我这段时间经常关注排名并不是什么不对的事情，如果说我现在有些自责，那是因为这些行为浪费了很多时间。但如果仅仅是为我本来就不可能做到的一件事情（完全不关注访问量）而自责，这个自责本身也是在浪费时间，so，恶性循环。所以我需要跳出这个思维怪圈。&lt;/p&gt;

&lt;p&gt;第二，真正说服自己。在承认自己还是比较关注博客的访问量的基础上，我也必须承认，我的时间和精力是有限的：经营这个博客只是自己众多业余爱好中的一件事，我不可能在上面花很多精力。但是如果仅仅这样，还是无法真正说服自己，因为目前为止只承认了两个事实：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;我关心博客访问量是正常的。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我的精力是有限的，不应该过度关注。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;事实上这两点我一开始就知道，但我还是在无意识的状态下作了过多的关注。原因在于这两点没能达到互相良好的作用，在具体实施起来时，比如说我现在就在google中搜索“纯真年代”，我到底是该告诉自己我这是在做一件正确的事情并继续搜索出结果，还是该告诉自己我已经开始过度关注了并关闭搜索引擎呢？&lt;/p&gt;

&lt;p&gt;所以，真正意义上的说服，必须建立在两者的统一上。仔细想一下，博客的排名和访问量会不会因为我每天去查看它而变化呢？当然不会，博客的排名和访问量必须建立在博客长期以来形成的质量的基础上。而我先前做的那些事情，对于提高博客质量根本没有丝毫作用，有这些时间，不如用来阅读、思考、写作。这样，关心博客访问量和避免浪费时间就走在了同一条战线上。&lt;/p&gt;

&lt;p&gt;记住，任何有意义的事情都不可能一蹴而就，要想让博客有质量，就要花更多时间去提高自己上。博客只是把你的思考用文字表达出来而已。例如，酷壳的高质量和广受欢迎，不是一两年才建立起来的，酷壳的作者陈皓早在七八年前就在CSDN上写技术博客，并发表了在互联网上广为流传的《跟我一起写makefile》和《用GDB调试程序》（我个人就是这两份资料的受益者，然后主动搜索才知道陈皓，进而知道并关注酷壳的），这么多年的积累，才造就了今天的陈皓和酷壳。至于我这个博客，虽然定位并不是想达到那么多人关注，但提高每一篇文章的质量无论是于己还是于人，都是必须的。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Son of a bitch 的给力翻译</title>
      <link>https://pureage.info/2012/01/06/36.html</link>
      <pubDate>Fri, 06 Jan 2012 12:39:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/01/06/36.html</guid>
      
        <description>&lt;p&gt;自从学英语开始，很多骂人的单词都是从英文电影里学会的，尤其是f字母打头的那个单词更是满天飞，据有人统计，一部《低俗小说》里“fuck&amp;rdquo;出现的次数是271次。除了fuck外，另外一个常见的骂人的短语就是”son of a bitch&amp;rdquo;了，经常被翻译为“狗娘养的”、“婊子养的”、“王八羔子”等等。那么除此之外呢？看看下面的两张电影截图吧：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;ldquo;son of a bitch!&amp;rdquo; 翻译为”牛逼啊!&amp;rdquo;&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/son-of-bitch-1.jpg&#34; alt=&#34;son-of-bitch-1.jpg&#34; /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;you such a son of a bitch!&amp;ldquo;翻译为“你这个傻逼！”&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/son-of-bitch-2.jpg&#34; alt=&#34;son-of-bitch-2.jpg&#34; /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;根据电影中的上下文语境，这两处翻译都很给力。尤其是第一幅图中，确实没有单纯骂人的意思。看来同样的一个son of a bitch，用不同的语调说出来意思大相径庭。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>那些西部电影中中国劳工的身影</title>
      <link>https://pureage.info/2012/01/06/33.html</link>
      <pubDate>Fri, 06 Jan 2012 06:44:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/01/06/33.html</guid>
      
        <description>&lt;p&gt;在西部电影中，经常可以看到中国劳工的身影，基本都是以两种形象出现：1.洗衣工，2.铁路工人。在电影中，他们地位低下，不记得是哪部电影中有这么一个场景：一个铁路老板对他的手下说，下次多雇点黑鬼，这些中国人干活太差劲了。&lt;/p&gt;

&lt;p&gt;我的一些截图：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Seraphim Falls (2006)（王牌对决/天使降临/堕落天使/追杀双雄）&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/laogong-1.jpg&#34; alt=&#34;laogong-1.jpg&#34; /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3:10 to Yuma（2007）（决战犹马镇/决斗犹马镇/决战3:10）&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/laogong-2.jpg&#34; alt=&#34;laogong-2.jpg&#34; /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Gunless (2010)（无枪/无枪侠）&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/laogong-3.jpg&#34; alt=&#34;laogong-3.jpg&#34; /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;C&amp;rsquo;era una volta il West (1968)（Once Upon a Time in the West/西部往事/狂沙十万里/万里狂沙万里愁）&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/laogong-4.jpg&#34; alt=&#34;laogong-4.jpg&#34; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上是一些西部电影中中国劳工的身影。  除了西部电影外，其他一些经典电影里也有华人的身影，例如《美国往事》里的中国烟馆。而且，中国人的形象在美国电影中也是变化的，这些当然是由各种复杂的社会背景决定的。关于华人在美国电影中的形象的发展与变化，涉及到的知识点和工作量太多，非我目前所能完成。&lt;/p&gt;

&lt;p&gt;再附两张图：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Once Upon a Time in America (1984)（美国往事/四海兄弟/义薄云天）&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/laogong-5.jpg&#34; alt=&#34;laogong-5.jpg&#34; /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;The Dead Pool (1988)（赌彩黑名单/虎探追魂）克林特伊斯特伍德《肮脏的哈里》系列之一&lt;br /&gt;
&lt;img src=&#34;https://pureage.info/img/laogong-6.jpg&#34; alt=&#34;laogong-6.jpg&#34; /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>本书简介(The Harp Handbook)</title>
      <link>https://pureage.info/2012/01/05/26.html</link>
      <pubDate>Thu, 05 Jan 2012 09:21:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/01/05/26.html</guid>
      
        <description>&lt;p&gt;全音阶布鲁斯口琴，也叫10孔单音Richter口琴，可以说是一种奇怪的乐器。口琴是一个庞大的家族，包括低音口琴（Bass）、和弦口琴（Chord）、半音阶口琴（Chromatic Harmonica）、复音口琴（Tremolo）、重音口琴（Octave-tuned Harmonica）以及其它许多新奇的乐器，当然布鲁斯口琴也是其中之一。毫无疑问，其中布鲁斯口琴是其中分布最广的乐器。&lt;/p&gt;

&lt;p&gt;尽管布鲁斯口琴现在的模样已经诞生了至少150年，而且在各种音乐环境中被成功使用，但它从来就没有被真正视作一种严肃的乐器。当你说你是一个布鲁斯口琴手时，那些演奏“正规乐器”的“真正的音乐家”会对你嗤之以鼻。&lt;/p&gt;

&lt;p&gt;这种态度也并不是完全没有道理。一方面布鲁斯口琴有着它与生俱来的局限性，另一方面，理论背景、教学资料以及从好的老师身上学习的机会的缺少，应该为口琴目前的这种可疑的地位负相当程度的责任。在听到布鲁斯口琴能够演奏出动人的音乐后，很多人仍然会觉得相当惊奇，因为他们一直以为这东西只能发出噪音。尽管也有很多相反的争论，但布鲁斯口琴的应用经常被一种陈词滥调所局限，按照这些说法，口琴适合演奏的仅仅是“篝火音乐、特效音乐、布鲁斯音乐”等，而不是真正的音乐。&lt;/p&gt;

&lt;p&gt;尽管今天有着比以前更多的优秀的布鲁斯口琴演奏者，他们能用以前无法想象的方式来表演，但现在仍然存在着巨大的信息鸿沟。许多杰出的口琴手并不真正知道他们手中的乐器是如何工作的，以及能够在多大程度上克服其内在的限制。我之所以要写这本书，就是想尽我所能，弥补这个信息鸿沟，让其他人有机会提高演奏的水平，增进对这种乐器的理解。&lt;/p&gt;

&lt;p&gt;跟许多其他的乐手一样，我花了好多年才弄清楚口琴是怎么工作的，而事实上，如果当初我身边有人可以向我口传心授的话，我可以只花半个小时就把这些简单的东西弄明白。这本书的读者可以是任何一个希望弄懂布鲁斯口琴机理、知道如何使用它的人。这不是一本歌曲集，也不是一份口琴使用说明的教程。尽管主要针对的读者是那些稍微有一些吹奏基础的人，但这本书包含许多对初学者有用的材料，基本上它可以被当做一本参考书，按照你的需要来使用。&lt;/p&gt;

&lt;p&gt;本书的章节涵盖了不同把位（第一把位、第二把位等等）的知识、一些重要的演奏技巧、各种风格（布鲁斯、乡村、摇滚、爵士等）、以及不同的音阶。一个扩展的小节涵盖了布鲁斯口琴如何工作以及解释了哪些音可以通过压音或超吹获得（据我所知，这是第一次有人系统的解释这些东西），以及能够压音或超吹到什么程度及为什么能这么做。我也对布鲁斯口琴的历史做了一个简单的介绍，对它的生产加工做出了一些描述，也给出了单独的一节来讲述关于口琴维修、保养、调音以及一些尝试性的话题。最后给出了一章来讲述带电演奏以及一些让你的技巧更加纯熟的练习，还给出了一份不完全的唱片列表。&lt;/p&gt;

&lt;p&gt;有两个朋友为本书贡献了一些内容，Klaus Kilian贡献了关于布鲁斯口琴风格的发展部分，Lars Luis Linek描述了他用口琴表演现代爵士乐的方法。&lt;/p&gt;

&lt;p&gt;人们被布鲁斯口琴吸引的首要原因之一是仅需很少的乐理知识就可以学会如何用它演奏简单的乐曲，所以初学者很快会获得一种成就感。布鲁斯口琴是一种鼓励用非乐理的方法演奏的乐器，即兴表达而不考虑你到底演奏的是什么是一件很令人愉悦的事情。某种程度上说，这样就足够了，但如果你真的想要掌握它，有必要认识到所有优秀的口琴师们会有意无意的把自己的演奏结构化，这样会让你的表演更有乐感。&lt;/p&gt;

&lt;p&gt;我不打算把这本书写成一本乐理教材，事实上我也写不出来。但是如果你想和其他人一起演奏的话，就有必要开始接触一些音乐理论的知识。这些乐理知识应用在表演12小节布鲁斯、爵士乐以及其他音乐时。布鲁斯是一种非常简单的音乐形式，所以乐理知识的水平不需要太高。许多伟大的口琴家门凭借直觉演奏，并且否认运用了任何乐理知识。尽管他们不能清晰的表达出来他们是如何演奏的，但他们知道他们在做什么，他们知道在哪些和弦上哪些音会动听。这是一种实践中的音乐理论。&lt;/p&gt;

&lt;p&gt;为了讲述吹奏口琴的各个方面，我用了一些音乐上的术语，也许不是所有的读者都能看懂，所以，我试图把所有的东西用图表和乐谱的形式表现出来。例如，我不知道如何描述不同把位的模态特征，但无论如何，如果你不懂我在说什么，尝试着按照我在图表中所画的那样吹奏出来，你就会理解我想表达什么了。&lt;/p&gt;

&lt;p&gt;布鲁斯口琴是一种独一无二的乐器，它独特的声音有强烈的表现力，而且，如果有好的教学，它会在现代音乐中扮演比当前更重要更广泛的角色。我希望本书中的信息能鼓励其他人对这个小巧漂亮的能提供令人惊异的可能性的乐器产生兴趣。有意识的去开发口琴的表演潜能的人越多，口琴终有一天会获得它应有的音乐地位的可能性就越大。&lt;/p&gt;

&lt;p&gt;布鲁斯口琴手是一群奇怪的人。我们手中的并不引人注目的乐器对它的追随者有着异乎寻常的吸引力，人们却不会无故谈论“口琴怪胎”。或许这是因为布鲁斯口琴是如此怪异的乐器，它表面上看非常简单，但你越接近它，就会发现它越复杂。这是一本由一个“口琴怪胎”写的书，献给那些“口琴怪胎”们。事实上我无法想象挣扎着进入布鲁斯口琴世界的其他任何人，所以，如果你正在那么做，大概这就是一种命中注定。作为开篇，我希望这几页中唠唠叨叨的长篇大论能够有一些帮助，记住：当有疑惑时，拿出口琴吹就行了！&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>两个奔跑的男人--------3:10 to Yuma(决战犹马镇）观后感</title>
      <link>https://pureage.info/2012/01/04/25.html</link>
      <pubDate>Wed, 04 Jan 2012 07:21:00 +0000</pubDate>
      
      <guid>https://pureage.info/2012/01/04/25.html</guid>
      
        <description>&lt;p&gt;我看电影向来慢一拍，这部2007年的电影到现在才看也算正常，如果不是最近扫荡各种西部片扫到它了，也不知道什么时候会看。&lt;/p&gt;

&lt;p&gt;对整部电影的印象都定格在两个在枪林弹雨中奔跑的男人身上。&lt;/p&gt;

&lt;p&gt;最后，在车站里，Dan对Ben说，我其实并没有那么顽固，死守着那块没有希望的荒地，只是因为我的小儿子两岁时得了肺结核，离不开干燥的天气。Ben问，你为什么要对我说这些呢？Dan回答说我也不知道，可能是只想让你知道我没那么顽固吧。这时候他心里想的是什么呢？也许是什么都没想，也许是因为自己让Ben走上绞刑架而心有愧疚吧。Ben接着说，既然大家都那么开诚布公，那么我也告诉你，我曾经在犹马镇待过两次，两次都逃掉了。其实是想让Dan放心，即使到了犹马镇我也死不了,你无需自责。然后两人相视一笑。&lt;/p&gt;

&lt;p&gt;此时此刻，无需多言。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>停止坐井观天，是时候让“我个人认为”见鬼去了！</title>
      <link>https://pureage.info/2011/12/30/24.html</link>
      <pubDate>Fri, 30 Dec 2011 06:24:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/30/24.html</guid>
      
        <description>&lt;p&gt;不知道从什么时候开始，在互联网BBS上、在和同学交流一些涉及到强烈个人立场或看法时，我都习惯性的在每句话的前面或后面加上一句：“我个人认为&amp;hellip;”。今天反思一下这个习惯是怎么养成的以及这个习惯有没有存在的必要。&lt;/p&gt;

&lt;p&gt;跟任何习惯一样，它也是经历一个从无到有的过程。这个过程其实是一个从“我就是这个世界”到“这个世界并不是围绕着我转的”的认识的转变过程，如果我们能把这个过程中的每一次心理活动都记录下来的话，我们一定会同意这是一个相当痛苦的过程。&lt;/p&gt;

&lt;p&gt;在我们一出生来到这个世界时，饿了就会哭，大人瞪我们一眼我们也会哭，总而言之就是希望这个世界所有的事情都必须符合我们的意愿，让我们舒服。我总是很清晰的记得小时候的一件事：一次过年时在外婆家时，我拿着爸爸新买给我的火药枪（一种塑料做的左轮玩具手枪，去商店买配套的弹药，火药是装在一个塑料圆圈的十几个小洞里，圆圈刚好能装到左轮上，手枪的撞针打到那些小洞上时就会发出砰砰的枪声）到大人正在打麻将的屋子里玩，这时候我爸爸骂了我一句。我已经记不得他是怎么训我的了，但我显然是无法接受这种训斥，蹲在门外，越想越难受，于是拿起一块砖头把那把玩具手枪给砸了个稀巴烂。这大概是那个年龄小孩以自我为中心的一种典型表现。后随着年龄的增长，我们逐步开始了解周遭的人和事，了解到他们并不是围绕着我们转的，于是我们就开始变乖了，至少是在他们面前变乖了。同样，在漫长的成长过程中，我们渐渐意识到自己的想法并不一定就是别人的想法，即使你确信你的想法是对的，你也无法去说服每一个人都同意，另外也许在过于张扬的表达自己的看法时，就会有另外一些同学受到伤害。于是我就学会了在说话时加一个“我觉得吧&amp;hellip;”。&lt;/p&gt;

&lt;p&gt;在互联网的过程大概也是这样。互联网的开放程度让我们更深一步的认识到世界的多样性。你的意见就像大海里的一滴水一样，无论你的身份是什么，无论你学识怎样，你都无法代表任何人，你的观点很有可能而且是极大可能是错的。大一刚接触网络时，我像发现新大陆一样，经常在泡在内网的BBS上，信息铺天盖地而来，而我几乎没有任何甄别能力。记得有一次看到大家为一个日本人如何虐待中国留学生的帖子讨论，当然这个帖子是假的，基本上当时大家都在一边倒的谩骂着，但也有一些人在我当时看来很冷血质疑帖子的真实性。我想现在，很少有人能被这样的假消息煽动起来吧，慢慢的我们就学会了主动对信息进行甄别、证实。在BBS上混多了，就会知道一件事情很容易引起对骂，没有任何意义的谩骂，而不管是哪一方，其实都不能保证自己是对的。于是为了避免这种情况，估计很多人都和我一样，在一些观点性的地方都会加上“我个人认为&amp;hellip;”或者“这只是我个人的看法而已。”&lt;/p&gt;

&lt;p&gt;总结一下，之所以我们会在语言表达中养成这种习惯，归根到底是一种自我保护意识：避免引起骂战当然是一种自我保护，即使是避免伤害别人其实也是为了避免让自己获得一种“自大，目空一切”的形象，何尝不也是一种自我保护呢。&lt;/p&gt;

&lt;p&gt;分析了这个口头禅是如何产生的之后，我们在来看看它到底有无存在的必要。&lt;/p&gt;

&lt;p&gt;在我们的心智还没有足够成熟时，就像上文所述它是如何产生的一样，这种做法当然是有必要的。但如果我们愿意或者有能力进行反思的话，会发现这个习惯有若干弊端：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;让人习惯了胆小怕事。加上“我个人认为”后，潜台词就是：“我说的也不一定对，所以你没有必要对我发动人身攻击，我都说了只是我个人的看法，你还骂我，就是你素质太低了。”&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;让人习惯了逃避责任。习惯了这句口头禅后，我们会习惯于对自己的言论抱这样一种态度：“反正这只是我个人的意见，我个人的意见当然有可能是错的，我又没说一定会怎样，所以我当然不用对这句话负责了。于是慢慢我们习惯了在发表言论前不经过任何理性思考，只在大脑里过一遍甚至连大脑都不过就脱口而出，反正只是我个人认为嘛。”&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;让自己的思维变得狭隘。这其实是一个矛盾的地方，一方面“我个人认为”的产生源自于我们认识到世界的多样性，另一方面我们习惯了使用它之后却可能会变的更狭隘，我们表面上不偏激，但我们也很难接受别人不同的意见。因为“我个人认为”这几个字其实包含了这么一层意思：“我承认世界的多样性，我同意你有你的看法，但我也有我自己的看法，那么你休想说服我。Let&amp;rsquo;s agree to disagree”。在话还没说出去就持有这样的态度是一件多么可悲的事情。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我于是编出了这么一个故事：那只著名的倒霉的青蛙，当有一天通过鸟儿的教导，终于意识到原来天空不是自己看到的巴掌大一块之后，鸟儿对它说，你跳出来吧，外面的世界很精彩，倒霉青蛙说，我现在知道天很大很大，但是对我而言，这么一块天足够了。写到这里，我的态度很明确了，是时候抛弃“我个人认为”了。自己的观点是什么样就是什么样，拿出来讨论就是为了让自己获得进步的。不能因为别人的语气影响自己的思考，即使对方还以漫骂，但说出的道理仍是对的，那么也要坚决丢弃以前的错误的看法并对对方心怀感激。至于那种毫无意义的漫骂，让它去吧，就把自己当做一个看客，继续认清世界的多样性了。&lt;/p&gt;

&lt;p&gt;PS：推荐阅读李笑来的&amp;rdquo;我在写，你在读，有人在争吵，更多的人在看&amp;rdquo;。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>把懒惰当朋友</title>
      <link>https://pureage.info/2011/12/29/23.html</link>
      <pubDate>Wed, 28 Dec 2011 16:22:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/29/23.html</guid>
      
        <description>&lt;p&gt;早上走在通向教研室的楼梯上时，忽然意识到，已经走楼梯走了一个多月了。其实只有三层楼，算不得高，但想起这一个月每天早中晚在这个楼梯里来回，也还是挺欣喜的；回头再想想自己居然坐了近两年的电梯，顿时一阵忏悔。&lt;/p&gt;

&lt;p&gt;回忆一下这个习惯是怎么养成的，我想这个过程其实是对自己惰性的一种解剖。其实很简单，无论用什么崇高的理由，只要让自己坚持走一个星期的楼梯，那么一个星期后，再经过电梯时，甚至都不会看它一眼。&lt;/p&gt;

&lt;p&gt;两年来，不是没有想过舍弃坐电梯，也不是不知道走楼梯比坐电梯好，尤其对于我们这种IT一族。但每次看到电梯门开了，总是不由自主的走了进去，有时是因为赶时间，有时是因为身边有同学一起，不好意思那么个性。于是，从第一天坚持走楼梯到后来偶尔走走楼梯再往后就慢慢变成了不走楼梯。这样，坐电梯就变成了一种习惯，一种懒惰的习惯。&lt;/p&gt;

&lt;p&gt;有人说，所谓的邪恶，就是最厚颜无耻的懒惰。懒惰简直就是人与生俱来的天性，它无孔不入，无时不在，一不留神，心智就被它俘获。表现出来就是各种习惯：选择坐电梯的习惯；拖延的习惯；半夜用手机看电子书的习惯&amp;hellip;我们在坚持这些习惯时，甚至还振振有词。比如说，当偶尔一个“走楼梯吧”的念头在心里刚一冒尖，你就会想：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;这多耽误时间啊，我要赶快到实验室去学习呢。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我跟他一起，他坐电梯，我走楼梯，不好吧？&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在来看看这两个理由是多么的不看一击：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;走楼梯真的耽误你的时间么？一共才三层楼，走上去也花不了一分钟时间，在实验室少刷点网页都能节省出以几十分钟计的时间来。更荒谬的是，并不是每次都能刚好赶上电梯，所以我宁愿选择等一会，而最初的接口居然是节省时间！&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;你不跟同学一起坐电梯真的是一件那么难为情的事吗？其实你只要你一句话，你大可以说服身边的同学跟着你一起走那一趟。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;推翻了这两个赤裸裸的接口，心理顿时一阵后怕。我到底还有多少被这样类似的借口披上合理化外衣的习惯？&lt;/p&gt;

&lt;p&gt;可见，保持理性真是一件说起来容易，做起来难的事情。在这个例子里，只要稍微保持一点理性，就不会让自己被这样没有任何说服力的借口所绑架。很显然，强大的不是这些借口，而是内心的懒惰。懒惰在我们的有生之年，是不可能完全战胜的，因为它是个抽象的东西，是人的一种特质，它会表现在无数的行为习惯中。了解懒惰是我们的特质其实是很重要的，因为这样，在于其做斗争的路上，我们才不会觉得孤独。&lt;/p&gt;

&lt;p&gt;换个角度来说，既然懒惰是个抽象的东西，我们就不应该不断的暗示自己要战胜懒惰。因为你怎么可能战胜一个虚无缥缈的懒惰呢？不可能说要养成勤奋的习惯吧？如果真有勤奋这样一种习惯，那么它和懒惰的过招就像武侠小说里的意念派高手灵魂出窍了。&lt;/p&gt;

&lt;p&gt;既然懒惰必须以各种具体的习惯表现出来，那么我们就必须来养成与之对应的习惯来对抗。当这些具体的习惯养成后，懒惰甚至会变成我们的朋友，例如我竟然会被同学嘲笑“你怎么这么懒啊，连半分钟的电梯都不愿意等”。所以通过短期的阵痛，在一些具体的习惯上战胜了懒惰之后，懒惰反过来就会变成你的朋友，防止它以前所依附的那种具体习惯卷土重来。&lt;/p&gt;

&lt;p&gt;当体会到我竟然可以和懒惰成为朋友时，像《把时间当朋友》里李笑来所说的那样，我真的有一种重生的感觉。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>那猫那狗那火</title>
      <link>https://pureage.info/2011/12/27/22.html</link>
      <pubDate>Tue, 27 Dec 2011 05:14:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/27/22.html</guid>
      
        <description>&lt;p&gt;无意中看到一幅画:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/cat_and_dog.jpg&#34; alt=&#34;那猫那狗那火.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;忽然想起了一首诗。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;问刘十九&lt;br /&gt;
白居易&lt;/p&gt;

&lt;p&gt;绿蚁新醅酒，红泥小火炉。&lt;br /&gt;
晚来天欲雪，能饮一杯无？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://pureage.info/img/songliushijiu.jpg&#34; alt=&#34;问刘十九.jpg&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>便宜卖了，一块钱一斤，两块钱三斤！-----生活中的非理性</title>
      <link>https://pureage.info/2011/12/26/19.html</link>
      <pubDate>Mon, 26 Dec 2011 12:11:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/26/19.html</guid>
      
        <description>&lt;p&gt;《怪诞行为学》里第一章讲讲述了这么一个关于经济学人杂志订阅的案例。订阅者有如下几种选择：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;单订电子版：59美元&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;单订印刷版：125美元&lt;/li&gt;
&lt;li&gt;合订印刷版加电子版套餐：125美元&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;《怪诞行为学》的作者在麻省理工学院的斯隆商学院的100个学生中做出调查，结果如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;单订电子版59元：16人&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;单订印刷版125美元：0人&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;印刷版加电子版套餐125美元：84人&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后作者去掉第二项看上去毫无作用的单订印刷版进行第二次调查，结果选择59美元单订电子版的从原先的16人增加到68人，选择125美元套餐的从原先的84人下降到只有32人。&lt;/p&gt;

&lt;p&gt;这是商家利用消费者非理性的一个典型案例。&lt;/p&gt;

&lt;p&gt;一直觉得书中的案例虽然精妙，但还是挺遥远的。但就在前天，却忽然发现原来类似的情况一直在我们身上发生着。&lt;/p&gt;

&lt;p&gt;学校超市的恰恰牌瓜子有两种包装：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;70克：1.9元&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;150克：4.8元&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我买瓜子有这么一个习惯：时间不够或者手上钱不多时，就买小包，当准备花上几个小时专门看看电影，就买大包的，而我潜意识里一直觉得大包比小包划算。&lt;/p&gt;

&lt;p&gt;但事实情况是什么样的呢？稍微计算一下就能得出（1.9/70）*150=4.07，这种题是小学刚学比例运算时最常见的题。也就是说，按照小包的单价买大包只需要4.07元，而单独买大包却要4.8元，多了几乎整整一元钱。显然如果想多吃点瓜子的话，买两包小包比买一包大包要实惠。&lt;/p&gt;

&lt;p&gt;无独有偶。成都有个山寨肯德基的派乐汉堡，里面有一种全家福套餐，价格比单独买其中每一份要贵一些。&lt;/p&gt;

&lt;p&gt;不由得想起一个很老的笑话：一小商贩大声叫卖：桔子一块钱一斤，三块钱两斤！一直以为这个笑话的重点是商贩的口误，现在看来这个笑话正在被广泛应用。&lt;/p&gt;

&lt;p&gt;其实都利用了消费者这样一种心理：商家又不傻，怎么会干这种事呢？结果商家不傻，自己傻了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>人人都是民族主义者</title>
      <link>https://pureage.info/2011/12/25/18.html</link>
      <pubDate>Sat, 24 Dec 2011 17:20:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/25/18.html</guid>
      
        <description>&lt;p&gt;对不起，我起了一个骇人听闻的题目，有夸张的嫌疑。因为要得出这个结论，必须对地球上每一个活着的人进行调查，确定他们都是民族主义者才行，但它确实代表了我的一种真实的情绪，姑且就非理性一次。加上一些修饰语可能会好一些：在一定范围内，人人都是民族主义者。&lt;/p&gt;

&lt;p&gt;促使我得出这个结论的在一次校园事件中“人民群众”的表现，当然，人民群众就是各位同学了。&lt;/p&gt;

&lt;p&gt;在前两天，我所在的大学的图书馆发生了一起桃色事件：“研修门”事件。简单的说一下事情经过，我们学校的图书馆除了公共自习室之外，还有一些包间，这些包间称为“研修室”，顾名思义，学校设立研修室的本意当然是给那些学习起来、研究起来特别能吃苦，特别能战斗的同学使用的。客观的说，我们学校的学风相当好，自然这些包间供不应求，因此你要用到这个包间，就必须每天很早起来到图书馆排队申请。就是在一个这样的研修室内，前天晚上七点多，一对情侣在里面嘿咻起来，为了避免被看到，他们用了一把伞把窗户挡了起来。这样，在同一楼层，基本是看不到什么的。但是，由于图书馆构造，在楼上，可以根据雨伞后面若隐若现的男主角的动作想象出窗户里发生的事情。由于那把雨伞的作用，你大概只能看到一个男生的头发和他光着的脚，女生应该是躺在课桌上，但全身被伞遮住。于是当场在图书馆引起轰动，自然有人拿出手机拍下了一段视频。于是当晚一直到昨天晚上，学校内部论坛都充斥着对这件事情的讨论。大部分同学的观点还是在声讨这两个当事者做事不分场合不分地点的。另外还有很多好心者呼吁要保护当事人，希望快点平息此事。&lt;/p&gt;

&lt;p&gt;但是这种事情涉及到另一个问题：该不该往外传？一位ID为金豆豆的同学，把一张图片贴到了微博上，赋予了简单的文字说明。比较搞笑的是，他传的这张照片的主体虽然也仅仅是一把立在窗户后面的伞，但这把伞并不是这次事件中的那把伞，但地点仍然是在图书馆研修门（看来这事一直在发生，从未被禁止）。客观的说，从金豆豆同学发的微博是看不出任何信息的，你完全可以说他用一把伞哗众取宠。&lt;/p&gt;

&lt;p&gt;但是情况瞬间发生了变化。内网论坛上被一种声音淹没：“金豆豆是个大SB，败坏学校荣誉，罪该万死。”刚刚还势不两立的骂男女主角的、为男女主角辩护的，瞬间结为同盟军，声讨金豆豆。金豆豆惨遭人肉，QQ号、人人账号都被曝光，姓名也被猜测出来，刚才还很善良的呼吁保护男女主角的骂的最凶，这会就没提“保护金豆豆”。他们的理由很简单：“这个事情在怎么样，都只能在学校里传播，绝对不能传到外网，因为传到外网，学校的荣誉会受损。学校的荣誉受损，受害的就是学校的普通的同学，可能在就业等问题上收到影响，所谓家丑不能外扬。&lt;/p&gt;

&lt;p&gt;我想说的是一下几点，当然一点都不专业，仅尝试从常识的角度来分析一下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;传播这次事件中的图片、视频是完全不侵犯肖像权、隐私权的。首先来说肖像权的问题，一张没有你面容的照片，是无论如何不存在肖像权问题的。如果那把伞有意识的话，顶多是侵犯了这把伞的肖像权。其次，说说隐私权的问题。公共场所的隐私权判定本身是个很复杂的事情，但就这个事件来说，关键仍在于图片或视频仅仅能看到一把伞和男主角的些许头发，又何谈隐私权？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;“愤怒的群众”人肉金豆豆同学的行为却是会侵害其肖像权和隐私权的。试想，如果并没有什么过失的金豆豆同学的生活因此受到影响，完全可以主动维护自己的权益。但在强大的舆论压力下，金豆豆同学删除了自己的那条微博。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;“研修门”这种类似的事件对学校的名誉问题和一般同学的就业没有一丁点关系。其实，这种事情在任何一所大学都有发生，就连清华不是也出了C语言门么。但是清华的就业率会因此受到影响吗？在任何一个周末，去学校图书馆、自习室看看，都会看到很多勤奋苦读的同学，同时，还有很多在实验室、在寝室潜心钻研技术的同学，这些同学才是我们这所大学的脊梁。研修门事件中男女主角被传播的再广，对学校荣誉、对普通同学的就业丝毫没有影响。持有在外网传播会影响学校名声这种观点的同学多半都是庸众，他们自己没什么能力，对学校的荣誉没有任何贡献，所以时刻指望着用XX大学这块牌子来给自己开路，他们的潜台词是，没有XX大学的荣誉，我是混不下去的。那么我想告诉这些坐享其成者，即使有了XX大学的牌子，你们依然不会混得怎么样的。理性的说，这种庸众的意见是最没有参考价值的，但他们的破坏力量却是最大的。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关于这个事件就写这么多，以后进一步要做的功课：查阅相关文献，弄清关于公共场合的肖像权和隐私权到底怎么界定。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>成功者并不遥远　多向身边的人学习</title>
      <link>https://pureage.info/2011/12/21/17.html</link>
      <pubDate>Wed, 21 Dec 2011 14:50:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/21/17.html</guid>
      
        <description>&lt;p&gt;曾经，成功学的书席卷大江南北，在各地校园的书摊上、各机场书店里，各种标有拿破仑·希尔、卡耐基、陈安之、唐骏、李开复等等带有各种闪耀光环的名字的书被各种人群所亲睐。其实不难理解，每个人都渴望获得成功，大部分人都会不满于现状，尤其在这么一个浮躁的年代，“成功”即意味着摆脱“蜗居”的生活，摆脱被人随意欺凌的命运，摆脱富家子弟对你瞟来的“你是农民”的目光。越来越多的人开始意识到，只有成功，才能体体面面有尊严的活着。&lt;/p&gt;

&lt;p&gt;哪里有需求，哪里就有市场：你还记得《我的成功可以复制》、《世界因你而不同》、《做最好的自己》的风行吗？当然，这些都是有来历的书，没来历的那就更是汗牛充栋了：《大格局》、《10天改变一生：终极突破》、《6秒钟改变你的情商》、《30天改变你的人生》、《35岁前要做的33件事》、《20几岁，决定女人的一生》、《20几岁决定男人的一生》，《20几岁，可以改变女人的一生》，《20几岁了，别再犯迷糊了》&amp;hellip;.看出什么了吗？大部分此类书籍都是针对思想并不成熟的、还在懵懂状态的年轻人群（当然，我也是此类人群）。这些人急切的需要一些偶像来给予自己精神力量，于是，时势造英雄，各种大学生教父出现了。&lt;/p&gt;

&lt;p&gt;当《我的成功可以复制》变成了《我的成功可以复印》，当“副教授”变成了“助教”，我揣测，很多人失落了。&lt;/p&gt;

&lt;p&gt;这里我把这些成功学的书称为精神鸦片。就像鸦片并非十足的恶一样，精神鸦片并非一无是处。回忆一下我曾经抽过的精神鸦片，和它们带给我的一些正面作用：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;大一刚入学的时候，在校园地摊上买过一本拿破仑*希尔的《成功法则》。这本书我没有耐心开完，不过迄今为止我仍然记得有一章叫“储蓄的力量”，给了我一些思考。当然不是每天节约多少钱，多少天就可以改变人生这种思考，而是告诉了我一个理财的概念。有了这个概念，这本10元钱的盗版书就可以说物尽其用了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大二时，布莱恩疯狂英语（貌似也是源自李阳疯狂英语）来学校演讲，那时候我是那么一个感性的小孩，被他的演讲给深深感动了。每天早上当大家还在梦乡的时候，我们这群人就到学校一个僻静的地方开始读英语。这个给我带来的正面作用是我确实胆子变大了些。可是，也仅仅起到了锻炼胆子和增厚脸皮的作用了。于是，不到一个月，我的负罪感越来越强烈，脸皮厚是可以，但每天一大早就扰人清梦可就是道德问题了。于是，干脆退出了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;快大四的时候，开始准备考研。每天睡前听听《羊皮卷》里的“坚持不懈，终会成功”，居然神奇的让我一向薄弱的数学考了148。当然是开玩笑的，其实并不神奇，主要原因还是因为学习方法得当：规律作息，从不熬夜，注重基础。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;扯了半天，才想起其实我想说的是，成功者离我们并没有我们想象的那么遥远，当我们对着那些人造的偶像膜拜不已的时候，也许就错过了很多身边的风景。&lt;/p&gt;

&lt;p&gt;子曰“三人行，必有我师焉”。其实我们多学习身边的人所体现出来的优点和成功者的素质，可能比看一万本精神鸦片都要管用。&lt;/p&gt;

&lt;p&gt;本科的一位室友，从大一开始就专注于网站设计，四年来成就斐然。但同时，他也能保持学业的优异，每年都是一等奖学金，最终在我浪费半年时间考研时，他因保研而继续他的学习和业余钻研。&lt;/p&gt;

&lt;p&gt;本科时住对面寝室的一位同学，从大一时开始专注于电子设计，四年来获奖无数。在我前面的一篇日志里提到的那位半夜在走廊看DSP的，即使此人。当本科毕业铁了心要找工作时，竟然被学院一已退休的德高望重的老教授苦口婆心的劝导继续读研，于是被迫选择了保研。&lt;/p&gt;

&lt;p&gt;研究生室友，在研二我觉得去老师公司是浪费时间而选择留在教研室时，他选择了去公司。事实证明，在老师那公司确实是浪费时间。但他在干了无数琐事杂事时，利用业余时间，他把LwIP协议栈源代码啃得通透，时时会有网友慕名向他求助。找工作面试时，信手拿下N多offer.&lt;/p&gt;

&lt;p&gt;教研室的一位师弟，是从一师范类学校考到这所电子类大学的。在实验室每天都不做没意义的事情，除了刻苦钻研技术外，其他各方面也都不落下。一直揣着创业的梦想，事实上，他也是以创业者来要求自己的。如今，他已经成为一位在校老师创办的公司里不可或缺骨干技术成员，同时，带队参加了一个省级的创业大赛，刚刚迈入10强。风投公司要300万买下他们的一系列技术，他仍然自己继续干。因为他相信继续努力一年，他们的前景更广阔。他骨子里就是一个创业者。&lt;br /&gt;
    &amp;hellip;..&lt;br /&gt;
    &amp;hellip;..&lt;br /&gt;
    &amp;hellip;..&lt;/p&gt;

&lt;p&gt;这样的例子举不胜举，而且都是身边距离最近的同学。这些同学取得的成绩各不相同，但他们都有一些共同的特质：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;有清晰的目标或角色定位。并用这种目标或角色的要求来严格要求自己。例如，如果我要创业，那么创业者该有的素质，我都要在日常学习生活中进行锻炼。不了解的同学会说他们谈吐怎么有气质，在各种场合下不怯场等等，但我知道这正是他们每天努力付出的结果：成功的人必有他成功的原因。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;心态积极，眼界开阔。这些身边的优秀同学，绝不是某一方面的巨人，另一方面的矮子。相反，他们往往在各个方面都很优秀，例如，室友是技术牛人的同时，也是个吉他高手。这都源于他们积极进取的心态和开阔的视野，不会自己把自己限制在一个死区里。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;善于利用业余时间，不做、少做无意义的事情，痛恨浪费时间。当我在业余时间看优酷、玩游戏的时候，他们在看一些优秀的博客，看IT咨询，看各种政策新闻。这些对于他们来说，其实确实是休息。但同样是休息，一个纯粹是打发时间，另一个确实还能让自己思考另外一些技术以外的事情。&lt;br /&gt;
&amp;hellip;&amp;hellip;&lt;br /&gt;
&amp;hellip;&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;他们难道不比李开复、唐骏更让我仰慕吗？&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>只是一段听力练习：金凯瑞致伊斯特伍德</title>
      <link>https://pureage.info/2011/12/19/14.html</link>
      <pubDate>Mon, 19 Dec 2011 06:40:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/19/14.html</guid>
      
        <description>&lt;h2 id=&#34;前奏&#34;&gt;前奏&lt;/h2&gt;

&lt;p&gt;长时间不练英语，水平日下。闲来无事，找到一段视频尝试翻译一下，该视频应该是1996年美国电影学会为伊斯特伍德颁发终身成就奖的一小段内容。本来作为听力练习，听懂大意就可以了，但刚好金凯瑞和伊斯特伍德又都是我喜欢的演员，就尽量精听一下吧，权当借机做些整理。当然，由于水平所限，还有几个地方或者几个单词一直没听出来，就随便安一个词先混过去。&lt;/p&gt;

&lt;p&gt;先对本致辞中涉及到的一些名词做个简单介绍：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AFI=American Film Institute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;美国电影艺术学院，简称AFI，美国电影学会。1967年，美国电影工业已经具有超过75年的历史，许多具有开创性的早期电影的胶片正在快速老化、无法得到保存。为了保护民族遗产，成立了两年的国家艺术基金会（National Endowment for the Arts）联同美国电影协会（MPAA）和福特基金会（the Ford Foundation）一起创立了美国电影学会（AFI）。&lt;/p&gt;

&lt;p&gt;1973年，AFI设立了终身成就奖。1987年，他们开办了自己的电影节&amp;ndash;美国电影学会电影节（AFI FEST），每年举办一次。AFI FEST是第一个经国际电影制片人协会（FIAPF）承认的美国电影节。2007年初，AFI以AFI达拉斯国际电影节（AFI DALLAS International Festival）的名字举办了一届电影节，并向全球卫星转播。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AFI Life Achievement Award&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;美国电影学会终身成就奖，简称AFI终身成就奖（AFI Life Achievement Award）是由美国电影学会理事会颁发的奖项，用以表彰通过电影或电视，终身致力于美国文化发展的个人。该奖项从1973年开始颁发，第一位获奖人为约翰·福特。自1973年到2012年获得此奖项的电影人如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2012年：雪莉·麦克雷恩（Shirley MacLaine）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2011年：摩根·费里曼（Morgan Freeman）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2010年：麦克·尼可斯（Mike Nichols）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2009年：迈克尔·道格拉斯（Michael Douglas）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2008年：沃伦·比蒂（Warren Beatty）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2007年：艾尔·帕西诺（Al Pacino常译为阿尔·帕西诺）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2006年：肖恩·康纳利（Sean Connery）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2005年：乔治·卢卡斯（George Lucas）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2004年：梅丽·史翠普（Meryl Streep）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2003年：罗伯特·德尼罗（Robert De Niro）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2002年：汤姆·汉克斯（Tom Hanks）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2001年：芭芭拉·史翠珊（Barbra Streisand）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2000年：哈里森·福特（Harrison Ford）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1999年：达斯汀·霍夫曼（Dustin Hoffman）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1998年：罗伯特·怀斯（Robert Wise）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1997年：马丁·斯科塞斯（Martin Scorsese）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1996年：克林特·伊斯特伍德（Clint Eastwood）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1995年：斯蒂芬·斯皮尔伯格（Steven Spielberg）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1994年：杰克·尼科尔森（Jack Nicholson）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1993年：伊丽莎白·泰勒（Elizabeth Taylor）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1992年：西德尼·波蒂埃（Sidney Poitier）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1991年：柯克·道格拉斯（Kirk Douglas）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1990年：大卫·利恩（David Lean）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1989年：格里高利·派克（Gregory Peck）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1988年：杰克·李蒙（Jack Lemmon）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1987年：芭芭拉·史坦维克（Barbara Stanwyck）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1986年：比利·怀德（Billy Wilder）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1985年：金·凯利（Gene Kelly又译：吉恩·凯利）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1984年：莉莲·吉许（Lillian Gish）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1983年：约翰·休斯顿（John Huston）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1982年：法兰克·卡普拉（Frank Capra）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1981年：弗雷德·阿斯泰尔（Fred Astaire）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1980年：詹姆斯·史都华（James Stewart）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1979年：阿尔弗雷德·希区柯克（Alfred Hitchcock）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1978年：亨利·方达（Henry Fonda）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1977年：贝蒂·戴维斯（Bette Davis）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1976年：威廉·惠勒（William Wyler）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1975年：奥森·威尔士（Orson Welles）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1974年：詹姆斯·卡格尼（James Cagney）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;1973年：约翰·福特（John Ford）&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Johnny Squares&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;金凯瑞在《The Dead Pool》中的龙套角色。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dirty Harry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;肮脏的哈里&amp;rdquo;或&amp;rdquo;警探哈里&amp;rdquo;，是70年代&amp;rdquo;新警察电影&amp;rdquo;的代表作，故事情节拍得紧张刺激，气氛逼人，为伊斯特伍德树立了一个典型的硬派新警察形象。他处死杀手前问道：“你是不是觉得自己运气不错？”已成为经典台词。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Dead Pool&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;《虎探追魂》,克林特·伊斯特伍德主演的“骨骸哈利”系列第五集，仍走他一贯的重型暴力动作警匪片路线。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alice Cooper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;艾利斯·库柏。起初，有一支名为Alice Cooper的乐队，由一个叫Vincent Damon Furnier的主唱领导。在这个主唱的一手策划下，乐队在开发重金属的戏剧性和暴力色彩方面领先一步，他们把音乐搞成了恐怖电影和杂耍，他们在舞台表演方面的吓人玩意包括：电椅、断头台、鲜血(假的)、大蟒蛇和 Furnier 阴森的扮相。&lt;/p&gt;

&lt;p&gt;当然事实不仅如此。他们在音乐上也有相当的成就，只是噱头太多影响了人们的注意力。取自六十年代吉他流行乐生猛简单的Riff和旋律表现了摇滚乐最基本但又最迷人的地方，甚至在乐队探索迷幻音乐和艺术摇滚时也是一样。&lt;/p&gt;

&lt;p&gt;在原来的乐队解散后，Furnier开始以Alice Cooper为名进行独立发展，此时他的音乐不再像以前那样充满夸张活跃，而是转化成了直来直去的重金属。不过他在舞台表演中保留了那些令他获得“休克摇滚之王”称号的小道具。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;David Valdes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;《The Dead Pool》的制作人。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Man With No Name&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;即《镖客三部曲》，也译作《无名客三部曲》，即《荒野大镖客》（A Fistful Dollars）、《黄昏双镖客》（For a Few Dollars More）、《黄金三镖客》（The good, the bad, and the Ugly）。&lt;/p&gt;

&lt;h2 id=&#34;正题&#34;&gt;正题&lt;/h2&gt;

&lt;p&gt;铺垫这么多，其实目的只有一个：用各种貌似知识性的东西来缓冲我听力里的各种错误给读者带来的冲击，不过有错误也不能全怨我，在网上搜了半天，居然没有找到原始演讲稿，明显的几处瞎猜的地方标记为红色，欢迎指正，欢迎拍砖。主角上场：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Good evening ladies and gentlemen!I&amp;rsquo;m here tonight,as all of us are,to pay tribute to an American icon,an actor,a film maker,a truly one of my personal heroes,Mr Clint Eastwood.I&amp;rsquo;m also here because of the  AFI(见上文介绍1） has paid me 20 million and 3 dallors,making me the highest pay megalomaniac boy king in old Babylon(没听懂，随便安一个词，自我安慰为“2千美元的身价让我这位boy king仿佛置身古巴比伦”之意）.Don&amp;rsquo;t get me wrong Clint,i wanted to be here.But my clause is my clause（随便安一个词，自我安慰这是金卡凯在开玩笑表示“我的身价得实话实说，如果我为你降低了作为主持人的出场费，那么每个人我都得降”之意）,if i lower it for you,i have to do it for everybody.&lt;/p&gt;

&lt;p&gt;How many people know this but Clint Eastwood was my first supporter in the bussiness,at the time i was a struggling actor and i was cast to play the part of a crazed,drug fiend rock star named Johnny Squares（见上文介绍3） in the &amp;ldquo;Dirty Harry&amp;rdquo;（见上文介绍4） film &amp;ldquo;The Dead Pool&amp;rdquo;（见上文介绍5）.Sure,you can applaud for that.For my addition i was put on tape,singing Alice Cooper（见上文介绍6） Song,i was completely nuts,turning up in the office doing contortions,split in the camera,afterwards,i wondered if i have gone too far.You know these days i still worried about that sort of things.When i finally met Clint,he just said to me,&amp;ldquo;I loved the tape,and i shall tell my friends.&amp;ldquo;Naturally,i was elated,i wanted to do the best possible job that i can do for this man.In the first day shooting,i showed up with all these wild ideas,i said i have a tally of ideas that i want to try out,Mr Eastwood,you know,don&amp;rsquo;t mind,you know,i expecting a little bit resistance, then Clint looked at me,then looked at the producer David Valdes（见上文介绍7） and said,&amp;ldquo;well,maybe we just,turn the camera on and let him go.&amp;ldquo;I improvised about two hours after that.Then when Clint said out,we homed（听的迷糊）the final performance down to this little piece what i&amp;rsquo;d like to perform for you now,&amp;ldquo;Hey man,I can handle this&amp;hellip;&amp;rdquo; I was a tad over-prepared that day,but alsoly because i was working with a legend,someone whose movies i&amp;rsquo;d admired for years.&lt;/p&gt;

&lt;p&gt;Every guy in this audience one time or another has lived by carelessly,throuth Clint Eastwood,and his mythological characters.He is our equalizer.He is the one who could settle the score for us,the man that every man would love to be.When a bully was persuing you and pushing you around in the school you argued,you think yourself &amp;ldquo;wow,there&amp;rsquo;s just no justice.&amp;rdquo; Then you see a Clint Eastwood&amp;rsquo;s movie,and you&amp;rsquo;d realize,that bully,grows up,to become the guy who get his butt kicked,by the man with no name（双关语，见上文介绍8）.You know?That&amp;rsquo;s our salvation.I don&amp;rsquo;t konw figment this,just really a theory of mime.but i think the reason why he had no name,is so that we can feel it in our own.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;embed class=&#34;blog_video&#34; type=&#34;application/x-shockwave-flash&#34; id=&#34;blog_video_1324276777077&#34; width=&#34;500&#34; height=&#34;425&#34; loop=&#34;false&#34; autostart=&#34;false&#34; src=&#34;http://player.youku.com/player.php/partnerid/XOTcy/sid/XNDg1OTIyMDQ=/v.swf&#34; allowscriptaccess=&#34;never&#34; /&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>远离电脑，开始看书吧</title>
      <link>https://pureage.info/2011/12/14/11.html</link>
      <pubDate>Wed, 14 Dec 2011 11:50:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/14/11.html</guid>
      
        <description>&lt;p&gt;连续三天了，晚上十点半从实验室回到寝室后，没有打开电脑，而是捧起了书本（或是新买的kindle）看到十二点。我能真切的体会到一种无以名状的感觉在心里慢慢复苏，久违了！&lt;/p&gt;

&lt;p&gt;记得刚上大学时，我还保持着看书的习惯，在身边同学都在准备各种编程大赛、各种电子设计大赛的时候，我整天从图书馆抱回一堆一堆的中外文学书籍。印象中，都是在哈尔滨的冬天，下午或者晚上，我一个人在宿舍楼道里的窗台上，捧着本不知什么书，或许是《The Age of Innocence》，或许是《The Great Gatsby》，看看书眼睛看累了，就抬头看看看窗外纷扬的大雪，偶尔在深夜会遇见对面寝室的技术狂人出来边抽烟边看DSP的书，似乎就这个情景一过就过了四年。&lt;/p&gt;

&lt;p&gt;本科毕业后，离开了哈尔滨，来到新的城市成都继续读研，三年了，没再见过一场雪，也没再认真的捧起一本书来读过。我其实买了不少书，宿舍的书架上立满了各种计算机技术类书籍，各种经典的、必读的书都差不多齐了，“杂书”却没有几本。我对技术并不十分狂热，即使读了那么多专业书也是如此，但却丢掉了自己喜欢干的一件事。不到三年间的变化让人心生感慨。&lt;/p&gt;

&lt;p&gt;在过去的两年半中，除去放假和这几个月照完工作后例行的“堕落”期外，一天的时间差不多是这么安排的：早上八点到八点八点半之间起床，吃完早餐到实验室正好九点，十一点半吃午饭，中午可能休息也可能不休息，二点到实验室继续，下午五点半吃完晚饭后再次回到实验室，一直到晚上接近十一点回到寝室，到了寝室洗漱完毕后，打开电脑，玩到十二点过后开始睡觉&amp;hellip;如此周而复始，这还不算偶尔抽风似地熬夜敲代码到凌晨三四点。&lt;/p&gt;

&lt;p&gt;在这份作息表里，可以轻松的得出一条信息：电脑占据了我几乎所有可支配的时间，无论是学习时间还是休息时间。如今，似乎确实越来越多的人的工作已经离不开电脑了，而娱乐自然也离不开电脑，新闻等信息的获取在这个信息爆炸的时代更是在网上可以轻松搞定。看看周围的同学，基本都是如此，日复一日的在电脑前看论文、逛论坛、看优酷、打dota。&lt;/p&gt;

&lt;p&gt;不得不承认，在各种信息每天都扑面而来的时代，我们不需要很大力气就能跟上时代的潮流，知道每天的最新资讯，我们只需要每天在网上泡着。这两年多时间里，非诚勿扰的马诺火过了，凤姐火过了，犀利哥火过了,以及各种不和谐的消息都火过了，而每件正在火爆的消息在传播时我们似乎觉得不知道或没听说是件很丢份的事情。但是，这么多的信息基本都向细沙一样从漏斗里滤掉了，没有给我们留下任何东西。原因很简单，我们一直忙着接受信息了，哪有时间去思考，去咀嚼？&lt;/p&gt;

&lt;p&gt;如是，在大学生涯的尾巴上，我又想找回当年读书的感觉了。&lt;/p&gt;

&lt;p&gt;在找完工作后，上图书馆接连看了几本闲书，最近又买了kindle4，晚上在回到寝室后根本没有必要开电脑了，往床上一坐，一捧就是近两个小时。其中美妙的体验只有爱读书的人或者有过爱读书经历的人才能有所体会了。最后，不得不说，kindle是个好产品，我甚至不会注意拿在我手上的是一款电子产品，白纸黑字般的质地让我心无旁骛，这似乎又能印证只有专注，才能卓越这个道理。&lt;/p&gt;

&lt;p&gt;今天晚上我将继续远离电脑。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>谁杀死了你？----《妙想天开》观后感</title>
      <link>https://pureage.info/2011/12/12/10.html</link>
      <pubDate>Mon, 12 Dec 2011 11:14:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/12/10.html</guid>
      
        <description>&lt;p&gt;周五晚上熄灯后把电脑抱到床上，打开了这部电影。其实，对于这部电影的内容及其导演生平我本是一无所知，能够找到它仅仅是因为在我手上的一份不知何时的imdb top250名单里《妙想天开》排名接近垫底，很好识别。&lt;/p&gt;

&lt;p&gt;对于电影和imdb排名我抱着这么一个想法，imdb排名虽然众口难调，但能进top250的从概率上讲应该都是值得一看的电影。而为了避免自己陷入先入为主的泥淖，对于一部陌生的电影，在看之前绝对不看内容简介，不上豆瓣时光等网站看影评。所以，根据片名，我甚至以为我即将看到的是一部喜剧片。我完全错了。&lt;/p&gt;

&lt;p&gt;电影主要讲述了这么一个故事：在将来某一个年代的某一个国家，信息部掌控着人们的一切，街道上、楼道里充斥着各种管道，整个国家机器的运转从上而下都依赖于类似于批文的纸条，任何人不得越权行事。主人公“山姆”是这个国家机器中的一个小螺丝钉-公务员，但他依然保持着较强的独立意识，因而与社会格格不入，表现在他反感参加妈妈的聚会，拒绝升迁，在上司极力逃避责任时他却乐于接受本不属于他的工作等等，另外他还是一个幻想狂，总是在同一个梦境里延续着英雄救美的故事。有一天，由于信息部下发拘捕令的一名职员无意中将一只苍蝇拍进了打字机，打字机受到干扰，将拘捕令上本来的“塔托”打印成了“巴托”。于是一桩冤案就这么产生了，无辜的“巴托”被抓并最后致死。“山姆”无意中发现了这个案子的问题，于是展开了调查，同时他又发现冤死的“巴托”先生的一位女邻居“吉尔”也在为纠正这桩冤枉奔走呼告，而“吉尔”正是“山姆”一直以来的梦中情人。由于没有人为这个案子负责，就没有可能翻案，原因很简单：这些流程都是由机器控制，由一整套制度保证的，而整个社会就是建立在这一套制度下的，又怎么会出错呢？“吉尔”不屈不挠的努力终于让她成为被拘捕的恐怖分子，山姆义无反顾的在现实中延续着梦境里的情节开始帮助“吉尔”，最终“吉尔”被乱枪打死，“山姆”被处决。&lt;/p&gt;

&lt;p&gt;故事情节并不复杂，但导演通过“山姆”的视角，血淋淋的向我们展示这个未来城市的丑陋，制度的丑陋，人性的丑陋。当“山姆”在梦境中挥刀砍死身背关公刀的巨型蒙面武士时，我长舒一口气，可当山姆揭开武士的面具却发现那个武士就是他自己时，“山姆”几乎崩溃了，也预示着整个故事的悲剧性。在国家机器运转完好的表象下，隐藏着“在这个制度中，每个人都又无辜的面孔，却都在参与着血腥的事”的事实。借用一句话：这个&amp;rdquo;政治恐怖&amp;rdquo;的社会不允许一个人脱离自己的位置。你可以死亡，但不能离开。&lt;/p&gt;

&lt;p&gt;看完这部电影，我联想到了另外一部电影《飞越疯人院》。&lt;/p&gt;

&lt;p&gt;两者的思想是如此类似，以至于我觉得《妙想天开》堪称科幻版《飞越疯人院》。都是描述在一个如机器般严格运转的制度下，社会僵化呆板，人情残酷冷漠。但《飞越疯人院》主人公的悲剧换来了印第安酋长的自由，而《妙想天开》虽一直都是以荒诞的笔调叙事，却让人更加悲观无望。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>走出黑暗的洞穴---选自《苏菲的世界》</title>
      <link>https://pureage.info/2011/12/08/9.html</link>
      <pubDate>Thu, 08 Dec 2011 09:14:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/08/9.html</guid>
      
        <description>&lt;p&gt;柏拉图用一个神话故事来说明这点。我们称之为&amp;rdquo;洞穴神话&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;现在就让我用自己的话再说一次这个故事.&lt;/p&gt;

&lt;p&gt;假设有些人住在地下的洞穴中。他们背向洞口，坐在地上，手脚都被绑着，因此他们只能看到洞穴的后壁。在他们的身后是一堵高墙，墙后面有一些人形的生物走过，手中举着各种不同形状的人偶，由于人偶高过墙头，同时墙与洞穴间还有一把火炬，因此它们在洞穴的后壁上投下明明灭灭的影子。在这种情况下，穴中居民所看到的唯一事物就是这种“皮影戏”。他们自出生以来就像这样坐着，因此他们认为世间唯一存在的便只有这些影子了。&lt;/p&gt;

&lt;p&gt;再假设有一个穴居人设法挣脱了他的锁链。他问自己的第一个问题便是：洞壁上的这些影子从何而来?你想：如果他一转身，看到墙头上高举着的人偶时，会有何反应?首先，强烈的火光会照得他睁不开眼睛，人偶的鲜明形状也会使他大感惊讶，因为他过去看到的都只是这些人偶的影子而已。如果他想办法爬过墙，越过火炬，进入外面的世界，他会更加惊讶。在揉揉眼睛后，他会深受万物之美的感动。这是他生平第一次看到色彩与清楚的形体。他看到了真正的动物与花朵，而不是洞穴里那些贫乏的影子。不过即使到了现在，他仍会问自己这些动物与花朵从何而来?然后他会看到天 空中的大阳，并悟出这就是将生命赋予那些花朵与动物的源头，就像火光造就出影子一般。&lt;/p&gt;

&lt;p&gt;这个穴居人如获至宝。他原本大可以从此奔向乡间，为自己新 获的自由而欢欣雀跃，但他却想到那些仍然留在洞里的人，于是他回到洞中，试图说服其他的穴居人，使他们相信洞壁上那些影子只不过是“真实”事物的闪烁影像罢了。然而他们不相信他，并指着洞壁说除了他们所见的影子之外，世间再也没有其他事物了。最后，他们把那个人杀了。&lt;/p&gt;

&lt;p&gt;柏拉图借着这个洞穴神话，想要说明哲学家是如何从影子般的影像出发，追寻自然界所有现象背后的真实概念。这当中，他也许曾想到苏格拉底，因为后者同样是因为推翻了“穴居人”传统的观念。并试图照亮他们追寻真知的道路而遭到杀害。这个神话说明了苏格拉底的勇气与他的为人导师的责任感。&lt;/p&gt;

&lt;p&gt;柏拉图想说的是：黑暗洞穴与外在世界的关系就像是自然世界的形式与理型世界的关系。他的意思并非说大自然是黑暗、无趣的，而是说，比起鲜明清楚的理型世界来，它就显得黑暗而平淡。同样的，一张漂亮女孩的照片也不是单调无趣的，但再怎么说它也只是一张照片而已。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>卖身记</title>
      <link>https://pureage.info/2011/12/05/8.html</link>
      <pubDate>Mon, 05 Dec 2011 13:50:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/05/8.html</guid>
      
        <description>&lt;p&gt;这是一篇写给自己的文章，不写没法交差，也可以说是为写而写。其实，我一直觉得应该对自己的人生轨迹做一个阶段性总结，所谓雁过留声，或是供日后凭吊。但按照某人的说法：“道理谁都懂，XXXX”，XXXX代表各种借口。果然这次也不例外。从八月末九月初开始正式准备找工作到十月九号签约，这一个月的时间里我不止一次的说要把白天的经历简单的记录一下，到时候归纳出一篇面经来，事实上我也确实干了这么一项工作，打开我的电脑里一篇名为“找工作日记”的txt文档，内容如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2011.09.20  星期三&lt;/p&gt;

&lt;p&gt;早上七点起床 去中兴面试，两轮，自我感觉良好。&lt;/p&gt;

&lt;p&gt;2011.09.21  星期三&lt;/p&gt;

&lt;p&gt;华为open day 去时打的，回来做了三个小时公交车&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;忽略空白行的话，这4行文字就是我这一个月来所有的记录。简直是在嘲笑我的言出不行。&lt;/p&gt;

&lt;p&gt;一直以来我都非常佩服那些有自制力有执行力的人，以至于一想起我也曾有几个月坚持每天跑步的光辉岁月就忍不住洋溢出骄傲的神情，恨不得让所有人看出我跟历史上那些有名的家伙是一类人。以前背过这么一段英文:you are precisely where you are in life because of the decisions and actions that you&amp;rsquo;ve taken up to this point.搬出这段话的目的是为了说服自己，还是有必要为找工作做一个阶段性的总结的，不然就在成为意志坚强有执行力的人的道路上又失败了一次。&lt;/p&gt;

&lt;p&gt;好吧，正式开始。在8月末到9月末的这一个月内，共面试了联发科、华为、中兴、腾讯四家公司，现在一一简单的回顾一下。&lt;/p&gt;

&lt;h2 id=&#34;面试&#34;&gt;面试&lt;/h2&gt;

&lt;h3 id=&#34;1-联发科&#34;&gt;1. 联发科&lt;/h3&gt;

&lt;p&gt;八月末还没开学时，联发科的招聘就开始了。也是今年在学校第一家进行校园招聘的公司。于是第一次见识到了找工作的人潮是多么汹涌，笔试那天居然七个大教室都坐满了。笔试很简单，顺利进入一面，这里不得不提一下联发科的招聘是最人性化的，由于公司在软件园，离学校距离很远，于是公司每天派大巴以一小时为间隔来回接送。一位台湾的主管和颜悦色的根据简历问了些项目上的问题，然后出了一个现场编程题，看得出来对我的表现很满意，回去等结果。晚上即收到二面通知，时间是第二天上午。二面是远程电话面试，电话的那头是三位远在台湾的面试官。由于简历上写了一个嵌入式系统方向的项目，跟他们做的东西可能有些搭边，于是三位抓住uboot轮番轰炸，问uboot下各种底层实现，特别是网卡驱动方面。事实上那个项目我做的跟uboot有关的工作仅仅是照着移植文档一步一步来，并且使用uboot的各种功能，然后迅速把工作转入到了系统之上了，根本就没在uboot底层代码上纠缠，所以自然被鄙视了。&lt;/p&gt;

&lt;p&gt;很多跟我技术水平一个层次的同学拿到offer了，而我又有自信我面试时各种礼仪和谈吐是没有问题的，于是事后进行总结：如果事先知道了对方职位的技术方向，而且你的项目中恰巧有这方面的经验，那么必须把这个项目的细节吃透，否则干脆不写。&lt;/p&gt;

&lt;p&gt;这是八月份面试联发科的情况，九月份时，联发科又来了。这次流程依然如此，先笔试再进行二轮面试。笔试和一面顺利通过，二面这次改成了很台湾主管面谈。面试官态度很和蔼，一直微笑，让我的局促消失了一大半。前面都谈的很正常，到最后面试官话题一转，说：“我们的工作压力可能会比较大，你如何看待加班？”我想了想，说“加班应该是行业的常态，只要不是太严重，正常情况下我愿意接受加班。”他步步紧逼：“如果要求加班到十二点呢？”我小心翼翼的表示如果是偶然这样还可以，但他马上来了句：“如果经常这样呢？”我坚决的说：“那我不接受！”然后回去等结果。然后发现这一次又在二面中被鄙视了，但事后我还是想不通问题出在哪里。&lt;/p&gt;

&lt;h3 id=&#34;2-华为&#34;&gt;2. 华为&lt;/h3&gt;

&lt;p&gt;由于在上学期参加了华为编程大赛，拿了一个小奖，于是有资格走校园招聘绿色通道，免去机试、技术面、群面，直接进行boss面。boss是成都研究所所长，留着深深的络腮胡子，极具艺术家的气质。面试主要是了解性格问题，面试完就知道肯定能拿到offer了。&lt;/p&gt;

&lt;h3 id=&#34;3-中兴&#34;&gt;3. 中兴&lt;/h3&gt;

&lt;p&gt;同样由于上学期参加过中兴的程序设计大赛，省去笔试，直接进入面试，一共面了2轮，顺利拿到offer。&lt;/p&gt;

&lt;h3 id=&#34;4-腾讯&#34;&gt;4. 腾讯&lt;/h3&gt;

&lt;p&gt;在暑假时，走了一次内推流程，由boss直接视频面试，考察范围设计到脑筋急转弯、linux shell、数据结构、C、C++、Socket、TCP/IP等各个方面。然后boss说，好好准备，今年的校招即使是内推面试通过也要走正常校招流程，任何一个环节被淘汰也没有机会。笔试依然顺利通过，面试地点也选在了银河王朝大酒店，看来华为面试潮一过，银河王朝就被腾讯接管了。二面是个年轻的帅哥，面试包括以下几个方面：在草稿纸上当场写出一个关于迷宫的算法，这一部分考察的是编程的基本功；makefile的细节；linux下各种库的细节，诸如与位置无关代码等等，只要看过《深入理解计算机系统》第七章或者《程序员的自我修养&amp;mdash;链接装载与库》，应该不成问题；网络编程，poll,epoll种种，《unix网络编程》只要看过也不成问题，因为面得就是后台开发，这些都是基础。一面顺利通过，二面是传说中的总监面，主要聊了下以前做过的一个网络编程的项目涉及到的架构，总监不愧是总监，气度不凡，总能一点点的带动我去思考系统的瓶颈以及优化的方法，真是受益匪浅。这个系列的面试即使最后失败了，能跟二面面试官聊这几十分钟也是值得的。第二天晚上收到通知，二面顺利通过，进入三面HR面。HR面纯粹是考察性格方面的，to be your self，照实回答就行。&lt;/p&gt;

&lt;p&gt;值得一提的是，我和室友是在同一个HR手下面试的，他在我前面，HR看我们的专业都是电路与系统，好奇的问我认不认识他，我把我们是室友的情况坦诚告之。面试过程中涉及到一个我和室友合作的项目，HR问你们俩是如何分工的，我照实说了他负责架构，我负责一些具体实现，他的工作量比我大。事后才知道室友也被问到这个项目的分工问题，心中暗叫惊险，如果不是据实回答，我可能就完了。&lt;/p&gt;

&lt;p&gt;最后和室友都拿到腾讯offer，但又都与腾讯失之交臂，不得不说是一个遗憾。&lt;/p&gt;

&lt;p&gt;四个公司，联发科的面试经历最曲折，事后跟同学说，联发科的办公楼我都进了4次了，还是没拿到offer，真是天意。&lt;/p&gt;

&lt;h2 id=&#34;签约&#34;&gt;签约&lt;/h2&gt;

&lt;p&gt;面完腾讯后，即进入国庆长假，此时手上只有华为中兴的offer。10月9号，华为第二次要求签约，而腾讯offer还在等待中，思考再三，还是签约了华为。室友表示也不想再找了，于是第二天也签了。再过了一天，我们俩腾讯的offer一前一后的到了，我和室友只好苦笑。&lt;/p&gt;

&lt;p&gt;就这样，一个月的忙碌终于告以段落，虽然huawei的形象在业界从来不乏臭骂，但只有经历过才能体会真实的情况，潜意识里觉得不去华为历练几年也许是一种遗憾。况且，我只是一个普通的学生，没有任何牛逼之处，也不是计算机专业的，能在一个岗位开始学习工作也是挺不错的，未来到底怎样，只有看自己怎么走了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>理性消费</title>
      <link>https://pureage.info/2011/12/05/7.html</link>
      <pubDate>Mon, 05 Dec 2011 03:29:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/05/7.html</guid>
      
        <description>&lt;p&gt;前天为了买一个无线网卡，登陆了京东商城，无意发现多了两张优惠券。才记起这是“世纪光棍节”那天买书送的，两张50元的所谓东券只能分两次使用，且每次必须购买金额大于200元的图书。一般而言，京东、当当所谓的优惠活动都是这个样子的，印象中似乎只有京东在五一的时候实打实的来过一次满两百减一百的活动。正常情况下所有的优惠券都是要在下一次使用生效，而且必须满足一定的金额才能使用。&lt;/p&gt;

&lt;p&gt;又想起在光棍节那天，登陆淘宝首页（不是淘宝商城）时，在banner上有一条显眼的标语：淘宝商城全场5折。我想起了我渴望已久的hohner goden melody，于是心动了。点击那条广告，顺利链接进入淘宝商城，输入goden melody，抑制不住内心的兴奋，我期待着130元的字样出现。片刻，我揉揉眼睛，似乎不太相信，因为口琴还是那个优雅的金黄色船型口琴，但价格还是那个260元。在经历巨大的失望后，我有一种强烈的受骗的感觉。但我想淘宝不至于做这种无耻的虚假广告吧，一定是我自己看错了，为了说服自己，我又回到了淘宝首页那个banner上，我没看错，火红的大字写着淘宝商城全场五折，不是淘宝商场全场五折起。我继续点击进入淘宝商城首页，寻找可能的蛛丝马迹来证明淘宝没有做虚假广告，终于，花了大概十分钟，我在一个小角落里看到了这样几行字：“1.XXXX（略）2.活动页面商品全场五折，全国包邮（港澳台除外）。”知道问题在哪了了吗亲，我终于证明了没有虚假广告，只怪自己眼神不好。因为人家说的是&amp;rdquo;活动页面&amp;rdquo;全场五折，也就是说，仅仅在指定的一个页面的商品是五折。&lt;/p&gt;

&lt;p&gt;在习惯了这种做法之后，第一感觉可能是电商太无耻，广告做的太隐晦，只管把你骗进去就成了。但是，理性的想一想，今年所谓疯狂的光棍节，不光是电商铺天盖地的宣传造成的，也是我们这些消费者一颗不理性的心促成的。试想，如果我不是有了一个明确的物品，直奔主题去，而是像很多人那样看到五折的广告然后漫无目的的浏览的话，就会是这样的场景：“哇，这个电水壶才XX元啊，好像我也需要一个啊，恩，拍下；咦，这个抱枕还挺好看的啊，貌似也不贵，原价多少来着？不记得了，管他呢，应该不贵，拍下；哈，这个电饭锅才XX元啊，不是一直想在寝室学学做饭么？拍下！&amp;hellip;拍下！&amp;hellip;拍下！”&lt;/p&gt;

&lt;p&gt;又回到那两张京东券上。我总有种想法，有些很有价值的书即使现在不买，以后也是要买的，这里又能用150买200的书，两张全用的话就是300买400的书，确实很划算啊！而且，京东方面也确实没有坑我们啊，它的图书业务应该确实是亏损的。然后会开始乐呵呵的挑书，那么挑什么书呢？我需要看点历史书，可是上次买的吕思勉先生的《先秦史稿》和《中国通史》不是还没看完么？买点畅销书吧，可是那本《怪诞行为学》还静静的立在书架上呢。买点专业书总没错吧，可是《windows核心编程》、《程序开发心理学》还只看了一大半&amp;hellip;妈呀，原来我已经买了这么多书了啊！&lt;/p&gt;

&lt;p&gt;想完这些，毅然而然的关掉了京东的页面，抬头看看书架里的书，不急，这些书够我看一段时间的。至于那两张50元的东券，作废去吧！&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>澡堂十秒钟所想</title>
      <link>https://pureage.info/2011/12/05/6.html</link>
      <pubDate>Mon, 05 Dec 2011 03:27:00 +0000</pubDate>
      
      <guid>https://pureage.info/2011/12/05/6.html</guid>
      
        <description>&lt;p&gt;昨夜洗澡，照例拿了把全身脱的只剩下一条内裤和秋衣，拿着另外一件干净的内裤就走进了澡房，按照惯例，在洗完后我会仅仅穿着一条新内裤并端着装有脏内裤和秋衣的盆子经过长长的走廊回到宿舍，这是后话暂且不表。现在说洗澡中发生的事。&lt;/p&gt;

&lt;p&gt;澡房是隔间的，每个间里有三个挂钩，我需要挂的有三件：两条内裤，一件秋衣，正好。迅速脱掉秋衣，挂在了第一个挂钩上，这时候突然惊恐了，因为我发现自己的两条内裤是一摸一样的。也就是说，我需要把这两个一摸一样的内裤挂到剩下的两个挂钩上。问题来了：我洗完后怎么记得哪一件是脏的，哪一件是干净的呢？照理说，记个位置是很简单的事情，可是自从上大学后，记忆力严重下降，以至于经常下了楼会突然想起门是不是没关，所以我潜意识里对于记住两个内裤的相对位置表示不自信。&lt;/p&gt;

&lt;p&gt;好了，梳理一下思路。有两条外表一摸一样的内裤（当然，穿过的和没穿过的会有区别，这点差别忽略）和一件秋衣，有三个挂钩，如何分配它们各自的位置以使得能一眼准确的分辨出它们来。假设三个挂钩分别用数字1,2,3表示，脏内裤用A1，干净内裤用A2表示，秋衣用B表示。&lt;/p&gt;

&lt;p&gt;按照排列组合，有以下几种方案：A1 A2 B，A1 B A2，A2 A1 B，A2 B A1,B A1 A2,B A2 A1。从B（秋衣）的角度来说，它只会出于两种位置，一种是在两条内裤之间，另一种是在边上。如果秋衣处于两条内裤之间，此时两条内裤处于对称位置，为了正确的识别出他们，我必须记住这么一条额外信息：外面的位置（或者里面的位置）放的是哪一条内裤。看似很简单，但是对于我这种健忘的人，我依然怀疑我是否会在十分钟后把“外面放的是新内裤”记成“外面放的是脏内裤”，也就是说，由于对称性，我需要记忆的这条额外信息不具有很强的特征。那么考虑第二种方案：把秋衣放在边上，那么两条内裤就处于相邻位置了，同样，我需要记住最外面的是哪一条内裤这条信息，依然不具有很强的特征。&lt;/p&gt;

&lt;p&gt;问题出在哪呢？为了区分两条内裤，我始终必须记忆一些额外的信息。为了让我不至于忘记，这条额外的信息必须具有识别性很强的特点，不易记混。&lt;/p&gt;

&lt;p&gt;在两条内裤上注视了片刻，眼睛的余光忽然注意到一直低调的旁边呆着的秋衣。秋衣的形状在这三者中有着最强的特征，记忆力再弱也能一眼识别出来。那么秋衣还有什么特征呢？我一直忽略了，秋衣的另一个特征是它是脏的，这个特征同样很强，因为我连看都不用看都会记得这条事实。于是接下来我就采用了这么一条方案：把秋衣挂在最里边，脏内裤挂在中间，干净内裤挂在最外边。那么，秋衣的特征就变成了：它在里边，它是脏的。干净内裤的特征变成了：它在外边，它是干净的，为了识别出它，我必须记得一条信息：它和秋衣是相对（相反）的。而这条信息的特性强不强呢，我会不会把它记错呢？显然不会，因为秋衣和干净内裤的位置是正好相对的，这个事实是不需要记忆的，那么我仅仅需要记忆它们的干净程度也正好是相对的。&lt;/p&gt;

&lt;p&gt;关键在于人脑的联想记忆功能。&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>