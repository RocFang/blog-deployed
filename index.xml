<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>纯真年代</title>
    <link>https://pureage.info/</link>
    <description>Recent content on 纯真年代</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 24 Aug 2019 11:10:10 +0800</lastBuildDate>
    
        <atom:link href="https://pureage.info/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust中struct与其method定义中的范型标识符</title>
      <link>https://pureage.info/post/generic-type-identifier-in-struct-and-method-definition/</link>
      <pubDate>Sat, 24 Aug 2019 11:10:10 +0800</pubDate>
      
      <guid>https://pureage.info/post/generic-type-identifier-in-struct-and-method-definition/</guid>
      
        <description>&lt;p&gt;Rust中，在struct定义中使用范型的方法，是在struct名称后跟&amp;lt;范型标识符&amp;gt;，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct Int&amp;lt;T&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而在struct的方法的定义中使用范型，则是形如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;impl&amp;lt;T&amp;gt; Int&amp;lt;T&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意这里有两个范型标识&lt;T&gt;。&lt;/p&gt;

&lt;p&gt;impl后面的&lt;T&gt;并不是可有可无的，如果其后有&lt;T&gt;，则后面struct名字后面的&lt;T&gt;才会被编译器认为是范型，否则编译器它是一个具体类型。&lt;/p&gt;

&lt;p&gt;Rust使用这种方式可以来实现对一个范型的不同具体类型定义不同的方法的功能。&lt;/p&gt;

&lt;p&gt;如下面的代码所示，x方法为所有Int实例所共有，但x32方法和x64方法则分别仅为具体类型为i32和i64的Int实例所有：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct Int&amp;lt;T&amp;gt; {
    x: T,
}
impl&amp;lt;T&amp;gt; Int&amp;lt;T&amp;gt; {
    fn x(&amp;amp;self) -&amp;gt; &amp;amp;T {
        &amp;amp;self.x
    }
}
impl Int&amp;lt;i32&amp;gt; {
    fn x32(&amp;amp;self) -&amp;gt; &amp;amp;i32 {
        &amp;amp;self.x
    }
}
impl Int&amp;lt;i64&amp;gt; {
    fn x64(&amp;amp;self) -&amp;gt; &amp;amp;i64 {
        &amp;amp;self.x
    }
}
fn main() {
    let p = Int { x: 5};
    println!(&amp;quot;p.x = {}&amp;quot;, p.x());
    println!(&amp;quot;p.x32 = {}&amp;quot;, p.x32());
    //下面的注释掉的是错误语句
    //println!(&amp;quot;p.x64={}&amp;quot;, p.x64());
    let p2 = Int {x: 5i64};
    println!(&amp;quot;p2.x = {}&amp;quot;, p2.x());
    //下面的注释掉的是错误语句
    //println!(&amp;quot;p2.x32 = {}&amp;quot;, p2.x32());
    println!(&amp;quot;p2.x64 = {}&amp;quot;, p2.x64());
}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Rust已经让我爱不释手了</title>
      <link>https://pureage.info/post/refine-my-first-rust-project/</link>
      <pubDate>Wed, 21 Aug 2019 21:26:11 +0800</pubDate>
      
      <guid>https://pureage.info/post/refine-my-first-rust-project/</guid>
      
        <description>&lt;p&gt;在昨天写了自己的第一个rust程序后，今天抽了一点时间把代码结构优化了一下，另外引入了clap这个第三方crate来做参数解析。&lt;/p&gt;

&lt;p&gt;在github上找到了pingcap的&lt;a href=&#34;https://github.com/pingcap/talent-plan&#34;&gt;Rust培训计划&lt;/a&gt;，下一步会把它这个教程完整的走一遍，在夯实语言基础的同时，看看业界在实践中是怎么做的。&lt;/p&gt;

&lt;p&gt;就这短短的几天时间，Rust已经让我爱不释手了，好像重新找到了大学时刚学编程的那个兴奋劲，有好多东西等着自己去深挖。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>用Rust写了一个博客的客户端发布工具</title>
      <link>https://pureage.info/post/test-for-blog-writer-by-rust/</link>
      <pubDate>Tue, 20 Aug 2019 23:25:18 +0800</pubDate>
      
      <guid>https://pureage.info/post/test-for-blog-writer-by-rust/</guid>
      
        <description>&lt;p&gt;这个事情本身没有什么好说的，算是刚刷完Rust Book之后自己额外写的一个hello world级的程序，只是这个程序对我自己还有点实际用处而已，用来简化了我写博客的一些流程。&lt;/p&gt;

&lt;p&gt;本来这种事情我是最擅长用shell来解决，强迫自己用Rust来写实在很别扭，但是这恐怕是不可避免的阵痛了，希望自己能尽快渡过这个不适期。&lt;/p&gt;

&lt;p&gt;这篇文章本身就是由这个工具来管理整个书写、发布流程的，算是一个测试文章。使用起来的感觉当然是真香了：）&lt;/p&gt;

&lt;p&gt;Rust真是个好东西，继续用下去吧。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>在阅读《Rust编程之道》时的一次抬杠经历</title>
      <link>https://pureage.info/post/a-misunderstanding-of-tao-of-rust/</link>
      <pubDate>Fri, 16 Aug 2019 23:59:34 +0800</pubDate>
      
      <guid>https://pureage.info/post/a-misunderstanding-of-tao-of-rust/</guid>
      
        <description>&lt;p&gt;最近学习Rust,在看完了官网上的Rust Book之后，我买了一本张汉东老师著的《Rust编程之道》，来两本书对照着再看一遍。&lt;/p&gt;

&lt;p&gt;今天要说的，就是发生在阅读《Rust编程之道》时发生的一个我认为很有意思的小事。&lt;/p&gt;

&lt;p&gt;本文标题中提到“抬杠”，实际上我并不是就书的某些内容跟作者或其他读者抬杠，而是与自己抬杠。&lt;/p&gt;

&lt;p&gt;起因是我读到的该书中的一段话，原文如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;条件表达式一定会有值，所以if表达式的分支必须返回同一个类型的值才可以。这也是Rust没有三元操作符?:的原因。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于我之前已经完整的读过了一本Rust教材，而且也有其他语言的编程基础，所以这句话里传达的知识点本身我都已经是明白的。但读完后第一感觉就是不顺。不知道其他人看到这一段话第一反应会怎么理解，我的心理过程是这样的：&lt;/p&gt;

&lt;p&gt;第一句，“条件表达式一定会有值，所以if表达式的分支必须返回同一个类型的值才可以”，没问题，这一句很简单，跳过。&lt;/p&gt;

&lt;p&gt;第二句，“这也是Rust没有三元操作符?:的原因”，看上去有点意思，关于来龙去脉的东西要好好看一下，回顾一下上一句，上一句是”所以if表达式的分支必须返回同一个类型的值才可以”。有一个&lt;strong&gt;必须&lt;/strong&gt;哦，所以说Rust没有三元操作符是因为三元操作符不满足这个&lt;strong&gt;必须&lt;/strong&gt;的要求？也就说，因为if表达式必须返回同一个类型的值，但三元操作符不满足这个要求，所以Rust中没有三元操作符？&lt;/p&gt;

&lt;p&gt;我心里马上咯噔一下，三元操作符还有这毛病？印象中不是这样啊。于是随手写了几行c代码用gcc验证了一下，更坚定我的信心了，至少在c里面，三元操作符是没有这个问题的。于是我在微信里向张汉东老师本人求证：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;汉东老师，在2.5.1条件表达式这一节，书里说 “表达式一定会有值，所以if表达式的分支必须返回同一个类型的值才可以。这也是Rust没有三元操作符?:的原因。”&lt;/p&gt;

&lt;p&gt;读起来感觉这一句话有点问题，感觉您想表达因为三元操作符可能会返回不同类型的值，所以才没有支持三元操作符。&lt;/p&gt;

&lt;p&gt;一方面，在c里面，虽然int a = 1 == 2 ? 2 : “aa”;这样的语句编译器不会报错,但是会报类型不匹配和一个从指针到整数的类型转换的警告，而且这个其实跟三目运算本身没关系，直接用int a = “aa”,也是会涉及到相同的警告，即类型不匹配和一个从指针到整数的类型转换。&lt;/p&gt;

&lt;p&gt;另一方面，我查了一下rust以前的issues，比如 &lt;a href=&#34;https://github.com/rust-lang/rfcs/issues/1362&#34;&gt;https://github.com/rust-lang/rfcs/issues/1362&lt;/a&gt; （不止这一个），里面的讨论也大部分都是基于有没有必要在if else满足条件的情况下引入一个三目操作，而且rust之前的版本里本来是有三目，后来有觉得没必要所以去掉了。&lt;/p&gt;

&lt;p&gt;总之我想表达的是可能rust没有三元操作符不是因为这个原因，不知道我理解有没有问题。谢谢：）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;张汉东老师很快就回复我了：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;你想太多了。我想表达的就是两点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;if是个表达式。表达式自然要返回同一个类型的值。&lt;/li&gt;
&lt;li&gt;有了这个表达式就没必要引入三元操作符了（所以，没有三元操作符），你看看Rust的语法，基本上是避免同一件事引入多种方法。再加上三元操作符中的两个符号「:」和「?」，在Rust里会破坏一致性。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个回复非常清楚，没有任何问题和歧义。本身这几个知识点我是理解的，所以我非常好奇，是什么原因导致我把他的原句理解成了我上面所说的样子，这个原因必须找出来。&lt;/p&gt;

&lt;p&gt;再次回顾一下原文：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;条件表达式一定会有值，所以if表达式的分支必须返回同一个类型的值才可以。这也是Rust没有三元操作符?:的原因。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;顿时恍然大悟。&lt;/p&gt;

&lt;p&gt;这两句话的最重要的地方是第一句话的前半部分，即“条件表达式一定会有值”，基于此，会产生两个结果，其一是if表达式的分支必须返回同一个类型的值，其二是Rust中不必有三元操作符。这两个结果的关系是&lt;strong&gt;并列&lt;/strong&gt;的。&lt;/p&gt;

&lt;p&gt;而我之前对这段话的理解错误，根源在于把第二句话中提到的原因归结到了第一句话的后半句，实际应该是前半句。而为什么我会第一反应做出如此的理解呢？原因在于第一句后半句中的那个&lt;strong&gt;必须&lt;/strong&gt;一词，它的语气很强，把我的注意力吸引到它上面，而失去了对这一段话整体结构的把握。&lt;/p&gt;

&lt;p&gt;上面就是我跟自己”抬杠“的完整过程。这个过程不由让我想到《如何阅读一本书》中的一个比喻，在一场阅读的过程中，作者与读者就像是棒球赛场中的一对投手和捕手。写作与阅读的东西就像那只球一样，是被主动、有活力的双方所共有的，由一方开始，另一方终结。&lt;/p&gt;

&lt;p&gt;读一本书，能完全读懂作者在写作时的心理状态和想表达的内容，真不是一件容易的事情。逻辑性很强的一本编程书都是如此，其他领域，尤其文学作品中就更难了。我想也正因为如此，才导致了一千个读者就有一千个哈姆雷特吧。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>重新打造我的笔记系统</title>
      <link>https://pureage.info/post/rebuild-my-notes/</link>
      <pubDate>Wed, 29 May 2019 13:25:01 +0800</pubDate>
      
      <guid>https://pureage.info/post/rebuild-my-notes/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;笔记系统，不就是个云笔记吗？说的这么高大上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从2013年起，我就开始将自己的各种笔记和收集到的零散知识放在有道云笔记上。到现在为止，客观的说，有道云笔记的表现是很让我满意的。网友反映它会丢笔记等种种严重的毛病，我基本都没遇到过，有印象的几次问题表现在同步出了冲突，但并没有导致笔记丢失，而是同一份笔记生成了几份。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;既然用着好好的，为什么要”重新打造“？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为忽然有一天，我发现我的有道云笔记已经变成了一个知识的垃圾堆。那些东西只是被我从各处收集来放在这里，其中的绝大部分，都是看了一眼后就再也没看过了。它们不属于我。不属于我的知识，收集在一起其实跟垃圾对我的意义没有什么区别。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;为什么以前没有这种感觉？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;想想家里的卫生状况就知道了，彻底来了一次大扫除之后，如果我们比较懒，卫生状况就会越来越糟，这个变糟的过程可能会持续很久，直到有一天它忽然就到达了令我们反感的“阈值”，不重新打扫是不行了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;那重新整理一下云笔记里的内容不就行了吗？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我本来写了一大堆原因，但都删掉了，因为云笔记现在的功能确实能够很轻松的满足知识的整理、归纳、展示等。可能是我现在就是想尝试一下新鲜的做法吧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;新的笔记要写在哪里？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在了解和适用了一大堆开源wiki应用比如gollum, tiddlywiki等之后，我决定不使用这些工具。我计划将笔记写在github的一个私有仓库里，笔记本身写在这个仓库的issues里，因为issues的在线编辑非常友好，比如图片拖拽上传等，最重要的原因当然还是issues的tag了。这样一个笔记从最底层的组织结构上看，是带了标签的。笔记的较高层次的组织，比如分类，放在仓库本身的文件里描述，比如readme里，链接到issues里的具体笔记。由于需要自己组织这些知识，就会比只有分类来的更加灵活。比如可以就某个专题来组织笔记，而同一个笔记可以属于不同的专题。而传统云笔记由于上层只有分类，则没那么灵活。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;要放弃云笔记吗？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;并不是，拥有客户端的云笔记，可以很好的完成知识的收集。然后要定期整理、消化，输出到新的地方去。&lt;/p&gt;

&lt;p&gt;最重要的，当然还是执行了。导致笔记本成为“垃圾堆“的，永远是我自己，而非这些工具。没有执行，上面说的每一个字，都毫无意义。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>一些个人常用的工具</title>
      <link>https://pureage.info/tools/</link>
      <pubDate>Mon, 27 May 2019 18:27:06 +0800</pubDate>
      
      <guid>https://pureage.info/tools/</guid>
      
        <description>&lt;p&gt;这个页面仅仅用来记录我个人常用的一些网页版的工具，对您来说，多半无意义。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://passwd.pureage.info&#34;&gt;密码生成器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tune.pureage.info&#34;&gt;简谱转调器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>《非暴力沟通》读书笔记</title>
      <link>https://pureage.info/post/nonviolent-communication/</link>
      <pubDate>Thu, 09 May 2019 10:43:17 +0800</pubDate>
      
      <guid>https://pureage.info/post/nonviolent-communication/</guid>
      
        <description>&lt;p&gt;这几天空闲的时候读完了马歇尔·卢森堡的《非暴力沟通》，觉得它确实是一本好书，在现实生活中指导意义很强。&lt;/p&gt;

&lt;p&gt;如果没有看过这本书，仅看内容简介大概会把它归为“心灵鸡汤”一类的书。但实际上这是一本可以用来指导具体实践的教程，作者不厌其烦甚至有些啰嗦的举了大量的例子来说明非暴力沟通的具体实践。&lt;/p&gt;

&lt;p&gt;非暴力沟通解决什么问题？&lt;/p&gt;

&lt;p&gt;在我看来人类的语言表达、理解机制的缺陷必然会导致沟通不畅进而引发不同程度的“暴力”行为。非暴力沟通就是用来解决这个问题的。&lt;/p&gt;

&lt;p&gt;当然，就像爱不能用来发电一样，在人类历史上，仇恨、暴力等必然有它们的意义。我们只专注于我们希望进行非暴力沟通的场景。比如，家庭成员之间、同事、朋友之间。&lt;/p&gt;

&lt;p&gt;非暴力沟通的意义是什么？&lt;/p&gt;

&lt;p&gt;作者在书中的一段话可以说明它的意义：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;虽然我称非暴力沟通为“沟通方式”，但它不只是沟通方式。它更是一种持续不断的提醒，使我们专注于更可能满足我们人生追求的方向。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;怎样执行非暴力沟通？&lt;/p&gt;

&lt;p&gt;非暴力沟通有四个要素：观察、感受、需要和请求。这是书中的说法，但不知是翻译的问题，还是作者写作的时候图个简单朗朗上口，我认为仅用这四个词是不够的。这四个词汇前面必须加上“表达”才将非暴力沟通的执行要素表达的更清楚。即：观察并表达观察结果、表达感受、表达需要、表达请求。&lt;/p&gt;

&lt;p&gt;非暴力沟通的第一个要素是观察。我们仔细观察正在发生的事情，并清楚地说出观察结果。非暴力沟通并不要求我们保持完全的客观而不作任何评论。它只是强调区分观察和评论的重要性。将观察和评论混为一谈，人们将倾向于听到批评，甚至会产生逆反心理。&lt;/p&gt;

&lt;p&gt;非暴力沟通的第二个要素是表达感受。通过建立表达感受的词汇表，我们可以更清楚地表达感受，从而使沟通更为顺畅。在表达感受时，示弱有助于解决冲突。此外，非暴力沟通还对表达具体感受的词语与陈述想法、评论以及观点的词语作了区分。&lt;/p&gt;

&lt;p&gt;非暴力沟通的第三个要素是表达需要。对他人的指责、批评、评论以及分析反映了我们的需要和价值观。如果我们通过批评来提出主张，人们的反应常常是申辩或反击。反之，如果直接说出我们的需要，其他人就较有可能作出积极的回应。&lt;/p&gt;

&lt;p&gt;非暴力沟通的第四个要素是请求。我们告诉人们，为了改善生活，我们希望他们做什么。我们避免使用抽象的语言，而借助具体的描述，来提出请求。&lt;/p&gt;

&lt;p&gt;非暴力沟通的使用，是单边可行的，即并不需要沟通的对象也熟悉非暴力沟通。上述四个要素及包括对自己、也包括对他人。对自己很好理解，对他人就是倾听，了解他人的观察、感受、需要和请求。&lt;/p&gt;

&lt;p&gt;在我看来，非暴力沟通的实质其实是聚焦。聚焦自己和对方的真实需求，一切以真实需求为中心，为其服务，从自己的主观情绪中跳出来。&lt;/p&gt;

&lt;p&gt;道理和方法这本书是讲清楚了，执行的事就只能是交给读者自己了。至少我相信，正确的执行非暴力沟通，夫妻间的不愉快将会大大减少。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>混迹技术聊天群容易产生的几个错觉</title>
      <link>https://pureage.info/post/illusions-produced-in-im-groups-of-software-technology/</link>
      <pubDate>Sun, 07 Apr 2019 17:51:22 +0800</pubDate>
      
      <guid>https://pureage.info/post/illusions-produced-in-im-groups-of-software-technology/</guid>
      
        <description>&lt;p&gt;现如今，各行各业都有无数的聊天群，软件技术相关当然也不例外。一个程序员不混几个技术群，每天在里面聊聊技术吹吹水，都似乎有点非主流了。&lt;/p&gt;

&lt;p&gt;我这里说的是那种技术氛围相对浓厚一点的聊天群，大家主要的聊天内容还是会跟某些具体技术相关。纯水群不在本文讨论范围之列。&lt;/p&gt;

&lt;p&gt;经过我长期观察，混迹技术聊天群容易产生几个错觉，甚至可以称之为幻觉。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;错觉一：真正的大牛们貌似都很会喷人，所以我也要会喷。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这种错觉的表现，就是某些群友们从来不会好好说话，言必称A语言垃圾，B框架狗屎，C项目巨烂无比。&lt;/p&gt;

&lt;p&gt;是的，很多业界大牛是比较有个性，经常会看到一些态度激烈的言论。但是你首先要搞清楚，个性每个人都有，但大牛是要肚里有货的，甚至光肚里有货都不够，还要有项目能流传出来供大家使用、讨论、评判。肚里没啥干货，嘴里粪喷成花也改变不了你菜鸟的本质。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;错觉二：指出经典开源项目的毛病，我就看上去更牛逼了。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这一部分人其实跟上一波人有很大的重合，他们缺乏对历史上那些经典开源软件的敬畏之心。&lt;/p&gt;

&lt;p&gt;比如，有人会因为使用的一些开源项目在某些情况下会coredump，就怒而逢此项目必喷。你要问他们是怎么解决这些问题的，有没有给官方报issues，有没有自己提交pull request解决这些问题，答案多半是没有。&lt;/p&gt;

&lt;p&gt;事实上，任何一个开源项目都必然会有bug存在，在使用开源项目时，遇到问题就尝试去反馈问题，解决问题，是使用开源项目的基本素养。&lt;/p&gt;

&lt;p&gt;几十年前，就有一位美国伟人说过：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My fellow programmers ask not what open source can do for you, ask what you can do for open source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然这是我篡改过的版本：）&lt;/p&gt;

&lt;p&gt;&lt;em&gt;错觉三：站在巨人的肩膀上，我自己也是巨人了。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;软件开发/程序设计发展到今天，有无数的先驱在前面铺路搭桥，以至于今天我们不用造轮子，直接完全使用开源项目都能完成很多任务。&lt;/p&gt;

&lt;p&gt;站在巨人的肩膀上，能让我们看的更远，但并不意味着我们自己也是巨人了。自己真正的代码能力怎么样，自己心里有点数啊大兄弟。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>将域名转到Namesilo</title>
      <link>https://pureage.info/post/transfer-domain-from-godaddy-to-namesilo/</link>
      <pubDate>Mon, 25 Mar 2019 10:45:26 +0800</pubDate>
      
      <guid>https://pureage.info/post/transfer-domain-from-godaddy-to-namesilo/</guid>
      
        <description>&lt;p&gt;本网站所使用的域名pureage.info自2011年注册开始，一直托管在godaddy上。当年国外的域名注册商家中，只有godaddy支持支付宝。我是一个怕麻烦的人，所以虽然这么多年续费费用越来越高，我也一直没有想过将域名转出到其它商家托管。&lt;/p&gt;

&lt;p&gt;直到最近，域名又要续费了，而这个info的域名现在居然到了150元人民币一年，干脆趁这个机会转出到namesilo了。整个过程用了不到五分钟，namesilo一年的费用是80多块，还借机体验了一下域名转出的流程，真是何乐而不为呢。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang中令人不那么愉悦的import</title>
      <link>https://pureage.info/post/annoying-golang-import/</link>
      <pubDate>Mon, 18 Mar 2019 14:49:45 +0800</pubDate>
      
      <guid>https://pureage.info/post/annoying-golang-import/</guid>
      
        <description>&lt;p&gt;众所周知，在github上参与开源项目的一般流程如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将开源项目fork到自己的名下。&lt;/li&gt;
&lt;li&gt;在本地开发环境中clone自己在上一步中fork的项目。&lt;/li&gt;
&lt;li&gt;本地完成开发测试和代码提交，再push到自己名下的仓库中。&lt;/li&gt;
&lt;li&gt;从自己名下的这个项目中，对原始项目发起一个pull request。&lt;/li&gt;
&lt;li&gt;发起的pull request被上游merge后，自己的代码就进入开源项目中了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;虽然具体workflow的细节上可能有些差异，但总体流程大概就是这样。&lt;/p&gt;

&lt;p&gt;但是在参与Golang的开源项目中，由于gopath的限制，这个流程就会有问题。举个例子，有一个项目为github.com/userA/project，fork之后，有一个新的仓库，路径为github.com/userB/project。而这个project中大概率会有内部package引用，比如在main.go中，import了github.com/userA/project/moduleA，这样在go get自己的仓库时，仍然会引用到原始的仓库路径。将会导致诸如构建失败等一些问题。&lt;/p&gt;

&lt;p&gt;为什么基于c/c++的开源项目就没有这个问题呢，因为c/c++的构建更原始更简单。include只有两种形式，要么是在标准路径中或项目子目录中去查找，要么在非标准路径下，但能通过编译器的选项来告诉编译器去哪里找，而代码本身则是非常干净的，不会有硬编码的特定路径在源码里面。而Golang的import，是一个完整的url，这样可以让go get之类的工具自动化的进行一些操作。&lt;/p&gt;

&lt;p&gt;上面可以解释Golang项目在引用外部包的时候使用完整url的做法，但是在引用项目内部包时，仍然使用完整url的做法就多少让人觉得有点不能理解。如果import能支持相对路径，就不会有前面提到的问题了。Golang的开发者们当然对这个问题有自己的考虑，参考这个issue：&lt;a href=&#34;https://github.com/golang/go/issues/3515&#34;&gt;https://github.com/golang/go/issues/3515&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;不能简单的说Golang的这种构建方式不对，因为它的出现必然是有自己的优点和解决了一些问题的，所以从实用的角度出发，我们只能将其称之为“特点”，并去适应它。&lt;/p&gt;

&lt;p&gt;解决办法有几个，但都看上去有些丑陋。比如：&lt;/p&gt;

&lt;p&gt;在本地开发的时候，使用的路径仍然是原始项目的路径，将自己名下的仓库作为一个remote upstream，push的时候将修改push到自己名下的仓库中，然后再向原始仓库提交pull request。&lt;/p&gt;

&lt;p&gt;对于一般的开源项目，这种“临时”的方法就够用了。但在下面的几个场景种，这种方法显然会很令人不适：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;原始项目已经不维护了，你想自己长期维护一个fork。&lt;/li&gt;
&lt;li&gt;原始项目仍然在积极维护，但是你仍然想自己长期维护一个fork。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在上述情况下，其实我们是把原始项目和自己的fork当作两个相对独立的项目，我们希望在构建的时候能直接go build就行了，不希望有其他额外的操作。如果有第三个人，他想fork我们这个fork并进行并列开发，按上面的方法将会非常麻烦。&lt;/p&gt;

&lt;p&gt;对于这种情况，我选择将项目内所有源码中的import路径，修改为我自己名下的路径。虽然这种做法很丑陋，也是不得已而为之了。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>徒手攀岩</title>
      <link>https://pureage.info/post/free-solo/</link>
      <pubDate>Tue, 12 Mar 2019 14:09:22 +0800</pubDate>
      
      <guid>https://pureage.info/post/free-solo/</guid>
      
        <description>&lt;p&gt;从小到大做过不少不少恶梦，一个反复出现的场景是我被困在一面绝壁之上，进退维谷。最后通常有两个结局，一是始终在高压的状态下度过这个梦境，有可能会被吓醒；另一个是突然意识到自己正在做梦，然后抛开一切恐惧，纵身一跃，飞翔于天地间。&lt;/p&gt;

&lt;p&gt;以后我才知道，原来有一项叫徒手攀岩的极限运动，我在那些恶梦中所处的场景，是这项运动的爱好者们的日常。不同的是，这不是梦。一个闪失，他们就会粉身碎骨，成为不断增长的死亡列表里的一个新的名字。&lt;/p&gt;

&lt;p&gt;纪录片《徒手攀岩》，就讲述了Alex Honnold在无保护措施下成功攀登酋长岩的经过。&lt;/p&gt;

&lt;p&gt;当我们在看一部极限运动的纪录片时，我们看的是什么？对于我自己，是在试图了解这个人，他的动机，他的情感。我觉得当一个人醉心于一种一不留神就会让自己丧命的运动中时，他一定是接近甚至超越一个哲学家的存在。Alex Honnold确实也是这样，对生死、亲情、友情、爱情都有着自己深刻的理解。&lt;/p&gt;

&lt;p&gt;英国探险家乔治·马洛里在被问及为何想要攀登珠穆朗玛峰时回答，“因为它就在那儿“，成为人们至今仍经常引用的名言。这句话可以用来回答许多极限运动领域中类似的问题。但是现在，对于极限运动的评论往往变成了”这就是为什么外国人这么少“之类的调侃。&lt;/p&gt;

&lt;p&gt;我当然不会死板到因为这些评论的盛行就感慨世风不古，在跟朋友们一起看这些视频时，我也会做出此类调侃。但是静下心来细想，一定会是满满的敬意。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>洛奇6中的一段台词</title>
      <link>https://pureage.info/post/a-line-in-rocky6/</link>
      <pubDate>Wed, 09 Jan 2019 18:27:11 +0800</pubDate>
      
      <guid>https://pureage.info/post/a-line-in-rocky6/</guid>
      
        <description>&lt;p&gt;你绝对不会相信，但你以前才这么大，我会把你举高跟你妈说，“他将是世界上最棒的小孩，这孩子绝对超乎想象的优秀”。你长大以后真的很棒，每天看着你就是一种特权了。&lt;/p&gt;

&lt;p&gt;后来你成年就独立了，踏入社会，表现得很好。但不知道什么时候，你变了，不再是原本的你。你让人用手指着你的脸，骂你没用。遇到困难就开始怪罪别人，好像活在阴影下似的。&lt;/p&gt;

&lt;p&gt;跟你说一件你已经知道的事。人生未必都是美好的，世间险恶又无情。不管你有多坚强，你一松懈，就会被逼的屈膝臣服。谁打你，都不会比人生的打击更重。但重点不是你出手多重，而是你能忍耐多少，继续向前迈进。你能承受多少还能向前迈进！这样才能赢啊！&lt;/p&gt;

&lt;p&gt;知道自己的斤两就极力去争取吧，但你要愿意承受打击，不要用手指着别人，说你失败是因为他或她或是任何人。懦夫才会这样，你不是懦夫，你很坚强。&lt;/p&gt;

&lt;p&gt;我会永远爱你，不管发生什么事，你是我的儿子，我的骨肉，是我这辈子最珍贵的礼物。但在你建立自信以前，你都不会有自己的人生。别忘了去看你妈。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You ain&amp;rsquo;t gonna believe this, but you used to fit right here. I&amp;rsquo;d hold you up to say to your mother, &amp;ldquo;this kid&amp;rsquo;s gonna be the best kid in the world. This kid&amp;rsquo;s gonna be somebody better than anybody I ever knew.&amp;rdquo; And you grew up good and wonderful. It was great just watching you, every day was like a privilige.&lt;br /&gt;
Then the time come for you to be your own man and take on the world, and you did. But somewhere along the line, you changed. You stopped being you. You let people stick a finger in your face and tell you you&amp;rsquo;re no good. And when things got hard, you started looking for something to blame, like a big shadow.&lt;br /&gt;
Let me tell you something you already know. The world ain&amp;rsquo;t all sunshine and rainbows. It&amp;rsquo;s a very mean and nasty place and I don&amp;rsquo;t care how tough you are it will beat you to your knees and keep you there permanently if you let it. You, me, or nobody is gonna hit as hard as life. But it ain&amp;rsquo;t about how hard ya hit. It&amp;rsquo;s about how hard you can get it and keep moving forward. How much you can take and keep moving forward. That&amp;rsquo;s how winning is done!&lt;br /&gt;
Now if you know what you&amp;rsquo;re worth then go out and get what you&amp;rsquo;re worth. But ya gotta be willing to take the hits, and not pointing fingers saying you ain&amp;rsquo;t where you wanna be because of him, or her, or anybody! Cowards do that and that ain&amp;rsquo;t you! You&amp;rsquo;re better than that!&lt;br /&gt;
I&amp;rsquo;m always gonna love you no matter what. No matter what happens. You&amp;rsquo;re my son and you&amp;rsquo;re my blood. You&amp;rsquo;re the best thing in my life. But until you start believing in yourself, ya ain&amp;rsquo;t gonna have a life. Don&amp;rsquo;t forget to visit your mother.&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>奎迪：英雄再起</title>
      <link>https://pureage.info/post/creed2/</link>
      <pubDate>Fri, 04 Jan 2019 15:02:29 +0800</pubDate>
      
      <guid>https://pureage.info/post/creed2/</guid>
      
        <description>&lt;p&gt;作为洛奇系列电影的旁支，《奎迪》系列的第二部最近在国内院线上映了。作为一个拳击题材电影的影迷和现实生活中的拳迷，虽然不久前我已经在网上找到视频资源先睹为快了，在上映后仍去电影院重温了一下。&lt;/p&gt;

&lt;p&gt;总的来说，我对这部电影很满意。与上一部相比，加入了更多拳击之外的感情戏，导致中间会有一些沉闷，应该会引起一些争议。但拳击电影从来都不是从头到尾在擂台上拳拳到肉，如果缺了感情的铺垫，情绪没有累积上来，最后的决战就无法成为高潮。&lt;/p&gt;

&lt;p&gt;说一说这个电影除了主角奎迪的成长之外，有意思的两个地方。&lt;/p&gt;

&lt;h3 id=&#34;小德拉戈-傅红雪&#34;&gt;小德拉戈/傅红雪&lt;/h3&gt;

&lt;p&gt;老德拉戈当年在擂台上打死了奎迪的父亲阿波罗，在当时的冷战背景下，在苏联国内荣誉达到顶峰，但随后在与洛奇的比赛中败北，被国家、被妻子抛弃，又失去一切。只有小德拉戈是他唯一的希望。&lt;/p&gt;

&lt;p&gt;所以小德拉戈是一个在仇恨中长大的孩子。他要用拳头把父亲丢失的东西再赢回来。&lt;/p&gt;

&lt;p&gt;是不是很像《边城浪子》里的傅红雪？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;风在呼啸。&lt;br /&gt;
她看着他慢慢地走出去，走入黑暗的夜色中，他的人似已渐渐与黑暗溶为一体。&lt;br /&gt;
他手里的刀，似也渐渐与黑暗溶为一体。&lt;br /&gt;
这时黑暗已笼罩大地。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但他还毕竟比傅红雪幸运的多。最后当父亲蹒跚着扔出表示认输的白手帕时，他可能才发现，从小到大一直用仇恨激励他的父亲，对他极其严厉的父亲，其实内心是深爱着他的，他并不仅仅是一个用来复仇的工具。那一刻，在拳台上他在父亲面前哭的像个孩子。&lt;/p&gt;

&lt;p&gt;影片结尾，不光是属于洛奇和奎迪的，也是属于他们父子的。当老德拉戈和小德拉戈在清晨的街道中并肩跑步训练时，他们彼此一定获得了全新的力量。&lt;/p&gt;

&lt;h3 id=&#34;赛前紧张的奎迪&#34;&gt;赛前紧张的奎迪&lt;/h3&gt;

&lt;p&gt;在上一部中，奎迪在一次比赛前，紧张的脱掉拳套去上厕所。在这一部中，妻子会在登台前对其比一个手势，那意思是问他大便了吗？这一部奎迪主要有三场比赛，第一场和最后一场，妻子赛前做了这个手势，奎迪赢得了比赛。第二场，也就是和小德拉戈的第一场比赛，妻子没有这个动作，奎迪输了比赛。有没有这个手势，是表示他们之间是否是处于全力彼此支持的状态。&lt;/p&gt;

&lt;p&gt;在与小德拉戈的第一场，一意孤行的奎迪，登台前紧张到发抖。在复赛中，取得爱人和洛奇支持的奎迪就沉稳的多。&lt;/p&gt;

&lt;p&gt;仅仅是因为，他有没有明白自己是为何而战。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>如何在考研数学中得到148分</title>
      <link>https://pureage.info/post/how-i-got-148-marks-for-math-in-national-entrance-examination-for-postgraduate/</link>
      <pubDate>Wed, 02 Jan 2019 14:24:49 +0800</pubDate>
      
      <guid>https://pureage.info/post/how-i-got-148-marks-for-math-in-national-entrance-examination-for-postgraduate/</guid>
      
        <description>&lt;p&gt;本来不想取这个标题，因为它第一眼看上去有一种炫耀的情绪在里面。甚至连这篇文章都犹豫了很久要不要写，犹豫的原因无外乎读者可能会有下面几种看法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;作为一个工作多年的人，还对考研成绩念念不忘，是不是说明考研之后的人生太失败？&lt;/li&gt;
&lt;li&gt;这种文章写出来会不会像现在满大街的鸡汤文一样，都是正确的废话？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为什么又决定还是写下这篇文章呢？&lt;/p&gt;

&lt;p&gt;首先是我想写一系列回忆过去的文章，从中思考“我是怎么成为现在的我”这个哲学命题，考研虽然只是一件小事，但仍有值得记住和总结的地方。其次，考研一结束，这个事情就被我抛在脑后，几乎忘掉，近年来各种关于“认知”、“精进”、“学习”的自媒体非常火爆，但是读了这些看上去非常高大上的文章之后，我才发现其实我在考研中其实就用到了很多相关的方法，只是当时并不自知，因此也值得回忆和总结一下。&lt;/p&gt;

&lt;p&gt;那么言归正传，我就来回忆一下考研这个事情。&lt;/p&gt;

&lt;p&gt;那是近10年前的事情了。当时我在哈尔滨工程大学电子信息工程专业，像主流准备考研的同学一样，我在大三下学期开始着手准备，目标定为电子科技大学的电路与系统专业。考试科目是数学、英语、政治和专业课四门。最终成绩是409分，其中数学148分，英语72分，而政治和专业课多少分已经完全不记得了。无论是总分，还是单科分数，这都是一个非常理想的成绩，而且没有参加任何考研辅导班。&lt;/p&gt;

&lt;p&gt;这些科目中，数学自然是重中之重，而我的数学基础并不好。当年湖北的高考数学卷，总分150我只得了90多分，刚刚及格。也许你会说，一次考试成绩差说明不了你数学真的差。但我自己确信，我的数学是真的差。一方面，我不是那种很聪明的人，另一方面，我还很马虎，简单的算术在打草稿时也会算错。&lt;/p&gt;

&lt;p&gt;所以在当时，我面临的问题是，如何能在半年时间尽可能的提高数学成绩。&lt;/p&gt;

&lt;p&gt;前面说了这么多，其实方法特别简单。既然我接受了自己数学底子差、自己又并不聪明这个设定，那么就重点补基础吧。数学的重中之重是高等数学，我的主要备考资料是同济第五版的高数课本。课本中所有定理的推导过程要完全掌握，都能自行推导出来。不刷任何辅导题集，只做课后习题保持练习的状态。课后习题一般是很简单的，但是不管多简单，都要力求一次性计算正确，这个是为了克服粗心大意的问题。每一道题做完后，要再想一想涉及到的知识点、定理的推导。&lt;/p&gt;

&lt;p&gt;整个过程按部就班，非常轻松。上面就是我在考研数学中得到148分的所有诀窍，看起来很简单是不是。&lt;/p&gt;

&lt;p&gt;不简单的是，如何坚定执行这个方法。要知道，身边所有备考的人每天都在刷各种真题或者模拟题，我没有看到一个像我这样只是天天看课本的。我不知道自己的方法是不是对的，前人的备考经验里也没有这样的成功案例，所以我必然会怀疑自己。&lt;/p&gt;

&lt;p&gt;当时考研的同学会经常上一个考研论坛(bbs.kaoyan.com)交流，我刚惊喜的发现，这个论坛还在。我在里面找到了自己备考前发的一个帖子，内容如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;数学这么学有用吗？&lt;br /&gt;
我打算把课本上所有的定理及定义集中抄下来，将其证明过程集中完全搞懂，但应该会花费很多时间，大家怎么看啊？给点建议吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;帖子并不火爆，但也有一些回答，比如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;没必要，熟练应用需要的是练习，纯背诵效果意义都不大。而且市面上各种总结的数学手册肯定比你详细准确多了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再比如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;你证明定理定义对考试又什么用处&amp;hellip;&amp;hellip;&lt;br /&gt;
难道你考的是数学系？如果不是，那一点用都没有&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;又比如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;学了十几年的数学,你还没入门&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大多是这样的回复，要么是理解错了我的意思，要么是对这种方法持否定态度。所以，在网上寻找志同道合者以解决自我怀疑这条路没走通。这个时候就要靠一种发自内心的野蛮力量了，相信自己做的是正确的。其中有一个事情起了很大的辅助作用，那就是每天坚持跑步，它让我每天保持充沛的精力，平静的心态。&lt;/p&gt;

&lt;p&gt;好了，回忆完毕。&lt;/p&gt;

&lt;p&gt;仔细缕一缕整个过程，能总结出几个有价值的点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;方法论很重要。&lt;/li&gt;
&lt;li&gt;方法论要坚持执行才有意义。&lt;/li&gt;
&lt;li&gt;方法论不唯一。即使是数学考试这么个目标极其明确的事情，每个人都有自己的方法论。&lt;/li&gt;
&lt;li&gt;选择了一个方法论，就要相信它。&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>用手机发布静态博客</title>
      <link>https://pureage.info/post/write-a-blog-with-a-cellphone/</link>
      <pubDate>Fri, 23 Nov 2018 22:15:21 +0800</pubDate>
      
      <guid>https://pureage.info/post/write-a-blog-with-a-cellphone/</guid>
      
        <description>&lt;p&gt;这篇文章没有什么实际内容，请谨慎点开，不要浪费自己的时间。我就是想测试一下在手机上写一篇博客的感觉如何，能否达到以前使用动态博客程序时的体验。&lt;/p&gt;

&lt;p&gt;绝大部分时候，我不会在手机上发布一篇文章，主要原因是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;没有非得在手机上发文的紧迫性。&lt;/li&gt;
&lt;li&gt;在电脑前静下心来写一篇文章也能强迫自己安心整理思路、查阅资料，写出来的文章会更全面。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是也并不能完全排除这个可能，尤其是一些非知识性的心情随笔，可能思绪飘过，不抓住就飘远了，事后往往找不到当时的感觉。比如，2012年夏天我刚从成都到深圳工作时，住处的网络还没安装好，有几篇文章是我特意跑到网吧去写的，就是为了赶紧给当时的状态留下个痕迹。&lt;/p&gt;

&lt;p&gt;本次测试表明，Hugo+Caddy配合起来非常棒，完全能胜任在手机端写作和发布的工作。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>静态博客的黄金搭档:Caddy和Hugo</title>
      <link>https://pureage.info/post/caddy-and-hugo/</link>
      <pubDate>Wed, 21 Nov 2018 01:09:59 +0800</pubDate>
      
      <guid>https://pureage.info/post/caddy-and-hugo/</guid>
      
        <description>&lt;p&gt;几年前，在以Hexo、jekyll为代表的各种静态博客生成系统百花齐放的时候，我写过一篇&lt;a href=&#34;http://pureage.info/2015/12/16/still-using-typecho.html&#34;&gt;继续留在Typecho&lt;/a&gt;。并不是因为我非常守旧，而是经过实际使用测试之后，我认为不管这些静态生成器宣传的多么天花乱坠，它们实际上就是很难用，体现在安装、发布的各个方面。而它们的那些优点并不能让我忽略这些缺点。&lt;/p&gt;

&lt;p&gt;直到我遇到了Hugo。&lt;/p&gt;

&lt;p&gt;在去年下半年发现了Hugo后，我毫不犹豫的写了个脚本将之前所有的文章全部迁移了过来。仅凭它的无依赖和执行速度，就甩开它的那些前辈们好几个身位。&lt;/p&gt;

&lt;p&gt;至于Web Server，我一直是Openresty的死忠，对它是在是太熟悉了，所以理所当然这个博客也是用Openresty来提供服务。对Openresty/Nginx的深入了解，让我有一种踏实感和掌控感，哪怕对于一个静态站点来说，开启https和http2几乎是仅有的配置了。&lt;/p&gt;

&lt;p&gt;直到我遇到了Caddy。&lt;/p&gt;

&lt;p&gt;在了解和测试了caddy后，同样我立刻将Web Server由Openresty换成了Caddy。两三行配置就支持https和http2,支持证书的自动更新，再加上说得过去的性能，让人无法拒绝。&lt;/p&gt;

&lt;p&gt;至此，这个博客的技术方案就是Hugo+Caddy。&lt;/p&gt;

&lt;p&gt;将它们分开来说，Hugo是当前最优秀的静态网站生成器，Caddy是配置最简单的Web Server，而又都天生具有Golang程序容易部署的优点，凑在一起就就是个人博客系统的黄金搭档。&lt;/p&gt;

&lt;p&gt;另外，Caddy还有与hugo适配的插件http.hugo，使用这个插件后，可以有跟动态网站相同的文章发布体验。&lt;/p&gt;

&lt;p&gt;还有比这更完美的事情吗？&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>golang modules对git版本的依赖</title>
      <link>https://pureage.info/post/bad-feeling-about-go-cmd/</link>
      <pubDate>Fri, 16 Nov 2018 23:00:44 +0800</pubDate>
      
      <guid>https://pureage.info/post/bad-feeling-about-go-cmd/</guid>
      
        <description>&lt;p&gt;这些年来，由于golang缺少依赖管理，社区涌现了五花八门的依赖管理方案，比如glide、govendor、godep等。而golang 自1.11起，内置了modules方案，总算是来了个一锤定音。&lt;/p&gt;

&lt;p&gt;go modules方案的设计是非常好的，网上介绍go modules机制的文章很多，我这里也不再赘述。工作中写的一些golang项目，我都已经用上了该方案来做依赖管理。之所以这么快的拥抱新方案，是认为有google的背景，即使是新鲜出炉的功能，稳定性应该是有保证的，即使有坑，趟趟也就过去了。&lt;/p&gt;

&lt;p&gt;但是在这个过程中，发现的一些问题让我对google软件工程质量的信心大打折扣。&lt;/p&gt;

&lt;p&gt;举个例子，如果你的开发环境是centos6.5, git版本是比较旧的v1.7.1，这个时候使用go modules是会有问题的(不要问我为什么要在centos6.5上面编译golang程序，因为我个人习惯将开发环境保持与线上环境一致)。在go get或者go build会报一些五花八门的错误，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;build xxxx: cannot find module for path yyy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unknown revision xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体是哪一种错误，取决于不同的执行时机，比如你是对一个之前没有用过go modules的项目从头执行了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go mod init xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;做初始化之后再执行go get 或者go build，还是对一个已经使用go modules的项目直接执行 go get 或者go build。&lt;/p&gt;

&lt;p&gt;如果遇到这类问题，解决方法非常简单，升级一下git 版本到比较新的版本即可。这里说起来很轻描淡写，但是实际排查过程却是很让人恼火，因为整个go cmd的代码实在是太乱了，代码质量不敢恭维，阅读体验很差。那么问题在什么地方呢，在于在确定版本依赖关系的过程中，go cmd代码里调用了一些git指令，而这些指令在较老版本的git中还没有支持。这是一个多么正常的使用场景，可是golang从1.11到现在已经发布的1.11.2，均没有解决这个报错信息与真实原因风马牛不相及的问题。&lt;/p&gt;

&lt;p&gt;一个系统的构建对其他某些组件的版本有依赖，这在软件工程中是一个再常见不过的事情。最简单的处理方式是，要么在文档中写明依赖的版本信息，要么在构建过程中，如果发现某些组件版本太低，就抛出相关信息，然后退出。无论怎么做，都是为了达到一个目的：告诉使用者发生了什么事情，该怎么做。而go 1.11到go 1.11.2里是怎么做的呢，发现git 的一些指令执行失败了，却并不做好异常处理，一直到另一块代码中不得不失败退出，才丢出一个没有任何参考意义的错误信息。&lt;/p&gt;

&lt;p&gt;也许你会觉得我有点小题大做，毕竟是软件就会有bug。但真正让我恼火的是，一些golang的开发者居然保有这样的想法：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;反正开发者们一般是在ubuntu上面开发，上面的git 版本一般足够新了，编译完之后把二进制再部署到centos等老的系统上去就行了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这话当然不是我杜撰的，具体见: &lt;a href=&#34;https://github.com/golang/go/issues/26746&#34;&gt;https://github.com/golang/go/issues/26746&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;连我这种软件行业的凡夫俗子，都知道遇到异常的合理处理方式是什么（例如我在2013年写的一篇文章：&lt;a href=&#34;http://pureage.info/2013/07/13/117.html&#34;&gt;再不判断异常分支就剁手&lt;/a&gt;），google 里绝对意义上的高手竟然对此毫不在意，实在让人大跌眼镜。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>openstack swift中的composite ring</title>
      <link>https://pureage.info/post/composite-ring-of-swift/</link>
      <pubDate>Tue, 23 Oct 2018 15:39:41 +0800</pubDate>
      
      <guid>https://pureage.info/post/composite-ring-of-swift/</guid>
      
        <description>&lt;p&gt;openstack swift 在很早之前就有了 global clusters 的概念，给每一块磁盘赋予一个 region 的属性，在跨地域分布的集群里进行对象读写操作时，前端 proxy server  可以选择地缘近的后端存储服务来通信，进而达到低延迟和高吞吐的目的。具体配置见：&lt;a href=&#34;https://docs.openstack.org/swift/latest/overview_global_cluster.html&#34;&gt;Global Clusters&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这个功能乍看很实用，但是实际上很鸡肋，因为 swift 内部 ring 构建算法并不能保证各副本会均匀的分布在各 region 中。例如，如果你想通过两个 region 实现真正的跨机房备份的话是不行的，因为一个对象的所有副本可能都会在某一个机房的设备上，而另一个机房里一份副本都没有。如果连基本的均衡都做不到，之前的 global clusters 其实并无多大实际意义。&lt;/p&gt;

&lt;p&gt;在最新的 swift 2.19.0 版本里，通过一个叫做组合环（compsite ring）的概念，这个情况才得以改善。它的实现方式如下。&lt;/p&gt;

&lt;p&gt;一个组合环是由两个或多个普通环组合而成，组合后的环，其副本冗余数量是这些普通环的冗余数量之和。各个普通环是在不同的 region 使用不同的设备独立构建的。&lt;/p&gt;

&lt;p&gt;例如，假设想实现一个在A，B两地机房的三份冗余的存储，而且A机房作为主机房希望每个对象都在其上冗余两份，B机房作为次机房则只冗余一份。那么就在分别构建针对 A 和 B 的两个哈希环 RingA 和 RingB, RingA 在创建时指定其冗余份数为2，RingB 在创建时指定其冗余份数为1。在各自添加完设备并生成 ring 文件后，使用 swift 2.19.0 里新增的一个工具 swift-ring-composer，来将 RingA 和 RingB 组合成一个新的环，然后将这个新的环作为最终的环分发到各设备中去使用。&lt;/p&gt;

&lt;p&gt;文档里称 swift-ring-composer 是个实验性质的工具，未来可能会修改或被删除，大家酌情使用。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>王小波和狄德罗</title>
      <link>https://pureage.info/post/wangxiaobo-and-diderot/</link>
      <pubDate>Sat, 20 Oct 2018 00:13:41 +0800</pubDate>
      
      <guid>https://pureage.info/post/wangxiaobo-and-diderot/</guid>
      
        <description>&lt;p&gt;在《似水流年》里，王二曾经很想把肚子划破，掏出肠子挂到敌人脖子上去。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在和平年月里，生活只是挖坑种粮的竞争。虽然生的人高马大，我却比不过别人。这是因为：第一，我不是从小干惯了这种活计；第二，我有腰疼病，干农活没有腰不成。所以我盼望另一种竞争。在战场上，我的英勇会超过一切人。假如做了俘虏，我会偷偷捡块玻璃，把肚子划破，掏出肠子挂到敌人脖子上去。像我这样的兵员一定大为有用。但是不发生战争，我就像刘老先生一样没用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在经历了一系列的变故后，他逐渐放弃了这个想法。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我说过，在似水流年里，有一些事叫我日夜不安。就是这些事：贺先生死了，死时直挺挺；刘老先生死了，死前想吃一只鸭；我在美国时，我爸爸也死了，死在了书桌上，当时他在写一封信，要和我讨论相对论。虽然死法各异，但每个人身上都有足以让他们再活下去的能量。我真希望他们得到延长生命的机会，继续活下去。我自己再也不想掏出肠子挂在别人脖子上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个“掏出肠子挂在敌人脖子上”的描述，在若干年前第一次看《似水流年》时就给我留下了极为深刻的印象。我想王小波也更是受到什么东西的影响，才会写出这样的文字来。&lt;/p&gt;

&lt;p&gt;我认为，这个影响来自狄德罗。&lt;/p&gt;

&lt;p&gt;狄德罗何许人也？来一段维基上对他的描述。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;德尼·狄德罗（法语：Denis Diderot，1713年10月5日－1784年7月31日）是法国启蒙思想家、唯物主义哲学家、无神论者和作家，百科全书派的代表。他的最大成就是主编《百科全书，或科学、艺术和工艺详解词典》（通常称为《百科全书》）（1751年—1772年）。此书概括了18世纪启蒙运动的精神。恩格斯称赞他是“为了对真理和正义的热诚而献出了整个生命”的人。他也被视为是现代百科全书的奠基人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;粗俗的说，这是一个猛人。他甚至在临终前说过：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我死后，随便人们把我葬在哪里都行，但是我要宣布我既不相信圣父，也不相信圣灵，也不相信圣族的其他任何人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;狄德罗在王小波的书里，也出现过几次。&lt;/p&gt;

&lt;p&gt;比如，《未来世界》：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;报纸关心这些事的原因是：作者出了问题，报纸也会被停刊、罚款。所以我舅舅的传记又开始连载时不叫人物传记，而叫哲理小说了。读者反应还不坏，有人投书报社说，狄德罗写过《拉摩的侄子》，现在我们有了《我的舅舅》，实在好得很。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再比如，《革命时期的爱情》：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;过去狄德罗得了中耳炎，就用胡思乱想的办法止疼。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这说明王小波对狄德罗是非常熟悉的，而狄德罗还说过一句话（现在考证这句话很可能并不是狄德罗说的，系后人误传）：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对上帝的信仰是与对独裁的屈服紧密相连的，它们风雨同舟、荣辱与共；只有当最后一个国王被人用最后一个神父的肠子绞死时，人们才能获得自由。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这就把两个人联系起来了。以王小波对法国启蒙思想家的了解程度，我可以单方面宣布他关于“掏出肠子挂到敌人脖子上”的最初意识，是来自狄德罗的。当然这只是我的一点小趣味而已，小波即使在世，当也不会与我辩驳。&lt;/p&gt;

&lt;p&gt;(本文完)&lt;/p&gt;

&lt;p&gt;附：&lt;/p&gt;

&lt;p&gt;生活在18世纪的狄德罗还发现了一个后来被以他的名字命名的效应。&lt;/p&gt;

&lt;p&gt;狄德罗效应是一种常见的“愈得愈不足效应”，在没有得到某种东西时，心里很平稳，而一旦得到了，却不满足。&lt;/p&gt;

&lt;p&gt;有一天，朋友送给他一件质地精良、做工考究的睡袍，狄德罗非常喜欢。可他穿着华贵的睡袍在书房走来走去时，总觉得家具不是破旧不堪，就是风格不对，地毯的针脚也粗得吓人。于是，为了与睡袍配套，旧的东西先后更新，书房终于跟上了睡袍的档次，可他却觉得很不舒服，因为“自己居然被一件睡袍胁迫了”，就把这种感觉写成一篇文章叫《与旧睡袍别离之后的烦恼》。&lt;/p&gt;

&lt;p&gt;200年后，美国哈佛大学经济学家朱丽叶·施罗尔在《过度消费的美国人》一书中，提出了一个新概念——“狄德罗效应”，或“配套效应”，专指人们在拥有了一件新的物品后，不断配置与其相适应的物品，以达到心理上平衡的现象。&lt;/p&gt;

&lt;p&gt;是不是很有趣？&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>取名记</title>
      <link>https://pureage.info/post/the-name-given-to-my-baby/</link>
      <pubDate>Tue, 04 Sep 2018 18:15:20 +0800</pubDate>
      
      <guid>https://pureage.info/post/the-name-given-to-my-baby/</guid>
      
        <description>&lt;p&gt;2017年底，我的生活有了一个很大的变化，妻子怀孕了。怀孕这个事情本身是在我们计划之中，所以只有喜没有惊，算是顺利如意。&lt;/p&gt;

&lt;p&gt;我和妻子两人对生育小孩这个事情一直比较重视，为小朋友的到来提前做了很多准备。比如提前整整一年一起在一家拳馆练习拳击，事后证明，这个决定是非常正确的。另外一件比较重要的事情就是给小朋友取名字了。&lt;/p&gt;

&lt;p&gt;其实在几年前，我就已经开始把取名这个事情放在心里了，源自于对身边很多亲戚朋友给小孩取名无意义化、趋同化的震惊。大数据统计显示，“轩”、“梓”、“子”、“涵”等字处于白热化的扎堆状态，我对此很难理解。&lt;/p&gt;

&lt;p&gt;先定下原则，我觉得一个好名字必须满足如下几个要求：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;简单很重要。&lt;/li&gt;
&lt;li&gt;读起来顺口，且尽量无不好的谐音。&lt;/li&gt;
&lt;li&gt;有实际意义且寄托美好的愿望。&lt;/li&gt;
&lt;li&gt;较强的独特性。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;确定原则只是完成了第一步工作，俗话说巧妇难为无米之炊，第二步，输入材料要够。于是，这一两年里，诗经、楚辞、唐诗、宋词以及几部古典名著都成了我在上下班地铁公交途中的读物，这个步骤可以称为广撒网。&lt;/p&gt;

&lt;p&gt;经过上面广撒网式的收集，我手里已经有十几个备选的名字了。下一步就是从中在做精挑细选。在这个过程中，发现一个问题，有些名字最初遇到的时候非常心动，但几个月、一年之后又会发现没有那么好，而有些名字，第一眼没那么惊艳，时间长了反而觉得更有韵味。这更证实了我的看法，匆忙之下是很难取好一个名字的。&lt;/p&gt;

&lt;p&gt;长话短说，经过两年多的沉淀，最终锁定了一个名字：方云开。关于这个名字，有几点可以说说。&lt;/p&gt;

&lt;p&gt;首先,从文字本身上来说,这两个字足够简单。&lt;/p&gt;

&lt;p&gt;关于出处，有至今出处已不可考的诗句“守得云开见月明”(网上大多说这句出自水浒传，但我通读水浒很多遍，并未找到)，也有“云开见天”，“云开见日”等成语；李隆基有一首诗《平胡》，里面也有“雾扫清玄塞，云开静朔方”的句子；我最喜欢的还是水浒中引用北宋绍尧夫的“纷纷五代乱离间，一旦云开复见天”，在这句诗里居然还看到了李开复的名字。所以从寓意上来看，云开代表的是一种更加光明和美好的前景即将到来的状态。&lt;/p&gt;

&lt;p&gt;从文字本身来说，这两个字又不是简单的堆砌辞藻，够平实和大气。从读音上来看，最后一个开字是第一声，增强了气势。从文字本义上来说，云开二字很有动态的画面感，体现出一种生命力。&lt;/p&gt;

&lt;p&gt;可以看到，在我取名的原则里，是没有考虑五行八字的。倒不是我特别排斥，而是我认为五行八字的东西太深，如果一点都不懂或者只是道听途说懂个一星半点，还不如不参考。也没有太考虑性别，即使是女孩子，也尽量取个中性大气的名字。&lt;/p&gt;

&lt;p&gt;就这样，如无意外，小朋友的名字就是方云开了。然而，事与愿违，最终没有采用这个名字。&lt;/p&gt;

&lt;p&gt;在小朋友出生之后，一位在家族地位很高的长辈咨询了一位“大师”，说按小朋友的八字，名字一定要有火和土的属性。也许是该长辈在企业做领导久了的缘故，经常会在家族事务里把好心的建议变成一种行政式的命令。对此我内心是非常不愉快的，首先从八字上看，我家小朋友的八字比较复杂，是从弱格，不同的大师对此说法可能完全不一样，我怎么确认这位大师说的就一定是对的？其次，难道我历时两年的工作还不如大师随便说的几句话？这事如果是在知乎上，主流意见肯定是不要理会，但在我的个性很难做到如此强硬，在这种抵触又无奈情绪的影响下，取名这件事情我差点陷入破罐子破摔的状态。&lt;/p&gt;

&lt;p&gt;平静下来之后，取名还要继续下去。总不能真给小孩取“耀坤”这种“有火有土”的名字，于心难安啊。&lt;/p&gt;

&lt;p&gt;心态转变之后，又将精力专注于取名本身上来。只是这次进入了hard模式，上述几大原则不能丢，还必须加上五行属性的要求，时间上也有了deadline，必须在给小朋友办出生证明之前最终确定。做了这种妥协之后，我也做了如下的决定：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;名字属性上虽然必须满足火和土，但绝不要在字形里出现明显火和土的偏旁部首。这么做的目的是为了一定程度中和“大师”的不靠谱程度给小孩子带来的影响。&lt;/li&gt;
&lt;li&gt;名字一经确定，就不再征求除妻子之外其他人的意见了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我无法详实的记录这阶段取名的详细过程，只能给出之后的结果。最终确定的名字为“方立维”。取自文天祥《正气歌》里“地维赖以立，天柱赖以尊”这一句。古人认为天圆地方，大地靠几根绳子维系。将“维”和“立”在诗句中出现的顺序调换了一下，使其读起来更顺口。要说有什么寓意的话，希望小朋友以后做一个堂堂正正顶天立地的男子汉吧。&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
