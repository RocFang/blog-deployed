<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>纯真年代</title>
    <link>http://pureage.info/</link>
    <description>Recent content on 纯真年代</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 18 Mar 2019 14:49:45 +0800</lastBuildDate>
    
	<atom:link href="http://pureage.info/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang中令人不那么愉悦的import</title>
      <link>http://pureage.info/post/annoying-golang-import/</link>
      <pubDate>Mon, 18 Mar 2019 14:49:45 +0800</pubDate>
      
      <guid>http://pureage.info/post/annoying-golang-import/</guid>
      <description>&lt;p&gt;众所周知，在github上参与开源项目的一般流程如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将开源项目fork到自己的名下。&lt;/li&gt;
&lt;li&gt;在本地开发环境中clone自己在上一步中fork的项目。&lt;/li&gt;
&lt;li&gt;本地完成开发测试和代码提交，再push到自己名下的仓库中。&lt;/li&gt;
&lt;li&gt;从自己名下的这个项目中，对原始项目发起一个pull request。&lt;/li&gt;
&lt;li&gt;发起的pull request被上游merge后，自己的代码就进入开源项目中了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;虽然具体workflow的细节上可能有些差异，但总体流程大概就是这样。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>徒手攀岩</title>
      <link>http://pureage.info/post/free-solo/</link>
      <pubDate>Tue, 12 Mar 2019 14:09:22 +0800</pubDate>
      
      <guid>http://pureage.info/post/free-solo/</guid>
      <description>&lt;p&gt;从小到大做过不少不少恶梦，一个反复出现的场景是我被困在一面绝壁之上，进退维谷。最后通常有两个结局，一是始终在高压的状态下度过这个梦境，有可能会被吓醒；另一个是突然意识到自己正在做梦，然后抛开一切恐惧，纵身一跃，飞翔于天地间。&lt;/p&gt;

&lt;p&gt;以后我才知道，原来有一项叫徒手攀岩的极限运动，我在那些恶梦中所处的场景，是这项运动的爱好者们的日常。不同的是，这不是梦。一个闪失，他们就会粉身碎骨，成为不断增长的死亡列表里的一个新的名字。&lt;/p&gt;

&lt;p&gt;纪录片《徒手攀岩》，就讲述了Alex Honnold在无保护措施下成功攀登酋长岩的经过。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>洛奇6中的一段台词</title>
      <link>http://pureage.info/post/a-line-in-rocky6/</link>
      <pubDate>Wed, 09 Jan 2019 18:27:11 +0800</pubDate>
      
      <guid>http://pureage.info/post/a-line-in-rocky6/</guid>
      <description>&lt;p&gt;你绝对不会相信，但你以前才这么大，我会把你举高跟你妈说，“他将是世界上最棒的小孩，这孩子绝对超乎想象的优秀”。你长大以后真的很棒，每天看着你就是一种特权了。&lt;/p&gt;

&lt;p&gt;后来你成年就独立了，踏入社会，表现得很好。但不知道什么时候，你变了，不再是原本的你。你让人用手指着你的脸，骂你没用。遇到困难就开始怪罪别人，好像活在阴影下似的。&lt;/p&gt;

&lt;p&gt;跟你说一件你已经知道的事。人生未必都是美好的，世间险恶又无情。不管你有多坚强，你一松懈，就会被逼的屈膝臣服。谁打你，都不会比人生的打击更重。但重点不是你出手多重，而是你能忍耐多少，继续向前迈进。你能承受多少还能向前迈进！这样才能赢啊！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>奎迪：英雄再起</title>
      <link>http://pureage.info/post/creed2/</link>
      <pubDate>Fri, 04 Jan 2019 15:02:29 +0800</pubDate>
      
      <guid>http://pureage.info/post/creed2/</guid>
      <description>&lt;p&gt;作为洛奇系列电影的旁支，《奎迪》系列的第二部最近在国内院线上映了。作为一个拳击题材电影的影迷和现实生活中的拳迷，虽然不久前我已经在网上找到视频资源先睹为快了，在上映后仍去电影院重温了一下。&lt;/p&gt;

&lt;p&gt;总的来说，我对这部电影很满意。与上一部相比，加入了更多拳击之外的感情戏，导致中间会有一些沉闷，应该会引起一些争议。但拳击电影从来都不是从头到尾在擂台上拳拳到肉，如果缺了感情的铺垫，情绪没有累积上来，最后的决战就无法成为高潮。&lt;/p&gt;

&lt;p&gt;说一说这个电影除了主角奎迪的成长之外，有意思的两个地方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在考研数学中得到148分</title>
      <link>http://pureage.info/post/how-i-got-148-marks-for-math-in-national-entrance-examination-for-postgraduate/</link>
      <pubDate>Wed, 02 Jan 2019 14:24:49 +0800</pubDate>
      
      <guid>http://pureage.info/post/how-i-got-148-marks-for-math-in-national-entrance-examination-for-postgraduate/</guid>
      <description>&lt;p&gt;本来不想取这个标题，因为它第一眼看上去有一种炫耀的情绪在里面。甚至连这篇文章都犹豫了很久要不要写，犹豫的原因无外乎读者可能会有下面几种看法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;作为一个工作多年的人，还对考研成绩念念不忘，是不是说明考研之后的人生太失败？&lt;/li&gt;
&lt;li&gt;这种文章写出来会不会像现在满大街的鸡汤文一样，都是正确的废话？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为什么又决定还是写下这篇文章呢？&lt;/p&gt;

&lt;p&gt;首先是我想写一系列回忆过去的文章，从中思考“我是怎么成为现在的我”这个哲学命题，考研虽然只是一件小事，但仍有值得记住和总结的地方。其次，考研一结束，这个事情就被我抛在脑后，几乎忘掉，近年来各种关于“认知”、“精进”、“学习”的自媒体非常火爆，但是读了这些看上去非常高大上的文章之后，我才发现其实我在考研中其实就用到了很多相关的方法，只是当时并不自知，因此也值得回忆和总结一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用手机发布静态博客</title>
      <link>http://pureage.info/post/write-a-blog-with-a-cellphone/</link>
      <pubDate>Fri, 23 Nov 2018 22:15:21 +0800</pubDate>
      
      <guid>http://pureage.info/post/write-a-blog-with-a-cellphone/</guid>
      <description>&lt;p&gt;这篇文章没有什么实际内容，请谨慎点开，不要浪费自己的时间。我就是想测试一下在手机上写一篇博客的感觉如何，能否达到以前使用动态博客程序时的体验。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>静态博客的黄金搭档:Caddy和Hugo</title>
      <link>http://pureage.info/post/caddy-and-hugo/</link>
      <pubDate>Wed, 21 Nov 2018 01:09:59 +0800</pubDate>
      
      <guid>http://pureage.info/post/caddy-and-hugo/</guid>
      <description>&lt;p&gt;几年前，在以Hexo、jekyll为代表的各种静态博客生成系统百花齐放的时候，我写过一篇&lt;a href=&#34;http://pureage.info/2015/12/16/still-using-typecho.html&#34;&gt;继续留在Typecho&lt;/a&gt;。并不是因为我非常守旧，而是经过实际使用测试之后，我认为不管这些静态生成器宣传的多么天花乱坠，它们实际上就是很难用，体现在安装、发布的各个方面。而它们的那些优点并不能让我忽略这些缺点。&lt;/p&gt;

&lt;p&gt;直到我遇到了Hugo。&lt;/p&gt;

&lt;p&gt;在去年下半年发现了Hugo后，我毫不犹豫的写了个脚本将之前所有的文章全部迁移了过来。仅凭它的无依赖和执行速度，就甩开它的那些前辈们好几个身位。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang modules对git版本的依赖</title>
      <link>http://pureage.info/post/bad-feeling-about-go-cmd/</link>
      <pubDate>Fri, 16 Nov 2018 23:00:44 +0800</pubDate>
      
      <guid>http://pureage.info/post/bad-feeling-about-go-cmd/</guid>
      <description>&lt;p&gt;这些年来，由于golang缺少依赖管理，社区涌现了五花八门的依赖管理方案，比如glide、govendor、godep等。而golang 自1.11起，内置了modules方案，总算是来了个一锤定音。&lt;/p&gt;

&lt;p&gt;go modules方案的设计是非常好的，网上介绍go modules机制的文章很多，我这里也不再赘述。工作中写的一些golang项目，我都已经用上了该方案来做依赖管理。之所以这么快的拥抱新方案，是认为有google的背景，即使是新鲜出炉的功能，稳定性应该是有保证的，即使有坑，趟趟也就过去了。&lt;/p&gt;

&lt;p&gt;但是在这个过程中，发现的一些问题让我对google软件工程质量的信心大打折扣。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>openstack swift中的composite ring</title>
      <link>http://pureage.info/post/composite-ring-of-swift/</link>
      <pubDate>Tue, 23 Oct 2018 15:39:41 +0800</pubDate>
      
      <guid>http://pureage.info/post/composite-ring-of-swift/</guid>
      <description>&lt;p&gt;openstack swift 在很早之前就有了 global clusters 的概念，给每一块磁盘赋予一个 region 的属性，在跨地域分布的集群里进行对象读写操作时，前端 proxy server  可以选择地缘近的后端存储服务来通信，进而达到低延迟和高吞吐的目的。具体配置见：&lt;a href=&#34;https://docs.openstack.org/swift/latest/overview_global_cluster.html&#34;&gt;Global Clusters&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>王小波和狄德罗</title>
      <link>http://pureage.info/post/wangxiaobo-and-diderot/</link>
      <pubDate>Sat, 20 Oct 2018 00:13:41 +0800</pubDate>
      
      <guid>http://pureage.info/post/wangxiaobo-and-diderot/</guid>
      <description>&lt;p&gt;在《似水流年》里，王二曾经很想把肚子划破，掏出肠子挂到敌人脖子上去。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在和平年月里，生活只是挖坑种粮的竞争。虽然生的人高马大，我却比不过别人。这是因为：第一，我不是从小干惯了这种活计；第二，我有腰疼病，干农活没有腰不成。所以我盼望另一种竞争。在战场上，我的英勇会超过一切人。假如做了俘虏，我会偷偷捡块玻璃，把肚子划破，掏出肠子挂到敌人脖子上去。像我这样的兵员一定大为有用。但是不发生战争，我就像刘老先生一样没用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在经历了一系列的变故后，他逐渐放弃了这个想法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>取名记</title>
      <link>http://pureage.info/post/the-name-given-to-my-baby/</link>
      <pubDate>Tue, 04 Sep 2018 18:15:20 +0800</pubDate>
      
      <guid>http://pureage.info/post/the-name-given-to-my-baby/</guid>
      <description>&lt;p&gt;2017年底，我的生活有了一个很大的变化，妻子怀孕了。怀孕这个事情本身是在我们计划之中，所以只有喜没有惊，算是顺利如意。&lt;/p&gt;

&lt;p&gt;我和妻子两人对生育小孩这个事情一直比较重视，为小朋友的到来提前做了很多准备。比如提前整整一年一起在一家拳馆练习拳击，事后证明，这个决定是非常正确的。另外一件比较重要的事情就是给小朋友取名字了。&lt;/p&gt;

&lt;p&gt;其实在几年前，我就已经开始把取名这个事情放在心里了，源自于对身边很多亲戚朋友给小孩取名无意义化、趋同化的震惊。大数据统计显示，“轩”、“梓”、“子”、“涵”等字处于白热化的扎堆状态，我对此很难理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《如何阅读一本书》读书笔记</title>
      <link>http://pureage.info/post/howto-read-a-book/</link>
      <pubDate>Tue, 14 Nov 2017 13:45:01 +0000</pubDate>
      
      <guid>http://pureage.info/post/howto-read-a-book/</guid>
      <description>&lt;p&gt;在几位前辈的推荐下，读完了由莫提默·J.艾德勒和查尔斯·范多伦合著的《如何阅读一本书》，受益良多。&lt;/p&gt;

&lt;p&gt;如书名明示的那样，这是一本指导读者如何读书的书。时至今日，阅读的目标可以分为两种，一种是为获得资讯而阅读，另一种是为增进理解而阅读。这本书就是为希望从阅读中增进理解的读者而准备的。&lt;/p&gt;

&lt;p&gt;在阅读一本书之前，我们或多或少对其有一些期许，认为作者有义务努力的把书写好。本书提出作为读者也有自己该履行的义务。书中有一个比喻，在一场阅读的过程中，作者与读者就像是棒球赛场中的一对投手和捕手。写作与阅读的东西就像那只球一样，是被主动、有活力的双方所共有的，由一方开始，另一方终结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>过时的技术</title>
      <link>http://pureage.info/post/obsolescent-technology/</link>
      <pubDate>Tue, 10 Oct 2017 15:01:38 +0000</pubDate>
      
      <guid>http://pureage.info/post/obsolescent-technology/</guid>
      <description>&lt;p&gt;互联网技术的世界很奇怪。&lt;/p&gt;

&lt;p&gt;大部分时候我们都会听到各种关于技术更新换代太快的说法，仿佛昨天大家都还在用这个流行的物件（技术、框架、架构等）呢，今天就一窝蜂的追赶上另一个更新更时髦的了。&lt;/p&gt;

&lt;p&gt;但有时候又会情不自禁的感慨，有些过时的东西，淘汰的也太慢了。&lt;/p&gt;

&lt;p&gt;这些东西，你明知道它们早晚要被淘汰，但你就是不知道它们到底会撑到什么时候。&lt;/p&gt;

&lt;p&gt;举个例子，mp4点播服务的伪流化(pseudo-streaming)功能。&lt;/p&gt;

&lt;p&gt;这个功能是干什么的呢，简单描述一下，就是提供了对在线mp4点播服务的拖拽功能，或者称为seek。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://pureage.info/about/</link>
      <pubDate>Sun, 17 Sep 2017 11:11:29 +0000</pubDate>
      
      <guid>http://pureage.info/about/</guid>
      <description>strider的由来 《指环王》里Aragorn的外号叫作strider。《指环王》是我最喜爱的电影之一，事实上我是在看书后才看的电影。因为高</description>
    </item>
    
    <item>
      <title>梁山一百单八将为何第一个出场的是他</title>
      <link>http://pureage.info/2017/05/29/shijin.html</link>
      <pubDate>Mon, 29 May 2017 03:46:00 +0000</pubDate>
      
      <guid>http://pureage.info/2017/05/29/shijin.html</guid>
      <description>&lt;p&gt;我们都知道,《水浒传》中有一百零八员好汉聚义于梁山泊，从文学创作的角度来说，这么多性格各异的人物要讲清楚是一件难度非常大的事情,而施耐庵很好的完成了这个任务。如同程序里指针的使用一样，通过一人一事，引出另一人一事，逐渐将所有的人物串联起来，这种写作技巧其实是很高超的。&lt;/p&gt;

&lt;p&gt;近些年火热的魔幻史诗小说《冰与火之歌》，让POV这种写作手法被粉丝们津津乐道，其实跟《水浒传》采用的技巧很类似，并无多大新意。&lt;/p&gt;

&lt;p&gt;那么在这众多人物的出场中，第一个出场的人就很重要了。这被很多人忽略，但值得一品。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>青海湖骑行记</title>
      <link>http://pureage.info/2016/08/28/goto-qinghai-lake.html</link>
      <pubDate>Sun, 28 Aug 2016 03:46:00 +0000</pubDate>
      
      <guid>http://pureage.info/2016/08/28/goto-qinghai-lake.html</guid>
      <description>&lt;p&gt;七月底，终于和婷在婚假里完成了“蓄谋”已久的青海湖之行，骑行路上花了五天，其中骑行四天，休息一天，全部行程约360公里，这里简单的记录一下流水账。&lt;/p&gt;

&lt;h3 id=&#34;第一天行程-西海镇-江西沟&#34;&gt;第一天行程：西海镇-&amp;gt;江西沟&lt;/h3&gt;

&lt;p&gt;在前一天下午到达西海镇，并将自行车租好之后，7月24号上午10点半，我们就正式从西海镇出发了。之所以这么晚才出发，是听说青海早晚温差大，早上起来早了会很冷。事后证明，这个出发时间是错误的，还是尽量早一点比较好。&lt;/p&gt;

&lt;p&gt;第一天上午在路上是很兴奋的，到处是Windows经典桌面般的蓝天白云。路上骑车的人，或独自前行，或三五成群。耳边不断响起的，有鸟鸣，有风声，还有骑友们随车携带的小音箱里飘出来的民谣和彼此的加油打气声。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>代码中的谎言</title>
      <link>http://pureage.info/2016/07/04/lies-in-code.html</link>
      <pubDate>Mon, 04 Jul 2016 15:17:00 +0000</pubDate>
      
      <guid>http://pureage.info/2016/07/04/lies-in-code.html</guid>
      <description>&lt;p&gt;俗话说，一个谎言，要用一百个谎言去圆。&lt;/p&gt;

&lt;p&gt;在代码的世界里，同样如此。当然，这里只是借用“谎言”这个概念，并不带有任何贬义色彩。“谎言”用来指代那些由于设计或理解上的小疏漏，因为这些小疏漏，导致后续的代码里使用很多迂回的策略来达到目的。&lt;/p&gt;

&lt;p&gt;但是代码世界里的“谎言”，又与真实世界的“谎言”截然不同，因为我们有版本管理系统在背后默默的记录着一切。通过它，我们可以对“谎言”进行追根溯源，找到最初的疏漏。&lt;/p&gt;

&lt;p&gt;今天我们就来以&lt;a href=&#34;https://github.com/arut/nginx-rtmp-module&#34;&gt;Nginx-RTMP&lt;/a&gt;这个项目为例，来“拆穿”它的一个设计精巧的“谎言”。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>雨中午后</title>
      <link>http://pureage.info/2016/06/11/a-rainy-afternoon.html</link>
      <pubDate>Sat, 11 Jun 2016 09:30:00 +0000</pubDate>
      
      <guid>http://pureage.info/2016/06/11/a-rainy-afternoon.html</guid>
      <description>&lt;p&gt;细雨中&lt;br /&gt;
一辆自行车迎面而来&lt;br /&gt;
车篮里&lt;br /&gt;
一个小女孩伸开双手在飞翔&lt;br /&gt;
卷发贴在额头&lt;br /&gt;
脸蛋红成一个苹果&lt;/p&gt;

&lt;p&gt;多年以后&lt;br /&gt;
她也许还记得&lt;br /&gt;
这个阳光明媚的下午&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>看小说与看代码的共通之处</title>
      <link>http://pureage.info/2016/06/08/similarities-of-novels-and-codes.html</link>
      <pubDate>Tue, 07 Jun 2016 16:10:47 +0000</pubDate>
      
      <guid>http://pureage.info/2016/06/08/similarities-of-novels-and-codes.html</guid>
      <description>&lt;p&gt;看小说，是我从小的爱好，看代码写代码，是我谋生的技能。这是两件极不相干的事，但是最近忽然觉得，这两者却有相通之处。原来我一直是用看小说的方式来看代码。&lt;/p&gt;

&lt;p&gt;我认为，一部好的小说，如果不是囫囵吞枣随意读完便罢的话，至少是要看三遍的。&lt;/p&gt;

&lt;p&gt;第一遍，按顺序读完。&lt;/p&gt;

&lt;p&gt;第二遍，以事件、时间为中心，再看一遍。&lt;/p&gt;

&lt;p&gt;第三遍，以人物为中心，再看一遍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>朋友李忠</title>
      <link>http://pureage.info/2016/06/04/friend-lizhong.html</link>
      <pubDate>Sat, 04 Jun 2016 11:19:00 +0000</pubDate>
      
      <guid>http://pureage.info/2016/06/04/friend-lizhong.html</guid>
      <description>&lt;p&gt;《水浒传》是我在错误的年龄过早接触的一部古典名著。&lt;/p&gt;

&lt;p&gt;六岁的时候，父亲给我买了个收音机，我主要用来听两个节目，一个是小喇叭广播讲西游记，另一个就是水浒传的评书，每天都不落下。兴致好的时候，我还会给长辈们复述一遍。所以，水浒传里的故事对于那时的我，真是耳熟能详。大概小学三年级的时候，一位念初中的表哥，买了一本一百二十回版本的《水浒全传》，被我借回来断断续续的看完了。因为故事梗概早已烂熟于胸，所以读起来并不费劲。升初中的那个暑假，更是将全书又仔细的读了一遍，那个时候对水浒传的细节掌握程度达到了顶峰。一百二十个章回题目，一百零八将的姓名、外号、星宿，都能完整的复述出来。从那之后，除了电视剧就再也没有如此仔细的接触水浒了。&lt;/p&gt;

&lt;p&gt;后来，我才知道金圣叹&amp;rdquo;少不看水浒&amp;rdquo;的说法，对当年视为英雄的梁山好汉们的行为，也有了更全面的认识。而在这之前，在整个青少年时期，水浒对我的性格和价值观的形成产生着极大的影响。所以说现在客观的评价，我是在错误的年龄过早的接触了它。&lt;/p&gt;

&lt;p&gt;到了现在这个年龄，偶尔再翻看一下水浒，却有完全不同的感受。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>